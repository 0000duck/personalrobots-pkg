#!/bin/bash
#This file is needed, to force the use of bash, so devConfig can be sourced.

if [ `uname` = Darwin ]; then
  export DYLD_BIND_AT_LAUNCH=YES
fi


# Set up a build directory with suitable soft link & environment variable bindings. This is set
# at the root of the user tree to avoid problems with very long paths to build files which
# cause problems with jam, which has a hard limit on the command line length
ln -s `rospack find trex_core` ~/trex_core_build
cd ~/trex_core_build
source ./TREX/devConfig
cd TREX

# Build function takes:
# 1. library name
# 2. jam flags
# 3. return error code
function run_jam {

  echo "Running jam with command" $1 " and options" $2
  if [ `uname` = Darwin ]; then
    jam $2  -q $1.dylib
  else
    jam $2  -q $1.so
  fi

  if [ $? -ne 0 ] ; then
    echo "Jam of $1 failed."
    rm -rf ~/trex_core_build
    exit $3
  fi
}


if [ "$1" = "test" ] ; then
  if [ $? -ne 0 ] ; then
    echo "TREX test file creation failed."
    rm -rf ~/trex_core_build
    exit 1
  fi
  jam run-agent-module-tests
  if [ $? -ne 0 ] ; then
    echo "TREX tests failed."
    rm -rf ~/trex_core_build
    exit 1
  fi

else
  if [ "$ROS_TREX_DEBUG" = "1" ] ; then
      run_jam "libTREX_g" " " 1
  fi
  jam nddl-reader
  run_jam "libTREX_o" "-sVARIANTS=OPTIMIZED -sLIBRARIES=SHARED" 2
  rm -rf ~/trex_core_build
fi

