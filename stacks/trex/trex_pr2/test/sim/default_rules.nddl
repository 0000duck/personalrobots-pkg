/**
 * For now, assume a fixed duration, and always return success.
 */
DoorAction::Active{
  meets(Inactive s);
  eq(s.status, SUCCESS);
  defaultOnCommit(duration, 1);
}

// Set the farme id to be odom_bombined for testing purposes
DoorAction::Inactive{
  frame_id == "odom_combined";
}

CheckPath::Active{
  meets(Inactive s);
  eq(s.status, SUCCESS);
  defaultOnCommit(duration, 1);
}

MoveBase::Active{
  meets(Inactive s);
  eq(s.status, SUCCESS);
  defaultOnCommit(duration, 1);
  eq_pose_msg(s.object, object);

  // Only update the base state if we are working in the map frame
  if(object == move_base){
    meets(base_state.Holds bs);
    eq_pose_msg(bs.object, object);
  }
}

StopAction::Active{
  defaultOnCommit(duration, 5);
  meets(Inactive s);
  eq(s.status, SUCCESS);
}

CheckPath::Inactive{
  if(status == SUCCESS){
    eq(is_clear, false);
  }
}

UnlatchHandle::Inactive{
  if(status == SUCCESS){
    eq(latch_state, LATCH_STATE_UNLATCHED);
  }
}

PushDoor::Active{
  eq(duration, 10);
}

OpenDoor::Active{
  eq(duration, 10);
}

DetectOutletCoarse::Inactive{
  frame_id == "odom_combined";
  x == 1.0;
  y == 1.0;
  z == 0.0;
  qx == 0.0;
  qy == 1.0;
  qz == 0.0;
  qw == 1.0;
}

DetectOutletFine::Inactive{
  frame_id == "odom_combined";
  x == 1.0;
  y == 1.0;
  z == 0.0;
  qx == 0.0;
  qy == 1.0;
  qz == 0.0;
  qw == 1.0;
}

DetectPlugOnBase::Inactive{
  frame_id == "odom_combined";
  x == 0.5;
  y == 0.5;
  z == 0.3;
}

