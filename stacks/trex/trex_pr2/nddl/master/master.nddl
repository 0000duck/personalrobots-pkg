/*
 * Copyright (c) 2009, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "TREX.nddl"
#include "world_model/topological_map.nddl"
#include "navigator/exports.nddl"
#include "plugs/exports.nddl"
#include "rcs/base_state.nddl"

// Priority for goals
typedef int [0 5] PRIORITY;

// Set a global duration bound for top level goal
int GLOBAL_DURATION_BOUND = 6000;

class M2Goals extends Behavior {
  predicate Active{
    MAP_KEY outlet_id;
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;

    // Constraint must be defined here to allow x and y values to be accessible for planning.
    map_get_outlet_approach_pose(x, y, z, qx, qy, qz, qw, outlet_id);
  }

  M2Goals(){ super(Internal); }
};

// Internal Timelines
M2Goals m2_goals = new M2Goals();

// External timelines. base state used  so the goals can be reasonable ordered based on current position.
Navigator navigator = new Navigator(External);
Recharger recharger = new Recharger(External);
BaseState base_state = new BaseState(External);

M2Goals::Active{
 default(frame_id, "map");

 max_duration <= GLOBAL_DURATION_BOUND;

 // Must get to the target location
 contains(navigator.Active cmd_nav);
 eq_pose_msg(cmd_nav.object, object);
 cmd_nav.frame_id == frame_id;

 // Now have to conditionally handle the case of recharging since we might not need to do it. If not recharging,
 // then this goal will be terminated on the transition to the desired inactive navigation state. Otherwise it will
 // end when recharging is done.
 if(outlet_id == NO_KEY){
   ends cmd_nav;
 }
 else {
   if(isSucceded(cmd_nav.object)){
     ends(recharger.Active cmd_recharge);
     cmd_recharge.outlet_id == outlet_id;
     cmd_recharge.frame_id == frame_id;
     cmd_nav before cmd_recharge;
   }
 }
}

// If navigation fails, transition goal timeline with status
Navigator::Inactive{
  if(status != SUCCESS){
    starts_during(m2_goals.Inactive m);
    m.status == status;
  }
}

// Recharger transition always transitions m2 goals
Recharger::Inactive{
  starts_during(m2_goals.Inactive m);
  m.status == status;
}

/**
 * If a goal does not succeed then we should regenerate it for later. 
 */
M2Goals::Inactive{
  if(status != SUCCESS){
    met_by(Active p);
    before (Active g);
    g.outlet_id == p.outlet_id;
    eq_pose_msg(g.object, p.object);
    g.frame_id == p.frame_id;
  }
}
