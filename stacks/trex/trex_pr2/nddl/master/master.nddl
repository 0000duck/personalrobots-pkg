/*
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "TREX.nddl"
#include "world_model/topological_map.nddl"
#include "rcs/exports.nddl"
#include "rcs/nav/exports.nddl"
#include "rcs/plugs/exports.nddl"
#include "nav/exports.nddl"
#include "plugs/exports.nddl"

// Priority for goals
typedef int [0 5] PRIORITY;

// Time Bounds For top level components
float RECHARGER_DURATION_BOUND = 600.0;
float DOORMAN_DURATION_BOUND = 600.0;
float DRIVER_DURATION_BOUND = 600.0;

class M2Goals extends Behavior {
  predicate Active{
    MAP_KEY outlet_id;
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;

    // Constraint must be defined here to allow x and y values to be accessible for planning.
    map_get_outlet_approach_pose(x, y, z, qx, qy, qz, qw, outlet_id);
    defaultOnCommit(frame_id, "map");
  }

  predicate Inactive{}

  M2Goals(){
    super(Internal);
  }
};

class M2Controller extends AgentTimeline {
  predicate Holds {
    bool active;
    bool recharge_required;
    bool recharged;
    bool finished;
    float x;
    float y;
  }

  M2Controller(){
    super(Internal, "Holds");
  }
};

// Internal Timeines
M2Goals m2_goals = new M2Goals();
M2Controller m2_controller = new M2Controller();

// External timelines
Navigator navigator = new Navigator(External);
Recharger recharger = new Recharger(External);
BaseState base_state = new BaseState(External);

M2Goals::Active{

  if(start){
    starts(m2_controller.Holds mc);
    starts_during(base_state.Holds bs);
    eq(mc.active, true);
    eq(mc.recharged, false);
    eq(mc.finished, false);	
    eq(mc.x, bs.x);
    eq(mc.y, bs.y);

    if(outlet_id == NO_KEY){
      eq(mc.recharge_required, false);
    }
    else {
      eq(mc.recharge_required, true);
    }
  }
}

/**
 * If a goal aborts then we should regenerate it for later
 */
M2Goals::Inactive{
  if(status == ABORTED){
    met_by(Active p);
    before (Active g);
    eq(g.outlet_id, p.outlet_id);
    eq_pose_msg(g.object, p.object);
  }
}

/**
 * The loop for master level control. It uses the doorman, driver and recharger. 
 */
M2Controller::Holds{
  if(active == false){
    equals(m2_goals.Inactive);
  }

  // Default based on predecessors
  met_by(Holds p);
  defaultOnCommit(active, p.active);
  defaultOnCommit(recharge_required, p.recharge_required);
  defaultOnCommit(recharged, p.recharged);
  defaultOnCommit(finished, p.finished);
  defaultOnCommit(x, p.x);
  defaultOnCommit(y, p.y);

  if(active == true){
    meets(Holds s);
    contained_by(m2_goals.Active m2_active);

    // Are we at the goal?
    float distance;
    calcDistance(distance, x, y, m2_active.x, m2_active.y);
    bool at_goal;
    testLEQ(at_goal, distance, 0.2);

    if(finished == true){
      meets(m2_goals.Inactive m2_inactive);
      eq(s.active, false);
      eq(duration, 1);

      if(recharge_required == true){
	if(recharged == true){
	  eq(m2_inactive.status, SUCCESS);
	}
	else {
	  eq(m2_inactive.status, ABORTED);
	}
      }
      else {
	if(at_goal == true){
	  eq(m2_inactive.status, SUCCESS);
	}
	else {
	  eq(m2_inactive.status, ABORTED);
	}
      }
    }
    else {
      if(at_goal == true){
	if(recharge_required == true){ 
	  contains_start(recharger.Active cmd);
	  concurrent(cmd.end, end);
	  eq(cmd.max_duration, RECHARGER_DURATION_BOUND);
	  eq(cmd.outlet_id, m2_active.outlet_id);
	}
	else {
	  meets(m2_goals.Inactive m2_inactive);
	  eq(m2_inactive.status, SUCCESS);
	  eq(s.active, false);
	  eq(duration, 1);
	}
      }
      else{
	contains_start(navigator.Active cmd);
	concurrent(cmd.end, end);
	eq_pose_msg(cmd.object, m2_active.object);
      }
    }
  }
}

/**
 * The update does not change control states unless it is aborted. Instead, it
 * updates with the new position data
 */
Navigator::Inactive{
  starts(m2_controller.Holds mc);
  if(status == SUCCESS){
    eq(mc.x, x);
    eq(mc.y, y);
  }
  else {
    eq(mc.finished, true);
  }
}

Recharger::Inactive{
  starts(m2_controller.Holds mc);
  if(status == SUCCESS){
    eq(mc.finished, true);
    eq(mc.recharged, true);
  }
  else {
    eq(mc.finished, true);
    eq(mc.recharged, false);
  }
}

