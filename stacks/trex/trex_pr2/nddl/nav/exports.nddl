
// Constants for acceptable errors in pose
float XY_ERROR = 0.5;
float THETA_ERROR = 0.1;
float POSE_ERROR = 0.1;

#include "world_model/topological_map.nddl"

/**
 * The MoveBehavior is an abstract class that handles navigation towards a goal. A mode paramter
 * will be used to indicate the type of concrete class to use.
 */

class MoveBehavior extends Behavior {
  predicate Inactive{
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
  }

  // Parameters to get to the target
  predicate Active {
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
    MAP_KEY start_connector;
  }

  MoveBehavior(Mode _mode){
    super(_mode);
  }
};

class Navigator extends Behavior {
  predicate Inactive{}

  predicate Active{
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;

    // Constraint must be defined here to allow x and y values to be accessible for planning.
    defaultOnCommit(frame_id, "map");
  }

  predicate Inactive{
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;

    // Constraint must be defined here to allow x and y values to be accessible for planning.
    defaultOnCommit(frame_id, "map");
  }

  Navigator(Mode _mode){
    super(_mode);
  }
};

MoveBehavior::Inactive{
  if(status == SUCCESS){
    met_by(Active p);
    eq_pose_msg(object, p.object);
  }
}

Navigator::Inactive{
  if(status == SUCCESS){
    met_by(Active p);
    eq_pose_msg(object, p.object);
  }
}

