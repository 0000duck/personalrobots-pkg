#include "rcs/rcs.nddl"

/**
 * This file defines the classes that are specific to the integration with the high level controllers
 * and state variables of the door domain.
 */

/** CONSTANTS and TYPEDEFS **/

int UNKNOWN = 0;

int FRAME_P1 = 1;
int FRAME_P2 = 2;
typedef int [0, 2] HINGE_FRAME;

int ROT_DIR_CLOCKWISE = 1;
int ROT_DIR_COUNTERCLOCKWISE = 2;
typedef int [0, 2] ROTATION_DIRECTION;


// Derived from the door message
typedef int [0 3] LatchState;
int LATCH_STATE_LOCKED = 1;
int LATCH_STATE_LATCHED = 2;
int LATCH_STATE_UNLATCHED = 3;

class DoorAction extends ROSAction {

  /**
   * The parameters here 
   */
  predicate Active{
    float time_stamp; // A double encoding is reliable
    string frame_id;

    // Overall latched state
    LatchState latch_state;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;

    // Travel direction
    float travel_dir_x;
    float travel_dir_y;
    float travel_dir_z;
  }

  predicate Inactive{
    float time_stamp; // A double encoding is reliable
    string frame_id;

    // Overall latched state
    LatchState latch_state;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;

    // Travel directions
    float travel_dir_x;
    float travel_dir_y;
    float travel_dir_z;

    // Commit to unknown values if nothing set
    defaultOnCommit(hinge, UNKNOWN);
    defaultOnCommit(rot_dir, UNKNOWN);
  }

  DoorAction(Mode _mode){
    super(_mode);
  }
}

/**
 * Action to grasp the handle once in a position to do so
 */
class GraspHandle extends DoorAction {
  GraspHandle(Mode _mode){
    super(_mode);
  }
};

/**
 * 
 */
class MoveBaseDoor extends DoorAction {
  MoveBaseDoor(Mode _mode){
    super(_mode);
  }
};

/**
 * Use this to make contact with the door prior to pushing
 */
class TouchDoor extends DoorAction {
  TouchDoor(Mode _mode){
    super(_mode);
  }
};

/**
 * Use this to push a door open while moving. Does not require the handle to be grasped
 */
class PushDoor extends DoorAction {
  PushDoor(Mode _mode){
    super(_mode);
  }
};

/**
 * Action to open the door, assuming it is ajar, and assuming it has a grasp on the handle
 */
class OpenDoor extends DoorAction {
  OpenDoor(Mode _mode){
    super(_mode);
  }
};

class DoorActionWithFeedback extends DoorAction {
  DoorActionWithFeedback(Mode _mode){
    super(_mode);
  }
}

/**
 * Action to grasp the handle once in a position to do so
 */
class UnlatchHandle extends DoorActionWithFeedback {
  UnlatchHandle(Mode _mode){
    super(_mode);
  }
};

/**
 * DetectDoor is activated to search for the door. It will assume it is in a suitable observation position facing the door
 */
class DetectDoor extends DoorActionWithFeedback {
  DetectDoor(Mode _mode){
    super(_mode);
  }
};

/**
 * DetectHandle is activated to search for the door. It will assume it is in a suitable observation position facing the door
 */
class DetectHandle extends DoorActionWithFeedback {
  DetectHandle(Mode _mode){
    super(_mode);
  }
};
