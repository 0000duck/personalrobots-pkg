/**
 * This file specifies the interface for actions in the plugs domain
 */

/**
 * @brief This is a sensing action which will be used during navigation and recharging.
 *
 * It should return success if it found the plug, and the plug is on the base in the expected position. 
 * It will take as input an expected x, y, and th triple in the 'robot frame' and it will give feedback of the 
 * actual x and y values.
 */
class DetectPlugOnBase extends ROSAction {

  predicate Active {}

  predicate Inactive {
    float time_stamp; // A double encoding is reliable
    string frame_id;
    bool stowed;
    float x;
    float y;
    float z;
  }

  DetectPlugOnBase(Mode _mode){ super(_mode);}
};


class PlugDomainAction extends ROSAction{
  predicate Active{}
  predicate Inactive{}
  PlugDomainAction(Mode _mode){super(_mode);}
};

/**
 * @brief 
 */
class PlugsUntuckArms extends PlugDomainAction {
  predicate Active{}
  predicate Inactive{}
  PlugsUntuckArms(Mode _mode){super(_mode);}
};


/**
 * @brief Tuck arms after plugged in
 */
class PlugsTuckArms extends PlugDomainAction {
  predicate Active{}
  predicate Inactive{}
  PlugsTuckArms(Mode _mode){super(_mode);}
};

/**
 * @brief For placing the plug back on the base.
 * Leaves the arm in a free position out of the way so that we can confirm that the plug is stowed
 */
class StowPlug extends PlugDomainAction {
  predicate Active{
    float time_stamp;
    string frame_id;
    bool stowed;
    float x;
    float y;
    float z;
  }

  // No feedback. Just succeeds or not
  predicate Inactive{}

  StowPlug(Mode _mode){super(_mode);}
};

/**
 * @brief For unplugging from the socket. Just using a force controller so no args required.
 */
class Unplug extends PlugDomainAction {

  predicate Active{}
  predicate Inactive{}

  Unplug(Mode _mode){super(_mode);}
};

/**
 * @brief Plug in, assuming we have the plug staged etc
 * @todo Might be a pose message
 */
class PlugIn extends PlugDomainAction {

  predicate Active{
    MAP_KEY outlet_id;
  }

  predicate Inactive{}

  PlugIn(Mode _mode){super(_mode);}
};

/**
 * @brief Detect the outlet with fine resolution
 */
class DetectOutletFine extends PlugDomainAction {
  // Input takes a point
  predicate Active{
    float time_stamp; // A double encoding is reliable
    string frame_id;
    float x;
    float y;
    float z;
  }

  // Output produces a point and the normal
  predicate Inactive{
    float time_stamp; // A double encoding is reliable
    string frame_id;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
  }

  DetectOutletFine(Mode _mode){super(_mode);}
};

/**
 * @brief Detect the outlet with coarse resolution
 */
class DetectOutletCoarse extends PlugDomainAction {
  // Input takes a point
  predicate Active{
    float time_stamp; // A double encoding is reliable
    string frame_id;
    float x;
    float y;
    float z;
  }

  // Output produces a point and the normal
  predicate Inactive{
    float time_stamp; // A double encoding is reliable
    string frame_id;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
  }

  DetectOutletCoarse(Mode _mode){super(_mode);}
};

/**
 * @brief Localize the plug in the gripper
 * @note No args - looking at it.
 */
class LocalizePlugInGripper extends PlugDomainAction {

  // Goal takes the ouput of outlet detection
  predicate Active{
    float time_stamp; // A double encoding is reliable
    string frame_id;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
  }

  predicate Inactive{}

  LocalizePlugInGripper(Mode _mode){super(_mode);}
};

/**
 * @brief Move to a grasp point and grasp.
 */
class MoveAndGraspPlug extends PlugDomainAction {
  predicate Active{
    float time_stamp; // A double encoding is reliable
    string frame_id;
    bool stowed;
    float x;
    float y;
    float z;
  }

  predicate Inactive{}

  MoveAndGraspPlug(Mode _mode){super(_mode);}
};
