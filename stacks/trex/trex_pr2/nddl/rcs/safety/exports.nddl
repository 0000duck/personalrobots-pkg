/**
 * This file defines actions and state variables
 * @author Conor McGann
 */

/**
 * @brief This is a sensing action which will be used during navigation and recharging.
 *
 * It should return success if it found the plug, and the plug is on the base in the expected position. 
 * It will take as input an expected x, y, and th triple in the 'robot frame' and it will give feedback of the 
 * actual x and y values.
 */
class DetectPlugOnBase extends ROSAction {

  predicate Active {}

  predicate Inactive {
    float time_stamp; // A double encoding is reliable
    string frame_id;
    bool stowed;
    float x;
    float y;
    float z;
  }

  DetectPlugOnBase(Mode _mode){ super(_mode);}
};

/**
 * @brief This is a general utility for tucking arms.
 */
class SafetyTuckArms extends  ROSAction {

  predicate Active {}

  predicate Inactive {}

  SafetyTuckArms(Mode _mode){ super(_mode);}
}

/**
 * Will set the laser tilt to a standard configuration. Eventually we will
 * add parameters for this.
 */
class SetLaserTilt extends ROSAction {
  predicate Inactive{}
  predicate Active{}

  SetLaserTilt(Mode _mode){
    super(_mode);
  }
}

/**
 * Tracks the state if the arms are tucked or not. This is a safety issue for mobility.
 */
class ArmsTucked extends AgentTimeline {
  predicate True{}
  predicate False{};
  ArmsTucked(Mode _mode){
    super(_mode, "False");
  }
};

/**
 * This will change to actually track the laser tilt configuration
 */
class TiltLaserReady extends AgentTimeline {
  predicate True{}
  predicate False{};
  TiltLaserReady(Mode _mode){
    super(_mode, "False");
  }
};
