#include "plugs/imports.nddl"

/**
 * ALL TIME BOUNDS FOR INTERNAL ACTIONS
 */
float DETECT_OUTLET_COARSE_DURATION_BOUND = 600.0;
float DETECT_OUTLET_FINE_DURATION_BOUND = 600.0;
float PLUGS_UNTUCK_ARMS_DURATION_BOUND = 600.0;
float DETECT_PLUG_ON_BASE_DURATION_BOUND = 600.0;
float MOVE_BASE_LOCAL_DURATION_BOUND = 600.0;
float MOVE_BASE_DURATION_BOUND = 600.0;
float MOVE_AND_GRASP_PLUG_DURATION_BOUND = 600.0;
float LOCALIZE_PLUG_IN_GRIPPER_DURATION_BOUND = 600.0;
float PLUG_IN_DURATION_BOUND = 3000.0;
float UNPLUG_DURATION_BOUND = 600.0;
float STOW_PLUG_DURATION_BOUND = 600.0;

/**
 * @todo Get better default values
 */
class PlugState extends AgentTimeline {
  predicate Holds{
    string frame_id;
    float time_stamp;
    bool stowed;
    float x;
    float y;
    float z;
    defaultOnCommit(stowed, true);
  }

  PlugState(){super(Internal, "Holds");}
};

class OutletState extends AgentTimeline {
  predicate Holds{
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
  }

  OutletState(){super(Internal, "Holds");}
};


/**
 * @note This could be sensed from the battery state
 */
class PluggedIn extends BooleanTimeline{
  PluggedIn(){ super(Internal, "False"); }
};

class ArmsClear extends BooleanTimeline {
  ArmsClear(){ super(Internal, "False"); }
};

class PlugStowed extends BooleanTimeline{
  PlugStowed(){ super(Internal, "True"); }
};

class RechargeController extends StateMachine {
  // Idle state
  predicate Inactive{}
  // Move to the approach pose
  predicate Positioning{}
  // Do coarse outlet detection to find the outlet based on prior
  predicate FindingOutlet{}
  // Approach the outlet to plug in
  predicate Approaching{}
  // Find the plug on the base
  predicate FindingPlug{}
  // Grasp the plug from the base
  predicate GraspingPlug{}
  // Localize the outlet precisely to plug in
  predicate LocalizingOutlet{}
  // Localize the plug in the gripper
  predicate LocalizingPlugInGripper{}
  // Plug in
  predicate PluggingIn{}
  
  RechargeController(){ super(); }
};

// Internal Timelines
OutletState outlet_state = new OutletState();
PlugState plug_state = new PlugState();
Recharger recharger = new Recharger(Internal);
RechargeController recharge_controller = new RechargeController();

// Important internal state variables
PluggedIn plugged_in = new PluggedIn();
ArmsClear arms_clear = new ArmsClear();
PlugStowed plug_stowed = new PlugStowed();

// Used for a start event
AgentActions actions = new AgentActions();

// Initialize controller to inactive
fact(recharge_controller.Inactive);

/***********************************************************************************
 * STATE MACHINE DECLARATION
 ***********************************************************************************/
RechargeController::Positioning{
  contained_by(recharger.Active rc);
  if(isTimedOut(rc.object)){
    duration == 1;
    meets(Inactive s);
    s.status == PREEMPTED;
  }
  else {
    contains(move_base.Active cmd);
    ends cmd;
    isSucceded(cmd.object) == true;
    cmd.max_duration <= MOVE_BASE_DURATION_BOUND;
    // Bind pose based on approach pose for the outlet
    map_get_outlet_approach_pose(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, rc.outlet_id);
    cmd.frame_id == rc.frame_id;
    meets(FindingOutlet);
  }
}

RechargeController::FindingOutlet{
  contained_by(recharger.Active);
  contains(detect_outlet_coarse.Active cmd);
  ends cmd;
  cmd.max_duration <= DETECT_OUTLET_COARSE_DURATION_BOUND;

  if(isSucceded(cmd.object)){
    meets(Approaching);
  }
  else{
    meets(Positioning);
  }
}

RechargeController::Approaching{
  contained_by(recharger.Active);
  contains(move_base_local.Active cmd);
  ends cmd;
  cmd.max_duration <= MOVE_BASE_LOCAL_DURATION_BOUND;

  // Here we can obtain the outlet state to get parameters from move_base local since
  // it should not be done generically at the action level as this is a shared action
  cmd starts_during(outlet_state.Holds os);
  cmd.frame_id == os.frame_id;
  plugs_get_offset_pose(os.x, os.y, os.z, os.qx, os.qy, os.qz, os.qw, 0.6, 
			cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy,cmd.qz, cmd.qw);

  if(isSucceded(cmd.object)){
    meets(LocalizingOutlet);
  }
  else{
    meets(Positioning);
  }
}

RechargeController::LocalizingOutlet{
  contained_by(recharger.Active);
  contains(detect_outlet_fine.Active cmd);
  ends cmd;
  cmd.max_duration <= DETECT_OUTLET_FINE_DURATION_BOUND;

  if(isSucceded(cmd.object)){
    meets(FindingPlug);
  }
  else{
    meets(Positioning);
  }
}

RechargeController::FindingPlug{
  contained_by(recharger.Active);
  contains(detect_plug_on_base.Active cmd);
  ends cmd;
  cmd.max_duration <= DETECT_PLUG_ON_BASE_DURATION_BOUND;

  if(isSucceded(cmd.object)){
    meets(GraspingPlug);
  }
  else{
    meets(Positioning);
  }
}

RechargeController::GraspingPlug{
  contained_by(recharger.Active);
  contains(move_and_grasp_plug.Active cmd);
  ends cmd;
  cmd.max_duration <= MOVE_AND_GRASP_PLUG_DURATION_BOUND;

  if(isSucceded(cmd.object)){
    meets(LocalizingPlugInGripper);
  }
  else{
    meets(Positioning);
  }
}

RechargeController::LocalizingPlugInGripper{
  contained_by(recharger.Active);
  contains(localize_plug_in_gripper.Active cmd);
  ends cmd;
  cmd.max_duration <= LOCALIZE_PLUG_IN_GRIPPER_DURATION_BOUND;

  if(isSucceded(cmd.object)){
    meets(PluggingIn);
  }
  else{
    meets(Positioning);
  }
}

/**
 * After we have plugged in successfully, we transition to Inactive. Note that
 * the timepoint for that actual transition is not bound by the recharger. Instead, the
 * successor will require a plug_stowed state which will need to first be established.
 */
RechargeController::PluggingIn{
  contained_by(recharger.Active rc);
  contains(plug_in.Active cmd);
  cmd.max_duration <= PLUG_IN_DURATION_BOUND;
  cmd.outlet_id == rc.outlet_id;

  if(isSucceded(cmd.object)){
    meets(Inactive s);
    s.status == SUCCESS;
  }
  else{
    meets(Positioning);
  }
}

RechargeController::Inactive{
  starts(plug_stowed.True);
  // Update the recharger with feedback
  starts(recharger.Inactive rc);
  rc.status == status;
}

/***********************************************************************************/

// The plug gets stowed by the plug_stow action
PlugStowed::True{
  met_by(stow_plug.Active cmd);
  isSucceded(cmd.object) == true;
}
// Use prior plug state
StowPlug::Active{
  starts_during(plug_state.Holds ps);
  eq_plug_stow_msg(object, ps.object);
  // Must not be plugged in
  contained_by(plugged_in.False);
}
// The plug must be stowed whenever we move the base
MoveBase::Active{
  contained_by(plug_stowed.True);
}
// The arms must be clear whenever we need to detect the plug in the base
DetectPlugOnBase::Active{
  contained_by(arms_clear.True);
}
// The action that moves the arms from the clear position! It also uses prior plug state
MoveAndGraspPlug::Active{
  starts_during(arms_clear.False);
  starts_during(plug_state.Holds ps);
  eq_point_msg(object, ps.object);
}
// If we succeed in grasping the plug, it is not stowed!
MoveAndGraspPlug::Inactive{
  if(status == SUCCESS){
    starts_during(plug_stowed.False);
  }
}
// Unplug to become unplugged!
PluggedIn::False{
  met_by(unplug.Active cmd);
  cmd.max_duration <= UNPLUG_DURATION_BOUND;
  isSucceded(cmd.object) == true;
}
// If plug_in succeeds, it will transition internal state
PlugIn::Active{
  if(isSucceded(this.object)){
    meets(plugged_in.True);
  }
}
// The arms become clear by untucking them
ArmsClear::True{
  met_by(plugs_untuck_arms.Active cmd);
  cmd.max_duration <= PLUGS_UNTUCK_ARMS_DURATION_BOUND;
  isSucceded(cmd.object) == true;
}
// The arms are not clear if they are tucked
ArmsTucked::True{
  contained_by(arms_clear.False);
}
// Update PlugState
DetectPlugOnBase::Inactive{
  if(status == SUCCESS){
    starts(plug_state.Holds ps);
    eq_plug_stow_msg(ps.object, object);
    ps.frame_id == frame_id;
  }
}
// Use prior outlet state
DetectOutletFine::Active{
  starts_during(outlet_state.Holds os);
  eq_point_msg(object, os.object);
  os.frame_id == frame_id;
}
// Update OutletState
DetectOutletFine::Inactive{
  if(status == SUCCESS){
    // Update outlet state with feedback
    starts(outlet_state.Holds os);
    eq_pose_msg(os.object, object);
    os.frame_id == frame_id;
  }
}
// Use prior outlet state
DetectOutletCoarse::Active{
  starts_during(outlet_state.Holds os);
  eq_point_msg(object, os.object);
  os.frame_id == frame_id;
}
// Update outlet state
DetectOutletCoarse::Inactive{
  if(status == SUCCESS){
    starts(outlet_state.Holds os);
    eq_pose_msg(os.object, object);
    os.frame_id == frame_id;
  }
}
// Use prior outlet state
LocalizePlugInGripper::Active{
  starts_during(outlet_state.Holds os);
  eq_pose_msg(object, os.object);
  os.frame_id == frame_id;
}
