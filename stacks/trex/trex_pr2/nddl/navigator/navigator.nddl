
#include "TREX.nddl"
#include "world_model/topological_map.nddl"
#include "rcs/base_state.nddl"
#include "common/move_behavior.nddl"
#include "navigator/exports.nddl"

float DOORMAN_DURATION_BOUND = 20.0;
float DRIVER_DURATION_BOUND = 6000.0;

class NavController extends AgentTimeline {
  predicate Holds {
    bool active;
    float x;
    float y;
  }

  NavController(){
    super(Internal, "Holds");
  }
  NavController(Mode _mode){
    super(_mode, "Holds");
  }
};

Navigator navigator = new Navigator(Internal);
NavController nav_controller = new NavController(Internal);

MoveBehavior driver = new MoveBehavior(External);
MoveBehavior doorman = new MoveBehavior(External);
BaseState base_state = new BaseState(External);

Navigator::Active{
  if(isSingleton(start)){
    starts(nav_controller.Holds nc);
    nc.active == true;	
    // Initialize position
    starts_during(base_state.Holds bs);
    nc.x == bs.x;
    nc.y == bs.y;
  }
}

NavController::Holds{
  // Default based on predecessors
  met_by(Holds p);
  defaultOnCommit(active, p.active);
  defaultOnCommit(x, p.x);
  defaultOnCommit(y, p.y);

  if(active == false){
    equals(navigator.Inactive);
  }
  else {
    meets(Holds s);

    // Obtain navigator context
    contained_by(navigator.Active nav_active);

    float distance;
    calcDistance(distance, x, y, nav_active.x, nav_active.y);

    if(isTimedOut(nav_active.object) == true || distance < 0.2){
      // Terminate the controller
      meets(navigator.Inactive nav_inactive);
      s.active == false;
      duration == 1;
      if(distance < 0.2){
	nav_inactive.status == SUCCESS;
      }
      else {
	nav_inactive.status == PREEMPTED;
      }
    }
    else {
      // Take the next step towards the goal. This will either navigate to the
      // goal, or navigate to the next connector along the way. It would be
      // ideal to be able to specify for the nav stack that we do not care
      // about orientation, and that we want to get as close as possible to
      // the goal, but the criteria for success is based on a given error
      // bound. Thus we could get close if possible, but permit a successful
      // termination when we cannot get any closer but are within that bound.
      // This is desirable since the precise approach is based on calcuations
      // that deal with position of approach and location of the socket or
      // door and these are encoded internally in the domains.
      contains_start(MoveBehavior.Active cmd);
      ends cmd;
      cmd.frame_id == nav_active.frame_id;

      // Determine the next map point to go for. It will either be the outlet
      // or it will be a doorway en-route to the outlet. This function calls a
      // topological planner.
      bool thru_doorway;
      map_get_next_move(cmd.x, cmd.y, cmd.z, cmd.qx,
			cmd.qy, cmd.qz, cmd.qw,
			thru_doorway, 
			x, y, 
			nav_active.x, nav_active.y, nav_active.z,
			nav_active.qx, nav_active.qy, nav_active.qz, nav_active.qw);

      // Determine the connector to start from based on where we are and where we are going
      map_get_nearest_connector(cmd.start_connector,
				x, y,
				nav_active.x, nav_active.y);

      // Adjust for using the doorman or the driver
      if(thru_doorway == true){
	cmd.object == doorman;
	cmd.max_duration <= DOORMAN_DURATION_BOUND;
      }
      else{
	cmd.object == driver;
	cmd.max_duration <= DRIVER_DURATION_BOUND;
      }
    }
  }
}

MoveBehavior::Inactive{
  starts_during(nav_controller.Holds nc);
  if(status == SUCCESS){
    nc.x == x;
    nc.y == y;
  }
  else {
    starts_during(navigator.Inactive nav_inactive);
    status == nav_inactive.status;
  }
}
