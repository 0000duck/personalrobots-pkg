/**
 * Provides full functionality of the doorman. Here we integrate with the topological map.
 */
#include "world_model/topological_map.nddl"
#include "doors/door_controller.nddl"
#include "rcs/base_state.nddl"

// Use base state to obtain current pose for computing travel direction
BaseState base_state = new BaseState(External);

/**
 * Uses the door controller to accomplish this goal. Just initialize it and let it run
 */
MoveBehavior::Active {
  if(isStarted(this.object)){
    starts(door_controller.CheckingDoorway dc);

    // Initialize door message from the topological map
    MAP_KEY doorway_id;
    doorway_id != NO_KEY;

    // Only using the second point, since that point should be coming from the topological
    // map. The doorway is derived from a connector whose approach pose is closest to this
    map_get_doorway_from_points(doorway_id, x, y);
    starts(door_state.Holds ds);
    map_get_door_state(ds.object, doorway_id);
    ds.frame_id == frame_id;

    // Set travel direction based on deltas
    starts_during(base_state.Holds bs);
    bs.x + ds.travel_dir_x == x;
    bs.y + ds.travel_dir_y == y;
    ds.travel_dir_z == 0.0;

    // Set start connect by default if not set
    MAP_KEY connector_default;
    map_get_nearest_connector(connector_default, bs.x, bs.y, x, y);
    defaultOnCommit(start_connector, connector_default);
  }
}
