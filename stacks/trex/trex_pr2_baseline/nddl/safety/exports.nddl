#include "mechanism_control/exports.nddl"
#include "safety/imports.nddl"


float SAFETY_TUCK_ARMS_DURATION_BOUND = 60.0;

// Internal Timelines
ArmsTucked arms_tucked = new ArmsTucked(External);
TiltLaserReady tilt_laser_ready = new TiltLaserReady(External);
DetectPlugOnBase detect_plug_on_base = new DetectPlugOnBase(External);

// Mechamisms of interest
TiltLaserMechanism laser_tilt_mechanism = new TiltLaserMechanism(External);
RightArmMechanism right_arm_mechanism = new RightArmMechanism(External);
RightGripperMechanism right_gripper_mechanism = new RightGripperMechanism(External);

// Action timeline to plan for
SafetyTuckArms safety_tuck_arms = new SafetyTuckArms(External);

// Action causing tilt laser to be set
SetLaserTilt set_laser_tilt = new SetLaserTilt(External);

ArmsTucked::True{
  met_by(safety_tuck_arms.Active p);
  eq(p.status, SUCCESS);
  leq(p.max_duration, SAFETY_TUCK_ARMS_DURATION_BOUND);
}

TiltLaserReady::True{
  met_by(set_laser_tilt.Active p);
  eq(p.status, SUCCESS);
}

SafetyTuckArms::Active{
  contained_by(right_arm_mechanism.use_joint_trajectory_controller);
  contained_by(right_gripper_mechanism.use_effort_controller);
}

SetLaserTilt::Active{
  contained_by(laser_tilt_mechanism.use_laser_tilt_controller);
}
