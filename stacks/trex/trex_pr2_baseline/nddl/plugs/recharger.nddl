#include "plugs/recharge_controller.nddl"

Recharger::Active{
  // Start the recharge controller
  starts(RechargeController.Positioning);

  // Compute the deadline in ticks
  float elapsedTicks;
  mulEq(elapsedTicks, TICK_DURATION, max_duration);
  float deadline;
  addEq(start, elapsedTicks, deadline);

  // Initialize outlet state
  starts(outlet_state.Holds os);
  map_get_outlet_state(os.x, os.y, os.z, os.qx, os.qy, os.qz, os.qw, outlet_id);
  eq(os.frame_id, frame_id);
}

Recharger::Inactive {
  if(recharger == ABORTED){
    // Fail, indicating that the outlet was not accessible
    met_by(Active p);
    map_notify_outlet_blocked(p.outlet_id);
  }
}
