#include "TREX.nddl"

/**
 * An error bound for time when preempting or when terminating.
 */
typedef int [-1, 1] TIME_ERROR_BOUND;

/**
 * Defines core interfaces for ROS integration
 */

/**
 * Specialize to mark all ROS State Variables. Note that it can be internal or external, since we may choose
 * to simulate it with NDDL.
 */
class ROSStateVariable extends AgentTimeline {

  predicate Holds{}

  ROSStateVariable(Mode _mode){ super(_mode, "Holds"); }
  ROSStateVariable(Mode _mode, string _default_value, bool _persistent){ super(_mode, _default_value, _persistent); }

  ROSStateVariable(Mode _mode, string _pred){
    super(_mode, _pred);
  }

  ROSStateVariable(Mode _mode, string _pred){
    super(_mode, _pred);
  }

  ROSStateVariable(Mode _mode, string _pred, bool _opt){
    super(_mode, _pred, _opt);
  }
};

/**
 * A StateMachine control structure
 */
class StateMachine extends AgentTimeline {

  // The controller is in an inactive state. Basically idle.
  predicate Inactive{
    ResultStatus status;
    // Be default will be UNDEFINED
    defaultOnCommit(status, UNDEFINED);
    // Should always be integrated in the mission profile
    temporalDistance(start, [1, +inf], MISSION_END);
  }
  
  StateMachine(){ super(Internal, "Inactive"); }
  StateMachine(Mode _mode, string _default_value, bool _persistent){ super(Internal, "Inactive", _persistent); }
};

/**
 * Specialize to mark all ROS Actions. A max_duration parameter is used
 * to allow actions to be preempted in the ros adapter.
 */
class ROSAction extends Behavior {

  ROSAction(Mode _mode){
    super(_mode);
  }
};

ROSAction::Active{
  int time_since_dispatch;
  dispatch_time + time_since_dispatch == start;
  time_since_dispatch <= 100; // Magic number to break the plan if 100 ticks passes between dispatch and starting
}

/**
 * Reusable class for boolean state variables
 */
class BooleanTimeline extends AgentTimeline {
  predicate True{}
  predicate False{};

  /**
   * Persistent by default
   */
  BooleanTimeline(Mode _mode, string _default_value){
    super(_mode, _default_value, true);
  }
  BooleanTimeline(Mode _mode, string _default_value, bool _persistent){
    super(_mode, _default_value, _persistent);
  }
};
