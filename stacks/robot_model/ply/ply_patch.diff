diff -urN makefile makefile
--- makefile	1998-08-06 14:43:13.000000000 -0700
+++ makefile	2009-07-09 12:54:30.000000000 -0700
@@ -42,12 +42,10 @@
 	cc $(CFLAGS) -c ply.c
 
 ply2ascii.o: convertply.c ply.h
-	cc $(CFLAGS) -c convertply.c -DWRITE_ASCII
-	mv convertply.o ply2ascii.o
+	cc $(CFLAGS) -c convertply.c -DWRITE_ASCII -o ply2ascii.o
 
 ply2binary.o: convertply.c ply.h
-	cc $(CFLAGS) -c convertply.c -DWRITE_BINARY
-	mv convertply.o ply2binary.o
+	cc $(CFLAGS) -c convertply.c -DWRITE_BINARY -o ply2binary.o
 
 ply2ascii: ply2ascii.o ply.o makefile
 	cc -o ply2ascii ply2ascii.o ply.o $(LIBS)
diff -urN ply.c ply.c
--- ply.c	1998-08-06 14:54:49.000000000 -0700
+++ ply.c	2009-07-09 15:09:38.000000000 -0700
@@ -31,6 +31,7 @@
 
 */
 
+#include <assert.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
@@ -637,16 +638,19 @@
   /* read and parse the file's header */
 
   words = get_words (plyfile->fp, &nwords, &orig_line);
-  if (!words || !equal_strings (words[0], "ply"))
+  
+  if (words == NULL || !equal_strings (words[0], "ply"))
     return (NULL);
 
   while (words) {
 
     /* parse words */
 
+    //printf(" words: %s | %s\n",words[0],words[1]);
     if (equal_strings (words[0], "format")) {
       if (nwords != 3)
         return (NULL);
+      //printf(" words: endian %d\n",equal_strings (words[1], "binary_big_endian"));
       if (equal_strings (words[1], "ascii"))
         plyfile->file_type = PLY_ASCII;
       else if (equal_strings (words[1], "binary_big_endian"))
@@ -1584,6 +1588,7 @@
   for (j = 0; j < elem->nprops; j++) {
 
     prop = elem->props[j];
+    printf(" binary_get_element: prop %d %d %d %d\n", prop->is_list, prop->count_external, prop->count_offset, prop->count_internal);
     store_it = (elem->store_prop[j] | other_flag);
 
     /* store either in the user's structure or in other_props */
@@ -1710,6 +1715,7 @@
 
   /* read in a line */
   result = fgets (str, BIG_STRING, fp);
+  printf("read line: %s\n",result);
   if (result == NULL) {
     *nwords = 0;
     *orig_line = NULL;
@@ -1729,6 +1735,10 @@
       *ptr = ' ';
       *ptr2 = ' ';
     }
+    else if (*ptr == '\r') {
+      *ptr = ' ';
+      *ptr2 = ' ';
+    }
     else if (*ptr == '\n') {
       *ptr = ' ';
       *ptr2 = '\0';
diff -urN ply2iv.c ply2iv.c
--- ply2iv.c	1998-08-06 14:54:59.000000000 -0700
+++ ply2iv.c	2009-07-09 15:14:44.000000000 -0700
@@ -78,7 +78,7 @@
 Main program.
 ******************************************************************************/
 
-main(int argc, char *argv[])
+main(int argc, char **argv)
 {
   int i,j;
   char *s;
@@ -96,8 +96,14 @@
       }
   }
 
-  read_file();
-  write_inventor();
+  if (argc > 0)
+  {
+    char *filename;
+    filename = argv[0];
+    //printf("processing file: %s\n",filename);
+    read_file(filename);
+    write_inventor();
+  }
 }
 
 
@@ -115,7 +121,7 @@
 Read in the PLY file from standard in.
 ******************************************************************************/
 
-read_file()
+read_file(char* filename)
 {
   int i,j;
   int elem_count;
@@ -124,7 +130,8 @@
 
   /*** Read in the original PLY object ***/
 
-  in_ply  = read_ply (stdin);
+  FILE *fp = fopen(filename,"r");
+  in_ply  = read_ply (fp);
 
   for (i = 0; i < in_ply->num_elem_types; i++) {
 
@@ -146,6 +153,7 @@
       for (j = 0; j < in_ply->elems[i]->nprops; j++) {
 	PlyProperty *prop;
 	prop = in_ply->elems[i]->props[j];
+        printf(" prop: name %s\n",prop->name);
 	if (equal_strings ("r", prop->name)) {
 	  setup_property_ply (in_ply, &vert_props[3]);
 	  per_vertex_color = 1;
@@ -182,6 +190,7 @@
 	vlist[j]->g = 1;
 	vlist[j]->b = 1;
         get_element_ply (in_ply, (void *) vlist[j]);
+        printf(" elem: j %d %f %f %f\n",j,vlist[j]->x,vlist[j]->y,vlist[j]->z);
       }
     }
     else if (equal_strings ("face", elem_name)) {
