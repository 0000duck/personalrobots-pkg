Index: BUILD-OPTIONS.py
===================================================================
--- BUILD-OPTIONS.py	(revision 312)
+++ BUILD-OPTIONS.py	(working copy)
@@ -20,7 +20,7 @@
 PROFILE=0
 
 # Path to Boost includes
-BOOST_INCLUDE_PATH="/usr/include"
+BOOST_INCLUDE_PATH="/opt/ros/include/boost-1_37"
  
 # Path to Qhull includes
 QHULL_INCLUDE_PATH="/usr/include"
Index: include/Physsim/Vector3.h
===================================================================
--- include/Physsim/Vector3.h	(revision 312)
+++ include/Physsim/Vector3.h	(working copy)
@@ -26,7 +26,8 @@
     void copy(const Vector3& source) { operator=(source); }
     Real dot(const Vector3& v) const { return v[0]*_data[0] + v[1]*_data[1] + v[2]*_data[2]; }
     static Real dot(const Vector3& v1, const Vector3& v2) { return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2]; }
-    void normalize() { assert(norm() > std::numeric_limits<Real>::epsilon()); operator/=(norm()); }
+    //void normalize() { assert(norm() > std::numeric_limits<Real>::epsilon()); operator/=(norm()); }
+    void normalize() { if (norm() > std::numeric_limits<Real>::epsilon()) operator/=(norm()); }
     void normalize_or_zero() { Real nrm = norm(); if (nrm > std::numeric_limits<Real>::epsilon()) operator/=(nrm); else _data[0] = _data[1] = _data[2] = (Real) 0.0; }
     static Vector3 normalize(const Vector3& v) { Vector3 w = v; w.normalize(); return w; }
     unsigned size() const { return 3; }
Index: include/Physsim/CollisionDetection.inl
===================================================================
--- include/Physsim/CollisionDetection.inl	(revision 312)
+++ include/Physsim/CollisionDetection.inl	(working copy)
@@ -22,8 +22,10 @@
   std::list<DynamicBodyPtr> dbs;
   BOOST_FOREACH(CollisionGeometryPtr cg, _geoms)
   {
-    RigidBodyPtr rb = cg->get_rigid_body();
-    ArticulatedBodyPtr ab = rb->get_articulated_body();
+    //RigidBodyPtr rb = cg->get_rigid_body();
+    //ArticulatedBodyPtr ab = rb->get_articulated_body();
+    boost::shared_ptr<RigidBody> rb = cg->get_rigid_body();
+    boost::shared_ptr<DynamicBody> ab = rb->get_articulated_body();
     DynamicBodyPtr db;
     if (ab)
       db = ab;
Index: src/IndexedTriArray.cpp
===================================================================
--- src/IndexedTriArray.cpp	(revision 312)
+++ src/IndexedTriArray.cpp	(working copy)
@@ -763,7 +763,7 @@
       break;
     
     // determine whether the line describes a vertex
-    if (id[0] == 'v' || id[0] == 'V')
+    if (id == std::string("v") || id == std::string("V"))
     {
       // read in the vertex and the rest of the line
       in >> v1;
Index: SConstruct
===================================================================
--- SConstruct	(revision 312)
+++ SConstruct	(working copy)
@@ -35,6 +35,7 @@
 DEFAULT_QHULL_LIB_PATH = '/usr/lib'
 DEFAULT_QT_LIB_PATH = '/usr/lib'
 DEFAULT_LAPACK_LIB_PATH = '/usr/lib'
+DEFAULT_PREFIX_PATH = '/usr'
 
 # get options 
 vars.Add('CC', 'C++ compiler', 'g++')
@@ -57,11 +58,15 @@
 vars.Add('QT_LIB_PATH', 'Path to qt library', DEFAULT_QT_LIB_PATH)
 vars.Add('LAPACK_LIB_PATH', 'Path to LAPACK library', DEFAULT_LAPACK_LIB_PATH)
 vars.Add('QHULL_LIB_PATH', 'Path to qhull library', DEFAULT_QHULL_LIB_PATH)
+vars.Add('PREFIX_PATH', 'installation path', DEFAULT_PREFIX_PATH)
 
 # setup a construction environment
 env = Environment(variables=vars)
 Help(vars.GenerateHelpText(env))
 
+# make a copy for examples
+env_with_vars = env.Clone()
+
 # set C++ and link flags to empty initially
 __CCFLAGS = ""
 __LINKFLAGS = ""
@@ -226,7 +231,7 @@
     if USE_INVENTOR:
       libs.append(['Coin', 'SoQt', 'qt-mt', 'Xmu', 'Xi', 'Xext', 'SM'])
       libs.append(['ICE', 'X11'])
-    libs.append(['dl', 'pthread', LAPACK_LIB, 'cblas', 'qhull', 'm'])
+    libs.append(['dl', 'pthread', LAPACK_LIB, 'cblas', 'qhull', 'm', 'gfortran'])
     env = Environment(CPPPATH=inc_path, LIBS=libs, LIBPATH=lib_path,
                       CCFLAGS=__CCFLAGS, LINKFLAGS=__LINKFLAGS, 
                       TOOLS=['default', 'qt'])
@@ -276,14 +281,17 @@
 
 # build the Physsim library
 if SHARED_LIBRARY:
-	env.SharedLibrary('lib/libphyssim', sources)
+	libphyssim = env.SharedLibrary('physsim', sources)
 else:
-	env.Library('lib/libphyssim', sources)
+	libphyssim = env.Library('physsim', sources)
 
+# install libraries
+env.Install(env_with_vars['PREFIX_PATH']+'/lib',libphyssim)
+
 # build the examples and utilities
 if BUILD_EXAMPLES:
 	env_copy = env.Clone()
-	SConscript(['example/SConscript'], exports=['env_copy', 'USE_INVENTOR'])
+	SConscript(['example/SConscript'], exports=['env_copy', 'env_with_vars', 'USE_INVENTOR'])
 if BUILD_KINEMATIC:
 	env_copy = env.Clone()
 	SConscript(['Kinematic/SConscript'], exports=['env_copy', 'USE_INVENTOR'])
Index: example/SConscript
===================================================================
--- example/SConscript	(revision 312)
+++ example/SConscript	(working copy)
@@ -1,25 +1,29 @@
 # import variables from calling scripts
-Import(['env_copy', 'USE_INVENTOR'])
+Import(['env_copy', 'env_with_vars', 'USE_INVENTOR'])
 
+# setup rpath for shared libraries
+RPATH = '-Wl,-rpath,'+env_with_vars['PREFIX_PATH']+'/lib'
+print "\n",RPATH,"\n"
+
 # build utilities that don't require Physsim
 if USE_INVENTOR:
-  env_copy.Program('view.cpp')
+  env_copy.Program('view','view.cpp',LINKFLAGS=RPATH)
 
 # add physsim libraries to libraries used by env_copyironment
 env_copy['LIBS'].append('physsim')
 
 # build utilities that do require Physsim
-env_copy.Program('convexify.cpp')
-#env_copy.Program('objwrl.cpp')
-env_copy.Program('conv-decomp.cpp')
-env_copy.Program('center.cpp')
-env_copy.Program('construct-OBB.cpp')
+env_copy.Program('convexify','convexify.cpp',LINKFLAGS=RPATH)
+#env_copy.Program('objwrl.cpp',LINKFLAGS=RPATH)
+env_copy.Program('conv-decomp','conv-decomp.cpp',LINKFLAGS=RPATH)
+env_copy.Program('center','center.cpp',LINKFLAGS=RPATH)
+env_copy.Program('construct-OBB','construct-OBB.cpp',LINKFLAGS=RPATH)
 
 # build the symbolic output program
-env_copy.Program('output_symbolic.cpp')
+env_copy.Program('oubput_symbolic','output_symbolic.cpp',LINKFLAGS=RPATH)
 
 # build the driver program
-env_copy.Program('driver.cpp')
+env_copy.Program('driver','driver.cpp',LINKFLAGS=RPATH)
 
 # build controllers
 #SConscript(['mrobot/SConscript'], exports='env_copy')
@@ -27,3 +31,10 @@
 #SConscript(['bullet/SConscript'], exports='env_copy')
 SConscript(['banditII/SConscript'], exports='env_copy')
 
+#install above binaries
+env_copy.Alias('install',env_with_vars['PREFIX_PATH'])
+env_copy.Install(env_with_vars['PREFIX_PATH']+'/bin','driver')
+env_copy.Install(env_with_vars['PREFIX_PATH']+'/bin','convexify')
+env_copy.Install(env_with_vars['PREFIX_PATH']+'/bin','conv-decomp')
+env_copy.Install(env_with_vars['PREFIX_PATH']+'/bin','center')
+env_copy.Install(env_with_vars['PREFIX_PATH']+'/bin','construct-OBB')
