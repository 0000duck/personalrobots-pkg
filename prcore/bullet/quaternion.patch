Index: src/LinearMath/btTransformUtil.h
===================================================================
--- src/LinearMath/btTransformUtil.h	(revision 1644)
+++ src/LinearMath/btTransformUtil.h	(working copy)
@@ -115,12 +115,9 @@
 		}
 	}
 
-	static void calculateDiffAxisAngleQuaternion(const btQuaternion& orn0,const btQuaternion& orn1a,btVector3& axis,btScalar& angle)
+	static void calculateDiffAxisAngleQuaternion(const btQuaternion& orn0,const btQuaternion& orn1,btVector3& axis,btScalar& angle)
 	{
-		btQuaternion orn1 = orn0.farthest(orn1a);
 		btQuaternion dorn = orn1 * orn0.inverse();
-		///floating point inaccuracy can lead to w component > 1..., which breaks 
-		dorn.normalize();
 		angle = dorn.getAngle();
 		axis = btVector3(dorn.x(),dorn.y(),dorn.z());
 		axis[3] = btScalar(0.);
Index: src/LinearMath/btQuaternion.h
===================================================================
--- src/LinearMath/btQuaternion.h	(revision 1644)
+++ src/LinearMath/btQuaternion.h	(working copy)
@@ -103,6 +103,16 @@
                          cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw, //z
                          cosRoll * cosPitch * cosYaw + sinRoll * sinPitch * sinYaw); //formerly yzx
 	}
+  /**@brief Set the rotation by heading 
+   * @param yaw Yaw angle */
+        void setHeading(const btScalar& yaw)
+        {
+#ifndef BT_EULER_DEFAULT_ZYX
+          setEuler(yaw, 0.0, 0.0); 
+#else
+          setEulerZYX(yaw, 0.0, 0.0); 
+#endif 
+        } 
   /**@brief Add two quaternions
    * @param q The quaternion to add to this one */
 	SIMD_FORCE_INLINE	btQuaternion& operator+=(const btQuaternion& q)
@@ -200,15 +210,30 @@
 	{
 		btScalar s = btSqrt(length2() * q.length2());
 		btAssert(s != btScalar(0.0));
-		return btAcos(dot(q) / s);
+                btScalar retval;
+                if (dot(q) < 0) // Take care of long angle case see http://en.wikipedia.org/wiki/Slerp
+                  retval = btAcos(GEN_clamped(dot(-q) / s, (btScalar)-1.0, (btScalar)1.0)); //Clamped to prevent floating point precision crashes
+                else 
+                  retval = btAcos(GEN_clamped(dot(q) / s, (btScalar)-1.0, (btScalar)1.0)); //Clamped to prevent floating point precision crashes
+ 		return retval;
+
 	}
   /**@brief Return the angle of rotation represented by this quaternion */
 	btScalar getAngle() const 
 	{
-		btScalar s = btScalar(2.) * btAcos(m_floats[3]);
+                btScalar s = btScalar(2.) * btAcos(GEN_clamped(m_floats[3], (btScalar)-1.0, (btScalar)1.0));
 		return s;
 	}
 
+   /**@brief Return the axis of the rotation represented by this quaternion */
+ 	btVector3 getAxis() const
+ 	{
+                btScalar s_squared = btScalar(1.) - btPow(m_floats[3], 2.);
+                if (s_squared < 10 * SIMD_EPSILON) //Check for divide by zero
+ 			return btVector3(1.0, 0.0, 0.0);  // Arbitrary
+ 		btScalar s = btSqrt(s_squared);
+ 		return btVector3(m_floats[0] / s, m_floats[1] / s, m_floats[2] / s);
+ 	}
 
   /**@brief Return the inverse of this quaternion */
 	btQuaternion inverse() const
@@ -264,10 +289,17 @@
 			btScalar d = btScalar(1.0) / btSin(theta);
 			btScalar s0 = btSin((btScalar(1.0) - t) * theta);
 			btScalar s1 = btSin(t * theta);   
-			return btQuaternion((m_floats[0] * s0 + q.x() * s1) * d,
-				(m_floats[1] * s0 + q.y() * s1) * d,
-				(m_floats[2] * s0 + q.z() * s1) * d,
-				(m_floats[3] * s0 + q.m_floats[3] * s1) * d);
+                        if (dot(q) < 0) // Take care of long angle case see http://en.wikipedia.org/wiki/Slerp
+                          return btQuaternion((m_floats[0] * s0 + -q.x() * s1) * d,
+                                              (m_floats[1] * s0 + -q.y() * s1) * d,
+                                              (m_floats[2] * s0 + -q.z() * s1) * d,
+                                              (m_floats[3] * s0 + -q.m_floats[3] * s1) * d);
+                        else
+                          return btQuaternion((m_floats[0] * s0 + q.x() * s1) * d,
+                                              (m_floats[1] * s0 + q.y() * s1) * d,
+                                              (m_floats[2] * s0 + q.z() * s1) * d,
+                                              (m_floats[3] * s0 + q.m_floats[3] * s1) * d);
+                        
 		}
 		else
 		{
Index: src/LinearMath/btMatrix3x3.h
===================================================================
--- src/LinearMath/btMatrix3x3.h	(revision 1644)
+++ src/LinearMath/btMatrix3x3.h	(working copy)
@@ -159,16 +159,15 @@
 		}
 
 	/** @brief Set the matrix from euler angles YPR around ZYX axes
+         * @param eulerZ Yaw aboud Z axis
+         * @param eulerY Pitch around Y axis
 	 * @param eulerX Roll about X axis
-         * @param eulerY Pitch around Y axis
-         * @param eulerZ Yaw aboud Z axis
          * 
 	 * These angles are used to produce a rotation matrix. The euler
 	 * angles are applied in ZYX order. I.e a vector is first rotated 
 	 * about X then Y and then Z
 	 **/
-	void setEulerZYX(btScalar eulerX,btScalar eulerY,btScalar eulerZ) { 
-  ///@todo proposed to reverse this since it's labeled zyx but takes arguments xyz and it will match all other parts of the code
+	void setEulerZYX(btScalar eulerZ, btScalar eulerY,btScalar eulerX) { 
 		btScalar ci ( btCos(eulerX)); 
 		btScalar cj ( btCos(eulerY)); 
 		btScalar ch ( btCos(eulerZ)); 
@@ -201,6 +200,29 @@
 			return identityMatrix;
 		}
 
+  /**@brief Set the rotation by heading 
+   * @param yaw Yaw angle */
+        void setHeading(const btScalar& yaw)
+        {
+#ifndef BT_EULER_DEFAULT_ZYX
+          setEulerYPR(yaw, 0.0, 0.0); 
+#else
+          setEulerZYX(yaw, 0.0, 0.0); 
+#endif 
+        } 
+  /**@brief Get the rotational heading */
+       btScalar getHeading(void)
+       {
+         btScalar yaw, pitch, roll;
+#ifndef BT_EULER_DEFAULT_ZYX
+          getEulerYPR(yaw, pitch, roll); 
+#else
+          getEulerZYX(yaw, pitch, roll); 
+#endif 
+          return yaw;
+        } 
+  
+
   /**@brief Fill the values of the matrix into a 9 element array 
    * @param m The array to be filled */
 		void getOpenGLSubMatrix(btScalar *m) const 
