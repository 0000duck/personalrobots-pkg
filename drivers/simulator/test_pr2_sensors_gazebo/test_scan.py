#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

## Gazebo test cameras validation 

PKG = 'test_pr2_sensors_gazebo'
NAME = 'test_scan'

import math
import roslib
roslib.load_manifest(PKG)
roslib.load_manifest('rostest')


import sys, unittest
import os, os.path, threading, time
import rospy, rostest
from laser_scan.msg import *

TEST_DURATION  = 15
ERROR_TOL      = 0.05
FAIL_COUNT_TOL = 10

TARGET_RANGES = [
10.0, 9.99399757385, 9.9937582016, 10.0, 9.99924373627, 10.0, 9.9972114563, 
9.99843502045, 9.99649715424, 10.0, 9.99730396271, 9.99415111542, 9.99961185455, 10.0, 
10.0, 9.99529933929, 10.0, 9.99807262421, 9.99406337738, 9.99944400787, 10.0, 
9.99863243103, 10.0, 9.99963474274, 10.0, 10.0, 10.0, 10.0, 
9.99961471558, 10.0, 9.98990726471, 9.99514579773, 9.99402713776, 9.99685573578, 10.0, 
9.99297523499, 9.99838447571, 9.99619579315, 9.99819755554, 9.99129009247, 10.0, 10.0, 
10.0, 10.0, 10.0, 9.99783802032, 9.99913311005, 9.99995613098, 9.98977661133, 
10.0, 10.0, 9.99752616882, 10.0, 9.99956035614, 9.99086093903, 9.99842834473, 
9.99786186218, 10.0, 10.0, 10.0, 10.0, 9.99822807312, 9.99658298492, 
9.99853229523, 9.99167919159, 10.0, 9.99986076355, 9.99435043335, 10.0, 10.0, 
10.0, 9.99513053894, 9.98856830597, 10.0, 9.99642944336, 9.98850345612, 9.99767971039, 
9.99714851379, 9.99507045746, 10.0, 9.99815559387, 10.0, 9.99589824677, 10.0, 
10.0, 9.99189662933, 9.99931144714, 9.99942684174, 9.99921417236, 9.99763774872, 10.0, 
10.0, 10.0, 10.0, 9.998005867, 10.0, 9.99797916412, 10.0, 
9.9910364151, 9.99975681305, 9.99505996704, 10.0, 10.0, 10.0, 9.99684619904, 
9.99744796753, 10.0, 9.99491786957, 9.99804782867, 9.9970035553, 9.99922180176, 10.0, 
10.0, 10.0, 10.0, 9.99434661865, 9.99643421173, 9.99948787689, 9.99103736877, 
10.0, 10.0, 10.0, 10.0, 10.0, 9.9973859787, 10.0, 
10.0, 10.0, 9.99809455872, 9.99889373779, 9.99034881592, 9.99793052673, 10.0, 
9.9971818924, 9.99768733978, 10.0, 9.99692344666, 9.99988460541, 10.0, 9.99223423004, 
10.0, 10.0, 10.0, 9.99819850922, 10.0, 10.0, 10.0, 
10.0, 9.99682426453, 10.0, 10.0, 10.0, 10.0, 10.0, 
10.0, 10.0, 10.0, 9.99664402008, 10.0, 9.99862480164, 10.0, 
10.0, 10.0, 9.99706840515, 10.0, 10.0, 9.98929977417, 9.99841403961, 
10.0, 10.0, 10.0, 9.99358081818, 10.0, 9.99743366241, 9.99925231934, 
9.99480342865, 10.0, 10.0, 10.0, 10.0, 9.99949550629, 10.0, 
10.0, 9.99554920197, 10.0, 10.0, 9.99991321564, 10.0, 9.99794387817, 
10.0, 9.99642467499, 10.0, 10.0, 10.0, 9.98939418793, 9.9947309494, 
10.0, 9.9953584671, 10.0, 10.0, 10.0, 9.99892425537, 10.0, 
10.0, 10.0, 9.99651241302, 10.0, 9.99716758728, 10.0, 9.99913024902, 
9.99498558044, 2.05108785629, 2.04519438744, 2.03086853027, 2.02336859703, 2.02695035934, 2.01738643646, 
1.99918735027, 2.00864744186, 1.99042928219, 1.98470938206, 1.98090338707, 1.97631084919, 1.96668255329, 
1.95483136177, 1.94926846027, 1.94627141953, 1.93911385536, 1.93856620789, 1.93666291237, 1.92490839958, 
1.92113339901, 1.91130304337, 1.91240274906, 1.90771627426, 1.90004253387, 1.93301081657, 9.99470233917, 
10.0, 9.99024391174, 9.99987506866, 10.0, 10.0, 2.18067216873, 2.11301398277, 
2.08739566803, 2.05290126801, 2.03444051743, 2.02023077011, 1.99386107922, 1.97925257683, 1.96436369419, 
1.9570697546, 1.94566953182, 1.93343639374, 1.91916835308, 1.9097315073, 1.907320261, 1.89995443821, 
1.89109528065, 1.89161360264, 1.88245260715, 1.87980854511, 1.87433433533, 1.86727118492, 1.86018013954, 
1.85684943199, 1.85423696041, 1.84425783157, 1.84913480282, 1.84618794918, 1.84153211117, 1.83750474453, 
1.82634449005, 1.82742106915, 1.83639419079, 1.8382332325, 1.8308942318, 1.83025789261, 1.8338599205, 
1.83691883087, 1.83545875549, 1.82727754116, 1.82949829102, 1.83963871002, 1.83275127411, 1.83578753471, 
1.83859550953, 1.84460675716, 1.85028421879, 1.8518140316, 1.84998071194, 1.85201394558, 1.86617028713, 
1.85826230049, 1.86342644691, 1.86991691589, 1.87508845329, 1.87938523293, 1.88695478439, 1.89659917355, 
1.9102935791, 1.90650248528, 1.92319214344, 1.93869578838, 1.94202721119, 1.96269178391, 1.96761965752, 
1.98466300964, 1.98671412468, 2.02200675011, 2.03376460075, 2.04798221588, 2.08420419693, 2.11029624939, 
2.16892075539, 2.51382231712, 2.50081801414, 2.50967860222, 2.49142122269, 2.49915242195, 2.50723528862, 
2.50705099106, 2.5037727356, 2.50623059273, 2.51073670387, 2.52612090111, 2.5315425396, 2.53415799141, 
2.54296064377, 2.55387878418, 2.56562280655, 2.59482359886, 2.61063861847, 2.6498336792, 10.0, 
10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
9.9956445694, 9.99517631531, 10.0, 2.75734806061, 2.71639323235, 2.72030115128, 2.72558283806, 
10.0, 9.99477481842, 9.99865245819, 10.0, 10.0, 10.0, 9.99842739105, 
9.99849796295, 10.0, 10.0, 10.0, 10.0, 9.99830627441, 10.0, 
10.0, 10.0, 10.0, 10.0, 9.99744606018, 10.0, 9.99559783936, 
1.80707252026, 1.77755796909, 1.74133491516, 1.72746968269, 1.71787917614, 1.7034715414, 1.69972836971, 
1.68761336803, 1.67333197594, 1.66359114647, 1.65025925636, 1.65254878998, 1.63525867462, 1.64059412479, 
1.63240599632, 1.62345135212, 1.61991167068, 1.62780690193, 1.62304496765, 1.61492908001, 1.61679852009, 
1.62112545967, 1.60656380653, 1.60316884518, 1.60714066029, 1.59530711174, 1.60085105896, 1.60502040386, 
1.61660766602, 1.60286164284, 1.60207593441, 1.60052359104, 1.60095691681, 1.60423982143, 1.60822331905, 
1.6106556654, 1.62005293369, 1.61586606503, 1.62607228756, 1.62305355072, 1.62072408199, 1.62711369991, 
1.63709652424, 1.63697564602, 1.64713156223, 1.65632939339, 1.65328645706, 1.66583585739, 1.66880512238, 
1.68445622921, 1.68863415718, 1.69351518154, 1.7129740715, 1.73280155659, 1.75123381615, 1.76783192158, 
1.79901301861, 1.86156880856, 9.99738788605, 9.992228508, 9.99994468689, 9.99779891968, 9.99337387085, 
9.99182319641, 10.0, 10.0, 10.0, 9.99703979492, 9.99970149994, 10.0, 
9.999335289, 10.0, 9.99604129791, 10.0, 10.0, 9.99740505219, 10.0, 
10.0, 10.0, 10.0, 9.99222183228, 9.99573707581, 10.0, 9.99619674683, 
9.9939365387, 9.99981498718, 9.9928817749, 10.0, 9.99474048615, 9.99834823608, 9.99298095703, 
10.0, 10.0, 9.99308204651, 10.0, 9.99935913086, 10.0, 10.0, 
10.0, 9.99820899963, 9.99529933929, 9.99827575684, 9.9948797226, 10.0, 9.99988937378, 
9.999584198, 9.99994659424, 9.9975605011, 10.0, 9.99345874786, 10.0, 10.0, 
10.0, 9.99958515167, 9.99833774567, 9.99597167969, 9.99865531921, 10.0, 9.99568748474, 
10.0, 9.9882106781, 9.99309635162, 10.0, 9.99610996246, 10.0, 10.0, 
10.0, 10.0, 10.0, 9.99768352509, 10.0, 10.0, 10.0, 
10.0, 10.0, 9.99998950958, 10.0, 10.0, 9.99999523163, 10.0, 
10.0, 10.0, 10.0, 9.99959945679, 10.0, 9.99616622925, 9.99081897736, 
10.0, 10.0, 10.0, 9.99273777008, 10.0, 10.0, 10.0, 
10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
10.0, 9.99827766418, 10.0, 9.99130821228, 9.99394321442, 10.0, 9.99984169006, 
9.99740791321, 10.0, 9.99520015717, 10.0, 9.99419403076, 10.0, 9.9997215271, 
9.99447917938, 9.99009609222, 10.0, 10.0, 10.0, 10.0, 10.0, 
9.99915504456, 10.0, 9.99174404144, 10.0, 10.0, 9.99153614044, 10.0, 
10.0, 10.0, 9.99759864807, 9.99976348877, 9.99283599854, 9.99860095978, 10.0, 
10.0, 9.99280261993, 9.9950838089, 9.98802757263, 10.0, 9.99755477905, 9.99777030945, 
10.0, 9.9999704361, 10.0, 10.0, 10.0, 10.0, 10.0, 
10.0, 9.9981918335, 9.99122905731, 9.99353027344, 10.0, 9.99995136261, 10.0, 
10.0, 9.99731826782, 9.9998626709, 10.0, 9.9979057312, 10.0, 10.0, 
9.99132919312, 10.0, 9.99921417236, 9.9884853363, 9.99441051483, 9.99137401581, 10.0, 
10.0, 10.0, 9.99632358551, 9.99571609497, 10.0, 10.0, 10.0, 
10.0, 9.99969100952, 10.0, 10.0, 9.99812889099, 9.99746513367, 9.99060916901, 
9.99426174164, 9.99900722504, 9.99610614777, 9.99338150024, 9.99703502655, 9.99886131287, 9.99685287476, 
10.0, 9.99549865723, 10.0, 9.99433898926, 9.98309326172, 9.99733734131, 10.0, 
9.99887466431, 10.0, 10.0, 9.98931789398, 9.99801635742, 9.99863052368, 10.0, 
10.0, 9.9970664978, 9.99593925476, ]


class PointCloudTest(unittest.TestCase):
    def __init__(self, *args):
        super(PointCloudTest, self).__init__(*args)
        self.success = False


    def printPointCloud(self, cloud):
        print "["
        i = 0
        for pt in cloud.ranges:
            sys.stdout.write(str(pt) + ", ")
            i = i + 1
            if ((i % 7) == 0):
                print "" #newline
        print "]"


    def pointInput(self, cloud):
        i = 0
        fail_count = 0
        print "Input laser scan received"
        self.printPointCloud(cloud)  #uncomment to capture new data
        while (i < len(cloud.ranges) and i < len(TARGET_RANGES)):
            d = cloud.ranges[i] - TARGET_RANGES[i]
            if ((d < - ERROR_TOL) or (d > ERROR_TOL)):
                fail_count += 1
                print "fail_count:" + str(fail_count) + " failed. error:" + str(d) + " exceeded tolerance:" + str(ERROR_TOL)
            i = i + 1

        if fail_count > FAIL_COUNT_TOL:
            print "Fail count too large (" + str(fail_count) + "), failing scan"
            return

        self.success = True
    
    def test_scan(self):
        print "LNK\n"
        rospy.Subscriber("/base_scan", LaserScan, self.pointInput)
        rospy.init_node(NAME, anonymous=True)
        timeout_t = time.time() + TEST_DURATION
        while not rospy.is_shutdown() and not self.success and time.time() < timeout_t:
            time.sleep(0.1)
        self.assert_(self.success)
        
    


if __name__ == '__main__':
    rostest.run(PKG, sys.argv[0], PointCloudTest, sys.argv) #, text_mode=True)


