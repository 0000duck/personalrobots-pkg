# Return a list of all msg/.msg files
macro(get_cfgs cfgvar)
  file(GLOB _cfg_files RELATIVE "${PROJECT_SOURCE_DIR}/cfg" "${PROJECT_SOURCE_DIR}/cfg/*.cfg")
  set(${cfgvar} "")
  # Loop over each .cfg file, establishing a rule to compile it
  foreach(_cfg ${_cfg_files})
    # Make sure we didn't get a bogus match (e.g., .#Foo.cfg, which Emacs
    # might create as a temporary file).  the file()
    # command doesn't take a regular expression, unfortunately.
    if(${_cfg} MATCHES "^[^\\.].*\\.cfg$")
      list(APPEND ${cfgvar} ${_cfg})
    endif(${_cfg} MATCHES "^[^\\.].*\\.cfg$")
  endforeach(_cfg)
endmacro(get_cfgs)

macro(gencfg)
  add_custom_target(rospack_gencfg ALL)
  add_dependencies(rospack_genmsg rospack_gencfg)
  add_dependencies(rospack_gensrv rospack_gencfg)
  include_directories(${PROJECT_SOURCE_DIR}/cfg/cpp)
  gensrv()
endmacro(gencfg)

gencfg()

macro(gencfg_cpp)
  get_cfgs(_cfglist)
  set(_autogen "")
  foreach(_cfg ${_cfglist})
    # Construct the path to the .cfg file
    set(_input ${PROJECT_SOURCE_DIR}/cfg/${_cfg})
  
    gendeps(${PROJECT_NAME} ${_cfg})
  
    # The .cfg file is its own generator.
    set(gencfg_cpp_exe "")

    string(REPLACE ".cfg" "" _cfg_bare ${_cfg})

    set(_output_cpp ${PROJECT_SOURCE_DIR}/cfg/cpp/${PROJECT_NAME}/${_cfg_bare}Manipulator.h)
    set(_output_msg ${PROJECT_SOURCE_DIR}/msg/${_cfg}.msg)
    set(_output_getsrv ${PROJECT_SOURCE_DIR}/msg/Get${_cfg}.srv)
    set(_output_setsrv ${PROJECT_SOURCE_DIR}/msg/Set${_cfg}.srv)
    set(_output_dox ${PROJECT_SOURCE_DIR}/dox/${_cfg}.dox)
  
    # Add the rule to build the .h the .cfg
    add_custom_command(OUTPUT ${_output_cpp} ${_output_msg} ${_output_getsrv} ${_output_setsrv} ${_output_dox}
                       COMMAND ${gencfg_cpp_exe} ${_input}
                       DEPENDS ${_input} ${gencfg_cpp_exe} ${ROS_MANIFEST_LIST})
    list(APPEND _autogen ${_output_cpp} ${_output_msg} ${_output_getsrv} ${_output_setsrv} ${_output_dox})
  endforeach(_cfg)
  # Create a target that depends on the union of all the autogenerated
  # files
  add_custom_target(ROSBUILD_gencfg_cpp DEPENDS ${_autogen})
  # Add our target to the top-level gencfg target, which will be fired if
  # the user calls gencfg()
  add_dependencies(rospack_gencfg ROSBUILD_gencfg_cpp)
endmacro(gencfg_cpp)

# Call the macro we just defined.
gencfg_cpp()


