#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
"""
apcupsd_node
ROS node for interfacing with apcupsd compatible Uninterruptible Power Supplies

To run, invoke rosrun apcupsd_node monitor
"""
import roslib; roslib.load_manifest('apcupsd_node')

import os
import sys
import time
import select
import time

import rospy

from robot_msgs.msg import BatteryState
from diagnostic_msgs.msg import DiagnosticArray, DiagnosticStatus, KeyValue, DiagnosticString


NAME = 'monitor'

import socket
import struct
import traceback

class apcupsdConnection:
    def __init__(self, host, port):
        self.host = host;
        self.port = port;
        try:
            self.connect();
        except:
            traceback.print_exc()

    def send_cmd(self, command):
        try:
            # Send request
            data = struct.pack('H', socket.htons(len(command)))
            if (self.sock.send(data) != 2):
                raise Exception('Error sending length.')
            if (self.sock.send(command) != len(command)):
                raise Exception('Error sending command.')
           
            # Get response
            response = {}
            while True:
                resp_len = self.sock.recv(2);
                if (len(resp_len) != 2):
                    raise Exception('Error receiving length.')
                resp_len = struct.unpack('H', resp_len)[0]
                resp_len = socket.ntohs(resp_len)
                if (resp_len == 0):
                    break
                resp = self.sock.recv(resp_len)
                if (len(resp) != resp_len):
                    raise Exception('Error receiving response.')
                (key, _, value) = resp.partition(':')
                response[key.rstrip(' ')] = value.rstrip('\n')
            return response
        except:    
            try:   
                self.sock.close()
            except:    
                pass
            self.connect()
            raise

    def connect(self):
        #print "connecting to "+self.host+":"+str(self.port)
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((self.host, self.port))

def make_diagnostics(info):
    diag = DiagnosticStatus()
    diag.name = "UPS Status (apcupsd_node)"

    if info == None:
        diag.level = 2
        diag.message = "Cannot connect to apcupsd daemon. Is it running? (sudo /etc/init.d/apcupsd start)"
    else:
        diag.level = 0
        diag.message = "Node functioning nominally."
        values = []
        for (k, v) in info.iteritems():
            item = DiagnosticString()
            item.label = k
            item.value = v
            diag.strings.append(item)
    msg = DiagnosticArray(None, [diag])
    return msg

class batteryStateGenerator:
    def __init__(self, max_load):
        self.max_load = max_load
        self.capacity = 1 # Keeps the output sane until we know the real value
        self.estimate_quality = 0

    def make_msg(self, info):
        state = BatteryState()
        time_remaining = 60 * float(info['TIMELEFT'].rstrip(' Minutes'))
        load_percent = float(info['LOADPCT'].rstrip(' PercntLoadCpiy'))
        battery_percent = float(info['BCHARGE'].rstrip(' Percnt'))
        state.power_consumption = self.max_load * load_percent / 100
        
        # Depending on the values of time remaninig, load_percent and
        # battery_percent, we will get a more or less accurate estimate of
        # the battery capacity. This is quantified by the estimate quality.
        # If the current data leads to a better estimate than the previous
        # one, we update the previous one. If the current data isn't too
        # bad and gives a capacity that is significantly different from the
        # previous estimate then the battery capacity may have changed and
        # we use the new data.
        
        energy_capacity_estimate_high = \
                self.max_load * (load_percent + 0.5) * (time_remaining + 0.5) / (battery_percent - 0.5)
        energy_capacity_estimate_low = \
                self.max_load * (load_percent - 0.5) * (time_remaining - 0.5) / (battery_percent + 0.5)
        energy_capacity_estimate = (energy_capacity_estimate_high + energy_capacity_estimate_low) / 2
        
        new_estimate_quality = 1 / (energy_capacity_estimate_high - energy_capacity_estimate_low)
        
        use_new_cap = False
        if new_estimate_quality > 1000 and \
                abs(energy_capacity_estimate - self.capacity) / self.capacity > 0.1:
            #print "UPS capacity has changed from %e to %e."%(self.capacity, energy_capacity_estimate)
            use_new_cap = True
        if new_estimate_quality > self.estimate_quality:
            #print "UPS capacity refined from %e to %e, inv_quality %e."%(self.capacity, energy_capacity_estimate, 1/new_estimate_quality)
            use_new_cap = True
            
        if use_new_cap:    
            self.capacity = energy_capacity_estimate
            self.estimate_quality = new_estimate_quality

        state.energy_capacity = self.capacity
        state.energy_remaining = state.energy_capacity * battery_percent / 100
        return state

if __name__ == '__main__':
    rospy.init_node(NAME)
    
    diag_pub = rospy.Publisher("/diagnostics", DiagnosticArray)
    battery_state_pub = rospy.Publisher("battery_state", BatteryState)

    try:
        host = rospy.get_param('~serverhost')
    except:
        host = 'localhost'

    try:
        port = int(rospy.get_param('~serverhost'))
    except:
        port = 3551

    connection = apcupsdConnection('localhost', 3551)

    try:
        max_load = int(rospy.get_param('~max_load'))
    except:
        print "Can't read max_load parameter, using 800W"
        max_load = 800

    bsg = batteryStateGenerator(max_load)

    while not rospy.is_shutdown():
        try:
            upsinfo = connection.send_cmd('status')
            diag_pub.publish(make_diagnostics(upsinfo))
            battery_state_pub.publish(bsg.make_msg(upsinfo))
        except:
            print "Communication error."
            traceback.print_exc()
            diag_pub.publish(make_diagnostics(None))
        rospy.sleep(1)

    print "exiting"

        
