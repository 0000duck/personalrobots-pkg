#!/usr/bin/python
#Author: Ian Goodfellow
#Reads in command line arguments of the form
#[bag file] [topic to play from that bag] [optional arguments to rosplay]
#repeated for as many different channels of video as you want to play at once
#(the optional arguments may appear before the bag file in the case of the first channel,
#and in all cases may also appear in between the bag file and the topic to play. They
#are identified by beginning with a -; anything not beginning with a - is assumed to
#be a bag file or a topic)
#This does obviously assume that all of your separate topics are in separate bags...
#that's how mine are recorded since the two cameras are hooked to different machines
#Note: all rosplay arguments will get aggregrated into the same call to rosplay

import sys
import os
import subprocess

newChannel = True

topics = []

#Set it up to read a new channel
readBag = False
readTopic = False
topic = ""
args = ""


#The parse is only considered succesful if we exit through the right if/else condition
success = False

valuesToRead = 0

for i in range(1,len(sys.argv)):
	success = False

	arg = sys.argv[i];

	print "Processing argument "+str(i)+": "+arg

	#Check if this is an argument (such as -a) to rosplay
	if arg[0]=='-' or valuesToRead > 0:
		args += arg + " "
		valuesToRead-= 1
		if valuesToRead < 0:
			valuesToRead = 0
		if arg=="-r":
			valuesToRead = 1
		print "Appended to args: "+args
	else:
		#Check if this is the required bag argument to rosplay
		if not readBag:
			readBag = True
			args += (arg + " ")
		#Check if this is the required topic argument to stereo_view
		elif readBag and not readTopic:
			readTopic = True
			topic = arg
			#If we're at the end of input, process the channel immediately
			if i == len(sys.argv) - 1:
				topics.append(topic)
				success = True
		#Check if this is the first bag argument of a new channel (-> flush this channel)
		elif readBag and readTopic:
			topics.append(topic)
			readBag = True					
			args += arg + " "
			readTopic = False
			topic = ""
		else:
			print "Syntax error 1"
			raise

if not success:
	print "Syntax error 2"
	raise


print "Arguments to run:"
print args

print "Corresponding topics to listen to:"
print topics

"""
for i in range(0,len(rosplayArgs)):
	print "Running rosplay "+rosplayArgs[i]+" and listening to "+topics[i]
	command = "export PBARGS=\""+ rosplayArgs[i]+"\";"
	command += "export PBTOPIC="+topics[i] + ";"
	command += "roslaunch `rospack find ia3n_person_detection`/stereo_playback.launch"
	os.popen(command)
"""

of = open("/tmp/multiview.launch","w")
of.writelines([
	"<launch>\n",
	"\t<!--This file was automatically generated by the script stereo_multi_playback.py --> \n",
	"\t<node pkg=\"rosrecord\" type=\"rosplay\" name=\"multiplay_rosplay\" args=\""+args+"\" output=\"screen\" />\n"])

for i in range(0,len(topics)):
	namespace="multiplay_stereo"+str(i)
	of.writelines([
		"\t<group ns=\""+namespace+"\">\n",
		"\t\t<node pkg=\"stereo_image_proc\" type=\"stereoproc\" name=\"multiplay_stereoproc"+str(i)+"\" respawn=\"false\" output=\"screen\" >\n",
			"\t\t\t<remap from=\"/"+namespace+"/raw_stereo\" to=\""+topics[i]+"\" />\n",
			"\t\t\t<param name=\"videre_mode\" type=\"str\" value=\"none\"/>\n",
			"\t\t\t<param name=\"do_colorize\" type=\"bool\" value=\"True\"/>\n",
			"\t\t\t<param name=\"do_rectify\" type=\"bool\" value=\"True\"/>\n",
			"\t\t\t<param name=\"do_stereo\" type=\"bool\" value=\"True\"/>\n",
			"\t\t\t<param name=\"do_calc_points\" type=\"bool\" value=\"True\"/>\n",	
		"\t\t</node>\n",
		"\t</group>\n",
		"\t<node pkg=\"ia3n_person_detection\" type=\"stereo_view\" name=\"multiplay_stereo_view"+str(i)+"\" output=\"screen\" respawn=\"false\" >\n",
			"\t\t<remap to=\"/"+namespace+"/right/image_rect_color\" from=\"/stereo/right/image_rect_color\" />\n",
			"\t\t<remap to=\"/"+namespace+"/left/image_rect_color\" from=\"/stereo/left/image_rect_color\" />\n",
			"\t\t<remap to=\"/"+namespace+"/right/image_rect\" from=\"/stereo/right/image_rect\" />\n",
			"\t\t<remap to=\"/"+namespace+"/left/image_rect\" from=\"/stereo/left/image_rect\" />\n",
		"\t</node>\n"])

of.write("</launch>")
of.flush()
of.close()

#retcode = subprocess.call("roslaunch /tmp/multiview.launch")
retcode = subprocess.call(["roslaunch","/tmp/multiview.launch"])
#result = subprocess.Popen("echo 'hi'")
#result = subprocess.Popen("roslaunch /tmp/multiview.launch")
#result.wait()
		
