/**
\mainpage
\htmlinclude manifest.html

\b functional_m3n is a package for training and classifying with Max-Margin Markov Networks 
using functional gradient boosting.  The network structure can contain high-order cliques 
assuming a (Robust) Potts interaction model.  This package does not have ROS dependencies, 
and is currently only dependent on OpenCV and Boost C++.
\n\n
This package implements/heavily uses techniques/ideas described in the following publications:
\n
[1] D. Munoz, J. A. Bagnell, N. Vandapel, and M. Hebert, "Contextual Classification with Functional Max-Margin Markov Networks", CVPR 2009
\n
[2] B. Taskar, C. Guestrin, and D. Koller, "Max-Margin Markov Networks", NIPS 2003
\n
[3] N. Ratliff, D. Silver, and J. A. Bagnell, "Learning to Search: Functional Gradient Techniques for Imitation Learning", Autonomous Robots 2009
\n
[4] P. Kohli, L. Ladicky, and P. H. S. Torr, "Robust Higher Order Potentials for Enforcing Label Consistency", CVPR 2008
\n
[5] P. Kohli, M. P. Kumar, and P. H. S. Torr, "P3 and Beyond: Solving Energies with Higher Order Cliques", CVPR 2007
\n
[6] V. Kolmogorov and R. Zabih, "What Energy Functions can be Minimized via Graph Cuts?", PAMI 2002
\n
[7] Y. Boykov, O. Veksler, and R. Zabih, "Fast Approximate Energy Minimization via Graph Cuts", PAMI 2001

<!--
... In addition to providing an overview of your package,
this is the section where the specification and design/architecture 
should be detailed. While the original specification may be done on the
wiki, it should be transferred here once your package starts to take shape.
You can then link to this documentation page from the Wiki.


\section codeapi Code API

Provide links to specific auto-generated API documentation within your
package that is of particular interest to a reader. Doxygen will
document pretty much every part of your code, so do your best here to
point the reader to the actual API.

If your codebase is fairly large or has different sets of APIs, you
should use the doxygen 'group' tag to keep these APIs together. For
example, the roscpp documentation has 'libros' group
so that it can be viewed separately. The rospy documentation
similarly has a 'client-api' group that pulls together APIs for a
Client API page.

-->

\section codeapi Code API

The main two classes are 
- \b RandomField
- \b M3NModel

<hr>

\subsection usage Creating RandomFields

See RandomField::createNode and RandomField::createClique 

\subsection usage Training M3NModels

See M3NModel::train

\subsection usage Classifying with the M3NModel

See M3NModel::infer

<!--

<!-- START: copy for each node -- >


<hr>

\subsection node_name node_name

node_name does (provide a basic description of your node)

\subsubsection Usage
\verbatim
$ node_type1 [standard ROS args]
\endverbatim

\par Example

\verbatim
$ node_type1
\endverbatim


\subsubsection topics ROS topics

Subscribes to:
- \b "in": [std_msgs/FooType] description of in

Publishes to:
- \b "out": [std_msgs/FooType] description of out

\subsubsection parameters ROS parameters

Reads the following parameters from the parameter server

- \b "~param_name" : \b [type] description of param_name
- \b "~my_param" : \b [string] description of my_param

Sets the following parameters on the parameter server

- \b "~param_name" : \b [type] description of param_name


\subsubsection services ROS services
- \b "foo_service": [std_srvs/FooType] description of foo_service


<!-- END: copy for each node -- >

\section commandline Command-line tools

This section is a catch-all for any additional tools that your package
provides or uses that may be of use to the reader. For example:

- tools/scripts (e.g. rospack, roscd)
- roslaunch .launch files
- xmlparam files

\subsection script_name script_name

Description of what this script/file does.

\subsubsection Usage
\verbatim
$ ./script_name [args]
\endverbatim

\par Example

\verbatim
$ ./script_name foo bar
\endverbatim
-->
*/
