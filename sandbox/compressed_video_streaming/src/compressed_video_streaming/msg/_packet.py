# autogenerated by genmsg_py from packet.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude packet.msg.html

class packet(roslib.message.Message):
  _md5sum = "d804434eb295ca184dd6d2e32479185c"
  _type = "compressed_video_streaming/packet"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8[] blob
int32 bytes
int32 b_o_s
int32 e_o_s

int64 granulepos  
int64 packetno
"""
  __slots__ = ['blob','bytes','b_o_s','e_o_s','granulepos','packetno']
  _slot_types = ['uint8[]','int32','int32','int32','int64','int64']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   blob,bytes,b_o_s,e_o_s,granulepos,packetno
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(packet, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.blob is None:
      self.blob = ''
    if self.bytes is None:
      self.bytes = 0
    if self.b_o_s is None:
      self.b_o_s = 0
    if self.e_o_s is None:
      self.e_o_s = 0
    if self.granulepos is None:
      self.granulepos = 0
    if self.packetno is None:
      self.packetno = 0

  ## internal API method
  def _get_types(self): return packet._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      length = len(self.blob)
      #serialize self.blob
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(self.blob) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *self.blob))
      else:
        buff.write(struct.pack('<I%ss'%length, length, self.blob))
      buff.write(struct.pack('<3i2q', self.bytes, self.b_o_s, self.e_o_s, self.granulepos, self.packetno))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.blob
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.blob,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 28
      (self.bytes, self.b_o_s, self.e_o_s, self.granulepos, self.packetno,) = struct.unpack('<3i2q',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      length = len(self.blob)
      #serialize self.blob
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(self.blob) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *self.blob))
      else:
        buff.write(struct.pack('<I%ss'%length, length, self.blob))
      buff.write(struct.pack('<3i2q', self.bytes, self.b_o_s, self.e_o_s, self.granulepos, self.packetno))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.blob
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.blob,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 28
      (self.bytes, self.b_o_s, self.e_o_s, self.granulepos, self.packetno,) = struct.unpack('<3i2q',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

