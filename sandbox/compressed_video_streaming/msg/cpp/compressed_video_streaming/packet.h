/* auto-generated by genmsg_cpp from /u/ethand/rosPostCommonMsgs/ros-pkg/sandbox/compressed_video_streaming/msg/packet.msg.  Do not edit! */
#ifndef COMPRESSED_VIDEO_STREAMING_PACKET_H
#define COMPRESSED_VIDEO_STREAMING_PACKET_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/time.h"

namespace compressed_video_streaming
{

//! \htmlinclude packet.msg.html

class packet : public ros::Message
{
public:
  typedef boost::shared_ptr<packet> Ptr;
  typedef boost::shared_ptr<packet const> ConstPtr;

  typedef std::vector<uint8_t> _blob_type;
  typedef int32_t _bytes_type;
  typedef int32_t _b_o_s_type;
  typedef int32_t _e_o_s_type;
  typedef int64_t _granulepos_type;
  typedef int64_t _packetno_type;

  std::vector<uint8_t> blob;
  int32_t bytes;
  int32_t b_o_s;
  int32_t e_o_s;
  int64_t granulepos;
  int64_t packetno;

  packet() : ros::Message(),
    bytes(0),
    b_o_s(0),
    e_o_s(0),
    granulepos(0),
    packetno(0)
  {
  }
  packet(const packet &copy) : ros::Message(),
    bytes(copy.bytes),
    b_o_s(copy.b_o_s),
    e_o_s(copy.e_o_s),
    granulepos(copy.granulepos),
    packetno(copy.packetno)
  {
    (void)copy;
    blob = copy.blob;
  }
  packet &operator =(const packet &copy)
  {
    if (this == &copy)
      return *this;
    blob.clear();
    blob = copy.blob;
    bytes = copy.bytes;
    b_o_s = copy.b_o_s;
    e_o_s = copy.e_o_s;
    granulepos = copy.granulepos;
    packetno = copy.packetno;
    return *this;
  }
  virtual ~packet() 
  {
    blob.clear();
  }
  inline static std::string __s_getDataType() { return std::string("compressed_video_streaming/packet"); }
  inline static std::string __s_getMD5Sum() { return std::string("d804434eb295ca184dd6d2e32479185c"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "uint8[] blob\n"
    "int32 bytes\n"
    "int32 b_o_s\n"
    "int32 e_o_s\n"
    "\n"
    "int64 granulepos  \n"
    "int64 packetno\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_blob_size(uint32_t __ros_new_size)
  {
    this->blob.resize(__ros_new_size);
  }
  inline uint32_t get_blob_size() const { return blob.size(); }
  inline void get_blob_vec (std::vector<uint8_t> &__ros_vec) const
  {
    __ros_vec = this->blob;
  }
  inline void set_blob_vec(const std::vector<uint8_t> &__ros_vec)
  {
    this->blob = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4 + (blob.size() ? blob.size() * 1 : 0); // blob
    __l += 4; // bytes
    __l += 4; // b_o_s
    __l += 4; // e_o_s
    __l += 8; // granulepos
    __l += 8; // packetno
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    uint32_t __blob_size = blob.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __blob_size);
    memcpy(write_ptr, &blob[0], sizeof(uint8_t) * __blob_size);
    write_ptr += sizeof(uint8_t) * __blob_size;
    SROS_SERIALIZE_PRIMITIVE(write_ptr, bytes);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, b_o_s);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, e_o_s);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, granulepos);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, packetno);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    uint32_t __blob_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __blob_size);
    set_blob_size(__blob_size);
    memcpy(&blob[0], read_ptr, sizeof(uint8_t) * __blob_size);
    read_ptr += sizeof(uint8_t) * __blob_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, bytes);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, b_o_s);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, e_o_s);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, granulepos);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, packetno);
    return read_ptr;
  }
};

typedef boost::shared_ptr<packet> packetPtr;
typedef boost::shared_ptr<packet const> packetConstPtr;


}

#endif
