/**
\mainpage
\htmlinclude manifest.html

\b node_sequencer provides a way to control the order in which things happen across multiple ROS nodes.



<!-- 
In addition to providing an overview of your package,
this is the section where the specification and design/architecture 
should be detailed. While the original specification may be done on the
wiki, it should be transferred here once your package starts to take shape.
You can then link to this documentation page from the Wiki. 
-->


\section codeapi Code API

Use the waitFor and notify functions.

<!--
Provide links to specific auto-generated API documentation within your
package that is of particular interest to a reader. Doxygen will
document pretty much every part of your code, so do your best here to
point the reader to the actual API.

If your codebase is fairly large or has different sets of APIs, you
should use the doxygen 'group' tag to keep these APIs together. For
example, the roscpp documentation has 'libros' group.
-->

\section rosapi ROS API

<!--
Names are very important in ROS because they can be remapped on the
command-line, so it is VERY IMPORTANT THAT YOU LIST NAMES AS THEY
APPEAR IN THE CODE. You should list names of every topic, service and
parameter used in your code. There is a template below that you can
use to document each node separately.

List of nodes:
- \b node_name1
- \b node_name2
-->




<!-- START: copy from here to 'END' for each node 
-->

<hr>

\subsection node_sequencer node_sequencer

node_sequencer is the node that actually synchronizes the other nodes.

\subsubsection Usage
\verbatim
$ node_sequencer -c constraints_file
\endverbatim

Each line of the constraints file must be of the form
\verbatim
event1 event2
\endverbatim

which means that event1 must happen before event2.  Events are made to happen by creating objects of type SequencedTask.


*/