<launch>

  <include file="$(find 3dnav_pr2)/launch/prX.machine" />
  
  <!-- send additional description parameters -->
  <include file="$(find 3dnav_pr2)/launch/pr2_planning_environment.launch" />

  <!-- start controller -->		   
  <node machine="two" pkg="mechanism_control" type="spawner.py" args="$(find pr2_default_controllers)/laser_tilt_controller.xml" />
  <node machine="two" pkg="pr2_mechanism_controllers" type="send_periodic_cmd_srv.py" args="laser_tilt_controller linear 8 .75 .25" />
  
  <!-- convert laser scan to pointcloud -->
  <node machine="three" pkg="laser_scan" type="scan_to_cloud" output="screen">
    <param name="scan_topic" type="string" value="tilt_scan" />
    <rosparam command="load" ns="scan_filters" file="$(find laser_scan)/default_scan_shadows.yaml" />
    <param name="high_fidelity" type="bool" value="true" />
    <param name="cloud_topic" type="string" value="tilt_scan_cloud" />
  </node>

  <!-- remove points corresponding to known objects -->
  <node machine="three" pkg="planning_environment" type="clear_known_objects" respawn="false" output="screen">
    <remap from="robot_description" to="robot_description" />

<!-- define a frame that stays fixed for the known objects -->
<!--    <param name="fixed_frame" type="string" value="/odom_combined" /> -->

    <remap from="cloud_in" to="tilt_scan_cloud" />
    <remap from="cloud_out" to="tilt_scan_cloud_without_known_objects" />
    <param name="object_scale" type="double" value="1.0" />
    <param name="object_padd" type="double" value="0.05" />
  </node>
  
  <!-- add a channel that marks points that are on the robot -->
  <node machine="three" pkg="robot_self_filter" type="self_filter" respawn="true" output="screen">
    <remap from="robot_description" to="robot_description" />
    <remap from="cloud_in" to="tilt_scan_cloud_without_known_objects" />
    <remap from="cloud_out" to="tilt_scan_cloud_annotated" />
    <!--    <param name="annotate" type="string" value="on_self" /> -->
    <param name="sensor_frame" type="string" value="laser_tilt_mount_link" />
  </node>
  
  <!-- assemble pointcloud into a full world view -->
  <node machine="four" pkg="point_cloud_assembler" type="point_cloud_assembler_srv" output="screen"  name="point_cloud_assembler">
    <remap from="scan_in" to="tilt_scan_cloud_annotated"/>
    <param name="tf_cache_time_secs" type="double" value="10.0" />
    <param name="tf_tolerance_secs" type="double" value="0.0" />
    <param name="max_scans" type="int" value="400" />
    <param name="ignore_laser_skew" type="bool" value="true" />
    <param name="fixed_frame" type="string" value="base_link" />
    <param name="downsample_factor" type="int" value="2" />
  </node>
  
  <node machine="four" pkg="point_cloud_assembler" type="point_cloud_snapshotter" output="screen" name="snapshotter">
    <remap from="laser_scanner_signal" to="laser_tilt_controller/laser_scanner_signal"/>
    <remap from="build_cloud" to="point_cloud_assembler/build_cloud" />
    <remap from="full_cloud" to="full_laser_cloud_annotated" />
  </node>
  
  <include file="$(find 3dnav_pr2)/launch/perception/narrow_stereoproc.launch" />
  
  <!-- remove points corresponding to known objects -->
  <node machine="four" pkg="planning_environment" type="clear_known_objects" respawn="false" output="screen">
    <remap from="robot_description" to="robot_description" />

<!-- define a frame that stays fixed for the known objects -->
<!--    <param name="fixed_frame" type="string" value="/odom_combined" /> -->

    <remap from="cloud_in" to="/narrow_stereo/cloud" />
    <remap from="cloud_out" to="stereo_cloud_without_known_objects" />
  </node>

  <!-- add a channel that marks points that are on the robot -->
  <node machine="four" pkg="robot_self_filter" type="self_filter" respawn="true" output="screen">
    <remap from="robot_description" to="robot_description" />
    <remap from="cloud_in" to="stereo_cloud_without_known_objects" />
    <remap from="cloud_out" to="full_stereo_cloud_annotated" />
    <!--    <param name="annotate" type="string" value="on_self" /> -->
  </node>
  
 <node machine="four" pkg="point_cloud_assembler" type="merge_clouds" output="screen">

    <!-- first input cloud -->
    <remap from="cloud_in1" to="full_stereo_cloud_annotated"/>

    <!-- second input cloud -->
    <remap from="cloud_in2" to="full_laser_cloud_annotated"/>

    <!-- output cloud -->
    <remap from="cloud_out" to="full_cloud_annotated"/>

    <!-- the frame in which the output cloud should be published; this parameter must ALWAYS be specified  -->
    <param name="output_frame" type="string" value="base_link"/>
  </node>


  <!-- start collision map -->
  <include file="$(find 3dnav_pr2)/launch/perception/collision_map_self_occ.launch" />    
    
</launch>
