# autogenerated by genmsg_py from LearnRequest.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude LearnRequest.msg.html

class LearnRequest(roslib.message.Message):
  _md5sum = "ea31c8eab6fc401383cf528a7c0984ba"
  _type = "functional_m3n_ros/LearnRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string model_name

"""
  __slots__ = ['model_name']
  _slot_types = ['string']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   model_name
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(LearnRequest, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.model_name is None:
      self.model_name = ''

  ## internal API method
  def _get_types(self): return LearnRequest._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      length = len(self.model_name)
      #serialize self.model_name
      buff.write(struct.pack('<I%ss'%length, length, self.model_name))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.model_name
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.model_name,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      length = len(self.model_name)
      #serialize self.model_name
      buff.write(struct.pack('<I%ss'%length, length, self.model_name))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.model_name
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.model_name,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

# autogenerated by genmsg_py from LearnResponse.msg. Do not edit.
import roslib.message
import struct

## \htmlinclude LearnResponse.msg.html

class LearnResponse(roslib.message.Message):
  _md5sum = "bfe471768a4b82b5c5494620be10081c"
  _type = "functional_m3n_ros/LearnResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string model_type
string model_reference

"""
  __slots__ = ['model_type','model_reference']
  _slot_types = ['string','string']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   model_type,model_reference
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(LearnResponse, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.model_type is None:
      self.model_type = ''
    if self.model_reference is None:
      self.model_reference = ''

  ## internal API method
  def _get_types(self): return LearnResponse._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      length = len(self.model_type)
      #serialize self.model_type
      buff.write(struct.pack('<I%ss'%length, length, self.model_type))
      length = len(self.model_reference)
      #serialize self.model_reference
      buff.write(struct.pack('<I%ss'%length, length, self.model_reference))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.model_type
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.model_type,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.model_reference
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.model_reference,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      length = len(self.model_type)
      #serialize self.model_type
      buff.write(struct.pack('<I%ss'%length, length, self.model_type))
      length = len(self.model_reference)
      #serialize self.model_reference
      buff.write(struct.pack('<I%ss'%length, length, self.model_reference))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.model_type
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.model_type,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.model_reference
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.model_reference,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

## \htmlinclude Learn.srv.html

class Learn(roslib.message.ServiceDefinition):
  _type          = 'functional_m3n_ros/Learn'
  _md5sum = 'fd99f6e6eb97c1dc94966553ee2d4592'
  _request_class  = LearnRequest
  _response_class = LearnResponse
