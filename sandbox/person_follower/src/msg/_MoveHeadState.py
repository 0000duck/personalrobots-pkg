# autogenerated by genmsg_py from MoveHeadState.msg. Do not edit.
import roslib.message
import struct

import annotated_map_builder.msg
import robot_actions.msg
import std_msgs.msg
## \htmlinclude MoveHeadState.msg.html

class MoveHeadState(roslib.message.Message):
  _md5sum = "c8be8f0d256474b389d267abfffb9d6d"
  _type = "annotated_map_builder/MoveHeadState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
robot_actions/ActionStatus status
annotated_map_builder/MoveHeadGoal goal
std_msgs/Empty feedback
================================================================================
MSG: roslib/Header
#Standard metadata for higher-level flow data types
#sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: robot_actions/ActionStatus
# This message defines the expected format for robot action status messages
# Embed this in the feedback state message of robot actions

# The action is inactive, and has just been reset.
byte RESET=0

# The action has successfuly completed and is now inactive
byte SUCCESS=1

# The action has failed and given up. It is now inactive
byte ABORTED=2

# The action has been preempted. It is now inactive
byte PREEMPTED=3

# The action is active to accomplish a requested goal
byte ACTIVE=4

# Status of the controller = {UNDEFINED, SUCCESS, ABORTED, PREEMPTED, ACTIVE}
byte value

#Comment for debug
string comment
================================================================================
MSG: annotated_map_builder/MoveHeadGoal

================================================================================
MSG: std_msgs/Empty

"""
  __slots__ = ['header','status','goal','feedback']
  _slot_types = ['Header','robot_actions/ActionStatus','annotated_map_builder/MoveHeadGoal','std_msgs/Empty']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   header,status,goal,feedback
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(MoveHeadState, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.header is None:
      self.header = roslib.msg._Header.Header()
    if self.status is None:
      self.status = robot_actions.msg.ActionStatus()
    if self.goal is None:
      self.goal = annotated_map_builder.msg.MoveHeadGoal()
    if self.feedback is None:
      self.feedback = std_msgs.msg.Empty()

  ## internal API method
  def _get_types(self): return MoveHeadState._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      buff.write(struct.pack('<b', self.status.value))
      length = len(self.status.comment)
      #serialize self.status.comment
      buff.write(struct.pack('<I%ss'%length, length, self.status.comment))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.status is None:
        self.status = robot_actions.msg.ActionStatus()
      if self.goal is None:
        self.goal = annotated_map_builder.msg.MoveHeadGoal()
      if self.feedback is None:
        self.feedback = std_msgs.msg.Empty()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.status.value,) = struct.unpack('<b',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.status.comment
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.status.comment,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

