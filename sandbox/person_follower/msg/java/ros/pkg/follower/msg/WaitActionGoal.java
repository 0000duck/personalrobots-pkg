/* auto-generated by genmsg_cpp from /u/ethand/ros/ros-pkg/sandbox/follower/msg/WaitActionGoal.msg.  Do not edit! */
package ros.pkg.follower.msg;


import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
public  class WaitActionGoal extends ros.communication.Message
{

  public int num_events;
  public java.lang.String topic_name;

  public WaitActionGoal() {
 super();
    topic_name = new java.lang.String();

  }
  public static java.lang.String __s_getDataType() { return "follower/WaitActionGoal"; }
  public static java.lang.String __s_getMD5Sum() { return "54f5dc6d242ed96aa3e20c82006143e4"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "int32 num_events\n" + 
    "string topic_name\n" + 
    "\n" + 
    "\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public WaitActionGoal clone() {
    WaitActionGoal clone = (WaitActionGoal)super.clone();
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("num_events", "int");
     m.put("topic_name", "java.lang.String");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof WaitActionGoal)) throw new RuntimeException("Invalid Type");
    WaitActionGoal __m2 = (WaitActionGoal) __m;
    num_events = __m2.num_events;
    topic_name = __m2.topic_name;
    }

  public int serializationLength() 
  {
    int __l = 0;
    __l += 4; // num_events
    __l += 4 + topic_name.length(); // topic_name
    return __l;
  }
  public void serialize(OutputStream os, int seq) throws IOException {
    Serialization.writeInt(os, num_events);
    Serialization.writeString(os, topic_name);
  }
  public void deserialize(InputStream is)  throws IOException  {
    num_events = Serialization.readInt(is);
    topic_name = Serialization.readString(is);
  }
}

