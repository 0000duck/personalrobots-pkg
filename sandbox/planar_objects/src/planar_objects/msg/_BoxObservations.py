# autogenerated by genmsg_py from BoxObservations.msg. Do not edit.
import roslib.message
import struct

import robot_msgs.msg
import planar_objects.msg
import roslib.msg
## \htmlinclude BoxObservations.msg.html

class BoxObservations(roslib.message.Message):
  _md5sum = "ba580215a3a066fe7cc8e4011037a70d"
  _type = "planar_objects/BoxObservations"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

BoxObservation[] obs

================================================================================
MSG: roslib/Header
#Standard metadata for higher-level flow data types
#sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: planar_objects/BoxObservation
robot_msgs/Transform transform
int32 plane_id

float64 w # width
float64 h # height 

float64 precision # fill ratio of rectangle
float64 recall # coverage ratio of rectangle in plane



================================================================================
MSG: robot_msgs/Transform
Vector3 translation
Quaternion rotation

================================================================================
MSG: robot_msgs/Vector3
float64 x
float64 y
float64 z
================================================================================
MSG: robot_msgs/Quaternion
# xyz - vector rotation axis, w - scalar term (cos(ang/2))
float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['header','obs']
  _slot_types = ['Header','BoxObservation[]']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   header,obs
  ##
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(BoxObservations, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.header is None:
      self.header = roslib.msg._Header.Header()
    if self.obs is None:
      self.obs = []

  ## internal API method
  def _get_types(self): return BoxObservations._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      #serialize self.obs
      length = len(self.obs)
      buff.write(struct.pack('<I', length))
      for val1 in self.obs:
        buff.write(struct.pack('<3d', val1.transform.translation.x, val1.transform.translation.y, val1.transform.translation.z))
        buff.write(struct.pack('<4d', val1.transform.rotation.x, val1.transform.rotation.y, val1.transform.rotation.z, val1.transform.rotation.w))
        buff.write(struct.pack('<i4d', val1.plane_id, val1.w, val1.h, val1.precision, val1.recall))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      #deserialize self.obs
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.obs = []
      for i in xrange(0, length):
        val1 = planar_objects.msg.BoxObservation()
        start = end
        end += 24
        (val1.transform.translation.x, val1.transform.translation.y, val1.transform.translation.z,) = struct.unpack('<3d',str[start:end])
        start = end
        end += 32
        (val1.transform.rotation.x, val1.transform.rotation.y, val1.transform.rotation.z, val1.transform.rotation.w,) = struct.unpack('<4d',str[start:end])
        start = end
        end += 36
        (val1.plane_id, val1.w, val1.h, val1.precision, val1.recall,) = struct.unpack('<i4d',str[start:end])
        self.obs.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      #serialize self.obs
      length = len(self.obs)
      buff.write(struct.pack('<I', length))
      for val1 in self.obs:
        buff.write(struct.pack('<3d', val1.transform.translation.x, val1.transform.translation.y, val1.transform.translation.z))
        buff.write(struct.pack('<4d', val1.transform.rotation.x, val1.transform.rotation.y, val1.transform.rotation.z, val1.transform.rotation.w))
        buff.write(struct.pack('<i4d', val1.plane_id, val1.w, val1.h, val1.precision, val1.recall))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      #deserialize self.obs
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.obs = []
      for i in xrange(0, length):
        val1 = planar_objects.msg.BoxObservation()
        start = end
        end += 24
        (val1.transform.translation.x, val1.transform.translation.y, val1.transform.translation.z,) = struct.unpack('<3d',str[start:end])
        start = end
        end += 32
        (val1.transform.rotation.x, val1.transform.rotation.y, val1.transform.rotation.z, val1.transform.rotation.w,) = struct.unpack('<4d',str[start:end])
        start = end
        end += 36
        (val1.plane_id, val1.w, val1.h, val1.precision, val1.recall,) = struct.unpack('<i4d',str[start:end])
        self.obs.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

