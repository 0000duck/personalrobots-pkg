#!/usr/bin/python

"""
 usage: %(progname)s [<image_file> | --folder=<folder_name>]

 This program reads an image image.jpg, and a corresponding xml file
 image_bbox.xml whose name is inferred from the image name. The xml file
 should contain a list of oriented_box entries with attributes:

 (x, y, width, height, angle, flip)
 
 where (x, y) is the middle of the box, expressed in image coordinates.
 flip is 1 if the box should be flipped along its vertical axis, 0 otherwise.
 The output is a cropped image corresponding to that oriented box.

 If the --folder option is used, the operation will apply to all images in
 folder_name/images/, and it will look for xml files in folder_name/annotations/.
 The cropped images are stored in folder_name/cropped/, and named
 image_001.jpg, image_002.jpg, etc.
 
 Example of valid xml file, as returned by
 hand_outlines_to_oriented_bounding_boxes.py (the pt elements are unnecessary):

 <?xml version=\"1.0\" ?>
 <annotations>
         <results>
                 <annotation>
                         <oriented_box angle=\"3.0975413757\" height=\"137.751329989\" width=\"106.658248566\" x=\"467.438913853\" y=\"52.6154809788\">
                                 <pt x=\"411.128444308\" y=\"-13.8449113225\"/>
                                 <pt x=\"517.683223637\" y=\"-18.5418240535\"/>
                                 <pt x=\"523.749383397\" y=\"119.07587328\"/>
                                 <pt x=\"417.194604068\" y=\"123.772786011\"/>
                         </oriented_box>
                         <oriented_box angle=\"2.96727136416\" height=\"135.695919826\" width=\"98.3987823413\" x=\"253.265692251\" y=\"56.7564102996\">
                                 <pt x=\"193.044409957\" y=\"-1.53014831232\"/>
                                 <pt x=\"289.951907695\" y=\"-18.5964088399\"/>
                                 <pt x=\"313.486974544\" y=\"115.042968912\"/>
                                 <pt x=\"216.579476806\" y=\"132.109229439\"/>
                         </oriented_box>
                 </annotation>
         </results>
 </annotations>

 A simpler valid example (though not a valid xml file), generated by hand:

 <oriented_box angle=\"3.0975413757\" height=\"137.751329989\" width=\"106.658248566\" x=\"467.438913853\" y=\"52.6154809788\"/>
 <oriented_box angle=\"2.96727136416\" height=\"135.695919826\" width=\"98.3987823413\" x=\"253.265692251\" y=\"56.7564102996\"/>

"""

import roslib; roslib.load_manifest('hand_tracker')
import sys
import os
import getopt
import cv

from hand_tracker import oriented_bounding_boxes

#----------------------------------------------------------------------
#                             Main
#----------------------------------------------------------------------

def usage(progname):
  print __doc__ % vars()


def main(argv, stdout, environ):
  progname = argv[0]
  optlist, args = getopt.getopt(argv[1:], "", ["help", "debug", "folder="])
  folder = None

  for (field, val) in optlist:
    if field == "--help":
      usage(progname)
      return
    elif field == "--debug":
      debugfull()
    elif field == "--folder":
      folder = val

  if folder:
    bbox_input_folder = os.path.join(folder,"bbox")
    images_input_folder = os.path.join(folder,"images")
    cropped_output_directory = os.path.join(folder, "cropped")
    image_filenames = os.listdir(images_input_folder)
  elif (len(args) > 0):
    bbox_input_folder = ""
    images_input_folder = ""
    cropped_output_directory = ""
    image_filenames = args
  else:
    usage(progname)
    return
  

  for image_filename in image_filenames:
    if (len(image_filename) >= 4):
      xml_input_filename = image_filename[0:-4] + "_bbox.xml"
      full_xml_input_filename = os.path.join(bbox_input_folder, xml_input_filename)
      full_image_filename = os.path.join(images_input_folder, image_filename)
      if os.path.exists(full_xml_input_filename):
        box_num = 0
        for cropped_image in oriented_bounding_boxes.cropped_oriented_boxes(full_xml_input_filename,
                                                                            full_image_filename):
          box_num += 1
          cropped_filename = os.path.join(cropped_output_directory, image_filename[0:-4] + "_%03d.jpg" % box_num)
          cv.SaveImage(cropped_filename, cropped_image)
          print "Wrote " + cropped_filename


if __name__ == "__main__":
  #import cv
  #im = cv.LoadImage("test_case.jpg")
  #cropped = cv.LoadImage("test_case.jpg")
  #print cropped
  #x = cv.CreateMat(2,3,cv.CV_32FC1)
  #x[0,0] = 1
  #x[1,1] = 1
  #x[0,2] = im.width/2 + 50
  #x[1,2] = im.height/2 - 50
  #cv.GetQuadrangleSubPix(im, cropped, x)
  #cv.SaveImage("dummy.jpg", cropped)
  #hand_tracker.visual_test()
  main(sys.argv, sys.stdout, os.environ)
