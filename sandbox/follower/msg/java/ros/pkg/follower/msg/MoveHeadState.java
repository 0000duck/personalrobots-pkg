/* auto-generated by genmsg_cpp from /u/ethand/ros/ros-pkg/sandbox/follower/msg/MoveHeadState.msg.  Do not edit! */
package ros.pkg.follower.msg;


import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
public  class MoveHeadState extends ros.communication.Message
{

  public ros.pkg.roslib.msg.Header header;
  public ros.pkg.robot_actions.msg.ActionStatus status;
  public ros.pkg.follower.msg.MoveHeadGoal goal;
  public ros.pkg.std_msgs.msg.Empty feedback;

  public MoveHeadState() {
 super();
    header = new ros.pkg.roslib.msg.Header();
    status = new ros.pkg.robot_actions.msg.ActionStatus();
    goal = new ros.pkg.follower.msg.MoveHeadGoal();
    feedback = new ros.pkg.std_msgs.msg.Empty();

  }
  public static java.lang.String __s_getDataType() { return "follower/MoveHeadState"; }
  public static java.lang.String __s_getMD5Sum() { return "42f188c09f43b7b9c1dfd7b8285de0d7"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "Header header\n" + 
    "robot_actions/ActionStatus status\n" + 
    "follower/MoveHeadGoal goal\n" + 
    "std_msgs/Empty feedback\n" + 
    "================================================================================\n" + 
    "MSG: roslib/Header\n" + 
    "#Standard metadata for higher-level flow data types\n" + 
    "#sequence ID: consecutively increasing ID \n" + 
    "uint32 seq\n" + 
    "#Two-integer timestamp that is expressed as:\n" + 
    "# * stamp.secs: seconds (stamp_secs) since epoch\n" + 
    "# * stamp.nsecs: nanoseconds since stamp_secs\n" + 
    "# time-handling sugar is provided by the client library\n" + 
    "time stamp\n" + 
    "#Frame this data is associated with\n" + 
    "# 0: no frame\n" + 
    "# 1: global frame\n" + 
    "string frame_id\n" + 
    "\n" + 
    "================================================================================\n" + 
    "MSG: robot_actions/ActionStatus\n" + 
    "# This message defines the expected format for robot action status messages\n" + 
    "# Embed this in the feedback state message of robot actions\n" + 
    "\n" + 
    "# The action is inactive, and has just been reset.\n" + 
    "byte RESET=0\n" + 
    "\n" + 
    "# The action has successfuly completed and is now inactive\n" + 
    "byte SUCCESS=1\n" + 
    "\n" + 
    "# The action has failed and given up. It is now inactive\n" + 
    "byte ABORTED=2\n" + 
    "\n" + 
    "# The action has been preempted. It is now inactive\n" + 
    "byte PREEMPTED=3\n" + 
    "\n" + 
    "# The action is active to accomplish a requested goal\n" + 
    "byte ACTIVE=4\n" + 
    "\n" + 
    "# Status of the controller = {UNDEFINED, SUCCESS, ABORTED, PREEMPTED, ACTIVE}\n" + 
    "byte value\n" + 
    "\n" + 
    "#Comment for debug\n" + 
    "string comment\n" + 
    "================================================================================\n" + 
    "MSG: follower/MoveHeadGoal\n" + 
    "\n" + 
    "================================================================================\n" + 
    "MSG: std_msgs/Empty\n" + 
    "\n" + 
    "\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public MoveHeadState clone() {
    MoveHeadState clone = (MoveHeadState)super.clone();
      header = (ros.pkg.roslib.msg.Header)header.clone();
      status = (ros.pkg.robot_actions.msg.ActionStatus)status.clone();
      goal = (ros.pkg.follower.msg.MoveHeadGoal)goal.clone();
      feedback = (ros.pkg.std_msgs.msg.Empty)feedback.clone();
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("header", "ros.pkg.roslib.msg.Header");
     m.put("status", "ros.pkg.robot_actions.msg.ActionStatus");
     m.put("goal", "ros.pkg.follower.msg.MoveHeadGoal");
     m.put("feedback", "ros.pkg.std_msgs.msg.Empty");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      s.add("ros.pkg.roslib.msg.Header");
     s.add("ros.pkg.robot_actions.msg.ActionStatus");
     s.add("ros.pkg.follower.msg.MoveHeadGoal");
     s.add("ros.pkg.std_msgs.msg.Empty");
     return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof MoveHeadState)) throw new RuntimeException("Invalid Type");
    MoveHeadState __m2 = (MoveHeadState) __m;
    header = __m2.header;
    status = __m2.status;
    goal = __m2.goal;
    feedback = __m2.feedback;
    }

  public int serializationLength() 
  {
    int __l = 0;
    __l += header.serializationLength(); // header
    __l += status.serializationLength(); // status
    __l += goal.serializationLength(); // goal
    __l += feedback.serializationLength(); // feedback
    return __l;
  }
  public void serialize(OutputStream os, int seq) throws IOException {
    ros.pkg.roslib.msg.Header _ser_header = header;
    boolean __reset_seq = (header.seq == 0);
    if (__reset_seq) _ser_header.seq = seq;
    boolean __reset_timestamp = header.stamp.isZero();
    if (__reset_timestamp)
      _ser_header.stamp = ros.Ros.getInstance().now();
     header.serialize(os, seq);
     status.serialize(os, seq);
     goal.serialize(os, seq);
     feedback.serialize(os, seq);
  }
  public void deserialize(InputStream is)  throws IOException  {
     header.deserialize(is);
     status.deserialize(is);
     goal.deserialize(is);
     feedback.deserialize(is);
  }
}

