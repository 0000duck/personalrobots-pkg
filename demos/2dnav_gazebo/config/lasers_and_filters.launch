<launch>
<node pkg="mechanism_control" type="spawner.py" args="$(find pr2_experimental_controllers)/laser_tilt/laser_tilt_controller.xml" />
<node pkg="pr2_mechanism_controllers" type="send_periodic_cmd.py" args="laser_tilt_controller linear 2 .65 .25" />

<!-- filter robot self -->
<!-- reads tilt_laser_cloud_filtered and publishes robotlinks_cloud_filtered -->
<include file="$(find robot_self_filter)/start_robotlinks_filter.ros.xml"/>

<!-- laser scan -->
<!-- accumulate tilt_scan and publish by service call point_cloud_assembler_srv/build_cloud -->
<!--
<node pkg="point_cloud_assembler" type="laser_scan_assembler_srv" output="screen"  name="laser_scan_assembler">
  <remap from="scan_in" to="tilt_scan"/>
  <param name="tf_cache_time_secs" type="double" value="10.0" />
  <param name="max_scans" type="int" value="400" />
  <param name="ignore_laser_skew" type="bool" value="true" />
  <param name="fixed_frame" type="string" value="odom_combined" />
</node>
-->
<!-- accumulate point_cloud_filtered and publish by service call point_cloud_assembler_srv/build_cloud -->
<node pkg="point_cloud_assembler" type="point_cloud_assembler_srv" output="screen"  name="point_cloud_assembler_filtered">
  <remap from="scan_in" to="robotlinks_cloud_filtered"/>
  <param name="tf_cache_time_secs" type="double" value="10.0" />
  <param name="max_scans" type="int" value="400" />
  <param name="fixed_frame" type="string" value="odom_combined" />
  <param name="downsample_factor" type="int" value="2" />
</node>
<!-- at laser_tilt_controller/laser_scanner_signal,
     reads accumulated point cloud from point_cloud_assembler_srv by invoking point_cloud_assembler/build_cloud service call,
     and publishes full_cloud, which is remapped to snapshot_cloud_filtered -->
<node pkg="point_cloud_assembler" type="point_cloud_snapshotter" output="screen" name="snapshotter_filtered">
  <remap from="laser_scanner_signal" to="laser_tilt_controller/laser_scanner_signal"/>
  <remap from="build_cloud" to="point_cloud_assembler_filtered/build_cloud" />
  <remap from="full_cloud" to="snapshot_cloud_filtered" />
</node>

<!-- Filter for tilt laser shadowing/veiling -->
<!-- subscribes tilt_scan and publishes tilt_scan_filtered -->
<node pkg="laser_scan" type="scan_shadows_filter_node" respawn="true" machine="three" name="tilt_shadow_filter">
  <param name="scan_topic" value="tilt_scan" />
  <param name="cloud_topic" value="tilt_scan_filtered" />
</node>

<!-- Filter for base laser shadowing/veiling -->
<node pkg="laser_scan" type="scan_shadows_filter_node" respawn="true" machine="three" name="base_shadow_filter_non_preserve" >
  <param name="scan_topic" value="base_scan" />
  <param name="cloud_topic" value="base_scan_marking" />
  <param name="laser_max_range" value="30.0" />
</node>

<!-- for clearing we want preservative -->
<node pkg="laser_scan" type="scan_shadows_filter_node" respawn="true" machine="three" name="base_shadow_filter_preserve" >
  <param name="scan_topic" value="base_scan" />
  <param name="cloud_topic" value="base_scan_clearing" />
  <param name="preservative" value="true" />
  <param name="laser_max_range" value="30.0" />
</node>


</launch>
