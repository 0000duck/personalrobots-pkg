<launch>
  <group name="wg">

    <!-- publish mapping between odom and base_footprint -->
    <param name="robot_pose_ekf/freq" value="30.0"/>
    <param name="robot_pose_ekf/sensor_timeout" value="1.0"/>
    <param name="robot_pose_ekf/odom_used" value="true"/>
    <param name="robot_pose_ekf/imu_used" value="true"/>
    <param name="robot_pose_ekf/vo_used" value="true"/>
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" args="robot_pose_ekf" output="screen"/>


    <!--node pkg="map_server" type="map_server" args="$(find gazebo_robot_description)/world/Media/materials/textures/map3.png 0.1" respawn="false" output="screen" /-->
    <!--node pkg="map_server" type="map_server" args="$(find 2dnav_stage)/willow-full-0.025.pgm 0.025" respawn="false" /-->
    <!--<node pkg="map_server" type="map_server" args="$(find 2dnav_stage)/willow-full-0.05.pgm 0.05" respawn="false" />-->

    <!-- localization settings -->
    <node pkg="fake_localization" type="fake_localization" respawn="false" output="screen" />

    <!-- filter out veil effect from range scans -->
    <param name="/scan_shadows_filter/filter_min_angle" value="10"/>
    <param name="/scan_shadows_filter/filter_max_angle" value="170"/>
    <param name="/scan_shadows_filter/filter_window"    value="2"/>
    <node pkg="scan_shadows_filter" type="scan_shadows_filter_node" respawn="false" output="screen" />

    <!-- wavefront_player settings -->
    <!--
    <param name="max_publish_frequency" value="100.0" />
    <param name="dist_eps" value="0" />
    <param name="robot_x_start" value="0" />
    <param name="robot_y_start" value="0" />
    <param name="robot_th_start" value="0" />
    <param name="robot_radius" value="0.3" />
    <param name="dist_penalty" value="2.0" />
    <node pkg="wavefront_player" type="wavefront_player" args="scan:=base_scan" respawn="false" output="screen" />
    -->

    <!-- Run this node if you want to aggregate laser_scans into a point cloud -->
    <node pkg="point_cloud_assembler" type="laser_scan_assembler_srv" output="screen"  name="laser_scan_assembler">
      <remap from="scan_in" to="tilt_scan"/>
      <param name="tf_cache_time_secs" type="double" value="10.0" />
      <param name="max_scans" type="int" value="400" />
      <param name="ignore_laser_skew" type="bool" value="true" />
      <param name="fixed_frame" type="string" value="odom_combined" />
    </node>
    <!-- Run this node if you want clouds automatically published during laser shutter messages -->
    <node pkg="point_cloud_assembler" type="point_cloud_snapshotter" output="screen" name="snapshotter">
      <remap from="laser_scanner_signal" to="laser_tilt_controller/laser_scanner_signal"/>
      <remap from="build_cloud" to="laser_scan_assembler/build_cloud" />
      <remap from="full_cloud" to="snapshot_cloud" />
    </node>
    <!-- starting ransac node -->
    <param name="ransac_ground_plane_extraction/listen_topic" value="tilt_scan_cloud"/>
    <param name="ransac_ground_plane_extraction/publish_ground_plane_topic" value="ground_plane"/>
    <param name="ransac_ground_plane_extraction/publish_obstacle_topic" value="obstacle_cloud"/>
    <param name="ransac_ground_plane_extraction/min_ignore_distance" value="-0.13"/>
    <param name="ransac_ground_plane_extraction/max_ignore_distance" value="0.07"/>
    <param name="ransac_ground_plane_extraction/distance_threshold" value="0.03"/>
    <param name="ransac_ground_plane_extraction/far_remove_distance_threshold" value="0.06"/>
    <param name="ransac_ground_plane_extraction/far_remove_distance" value="6.0"/>
    <param name="ransac_ground_plane_extraction/filter_delta" value="1.0"/>
    <param name="ransac_ground_plane_extraction/max_ransac_iterations" value="500"/>
    <param name="ransac_ground_plane_extraction/publish_obstacle_cloud" type="string" value="yes"/>
    <node pkg="ransac_ground_plane_extraction" type="ransacnode" respawn="false" output="screen" />

    <!-- move_base_sbpl settings -->
    <!-- for the moment use e.g.: ./shparam set move_base/plannerType string ADPlanner -->
    <param name="move_base/environmentList" value="2D,3DKIN"/> <!-- future extension -->
    <param name="move_base/plannerList" value="ADPlanner,ARAPlanner"/> <!-- future extension -->
    <param name="move_base/plannerType" value="ARAPlanner"/>
    <param name="move_base/environmentType" value="2D"/>
    <param name="move_base/controller_frequency" value="15.0"/>
    <param name="move_base/planner_frequency" value="0.0"/>
    <param name="move_base/plannerTimeLimit" value="5.0"/>
    <param name="/costmap_2d/base_laser_max_range" value="40.0"/>
    <param name="/costmap_2d/tilt_laser_max_range" value="40.0"/>
    <param name="/costmap_2d/lethal_obstacle_threshold" value="100.0"/>
    <param name="/costmap_2d/no_information_value" value="255"/>
    <param name="/costmap_2d/z_threshold_max" value="2.0"/>
    <param name="/costmap_2d/z_threshold_min" value="0.06"/>
    <param name="/costmap_2d/freespace_projection_height" value="2.0"/>
    <param name="/costmap_2d/inflation_radius" value="0.55"/>
    <param name="/costmap_2d/circumscribed_radius" value="0.46"/>
    <param name="/costmap_2d/inscribed_radius" value="0.325"/>
    <param name="/costmap_2d/raytrace_window" value="4.0"/>
    <param name="/costmap_2d/weight" value="0.1"/>
    <param name="/costmap_2d/dynamic_obstacle_window" type="double" value="5.0"/> <!-- is this still needed? -->

    <param name="/trajectory_rollout/occdist_scale" type="double" value="0.002"/>
    <param name="/trajectory_rollout/yaw_goal_tolerance" type="double" value="0.1"/>
    <param name="/trajectory_rollout/xy_goal_tolerance" type="double" value="0.35"/>

    <param name="/trajectory_rollout/sim_time" value="1.0" />
    <param name="/trajectory_rollout/sim_steps" value="20" />
    <param name="/trajectory_rollout/samples_per_dim" value="10" />

    <!-- Setting these parameters to 0.0 disables the watchdo on them. For stage this is required since we are not getting any data -->
    <!-- Forces a check that we are receiving base scans that are correctly up to date at a rate of at least 5 Hz -->
    <!-- due to sim time wall clock time difference, use .5Hz for now until rostime is organized -->
    <param name="/costmap_2d/base_laser_update_rate" value="0.0"/> <!-- base_laser -->
    <param name="/costmap_2d/tilt_laser_update_rate" value="0.0"/> <!-- laser_tilt_link -->
    <param name="/costmap_2d/stereo_update_rate" value="0.0"/> <!-- stereo_link -->
    <param name="/costmap_2d/low_obstacle_update_rate" value="0.0"/>  <!-- odom_combined -->

    <!-- start node to move base -->
    <!--
    <node pkg="highlevel_controllers" type="move_base_sbpl" respawn="false" />
    -->
    <node pkg="highlevel_controllers" type="move_base_navfn" respawn="false" />

    <param name="recharge/email_addresses" value="johnhsu@willowgarage.com pr2-users@lists.willowgarage.com"/>
    <param name="recharge/subject_plugin" value="Robot Needs To Be Plugged In"/>
    <param name="recharge/subject_unplug" value="Robot Needs To Be Unplugged"/>
    <param name="recharge/body_plugin" value="Hello, could you please plug me in?\nThanks, PR2"/>
    <param name="recharge/body_unplug" value="Hello, could you please unplug me?\nThanks, PR2"/>
    <param name="recharge/mail_client" value="mailx -s"/>
    <node pkg="highlevel_controllers" type="recharge_controller" respawn="false" />

    <!-- For logging distance traveled -->
    <!--
    <node pkg="rosrecord" type="rosrecord" args="-f 2dnav-stack-fake_localization" />
    <node pkg="rosrecord" type="rosrecord" args="-f /tmp/2dnav-stack-fake_localization /base_scan /tilt_scan /TransformArray /localizedpose /odom /base_controller/odometer /odom_estimation" />
    -->

    <!-- For telling the robot to go charge -->
    <node pkg="highlevel_controllers" type="joy_batt_sender" respawn="true" />

  </group>
</launch>
