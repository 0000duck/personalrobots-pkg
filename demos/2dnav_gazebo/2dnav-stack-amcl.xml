<launch>
  <group name="wg">

    <!-- machine tags for sim, be sure to set environment variable ROBOT to sim -->
    <!--include file="$(find pr2_alpha)/$(env ROBOT).machine" /--> <!-- can't set env for include tags -->
    <include file="$(find pr2_alpha)/sim.machine" />
    <param name="/global_frame_id" value="map"/>

    <!-- publish mapping between odom and base_footprint -->
    <!-- publishes odom_combined  -->
    <param name="robot_pose_ekf/freq" value="30.0"/>
    <param name="robot_pose_ekf/sensor_timeout" value="1.0"/>
    <param name="robot_pose_ekf/odom_used" value="true"/>
    <param name="robot_pose_ekf/imu_used" value="true"/>
    <param name="robot_pose_ekf/vo_used" value="false"/>

    <node pkg="robot_pose_ekf" type="robot_pose_ekf" args="robot_pose_ekf" output="screen"/>

    <!-- localization -->
    <param name="laser_x_offset" type="double" value=".275" />
    <param name="pf_laser_max_beams" value="20"/>
    <param name="pf_min_samples" value="500"/>
    <param name="pf_max_samples" value="10000"/>
    <param name="pf_odom_drift_xx" value="0.2"/>
    <param name="pf_odom_drift_yy" value="0.2"/>
    <param name="pf_odom_drift_aa" value="0.2"/>
    <param name="pf_odom_drift_xa" value="0.2"/>
    <param name="pf_min_d" value="0.25"/>
    <param name="pf_min_a" value="0.524"/>
    <param name="pf_odom_frame_id" value="odom_combined"/>
    <param name="pf_transform_tolerance" value="0.2" />
    <node pkg="amcl_player" type="amcl_player" name="amcl_player" respawn="true" args="scan:=base_scan" />

    <!-- laser scan -->
    <!-- accumulate tilt_scan and publish by service call point_cloud_assembler_srv/build_cloud -->
    <!--
    <node pkg="point_cloud_assembler" type="laser_scan_assembler_srv" output="screen"  name="laser_scan_assembler">
      <remap from="scan_in" to="tilt_scan"/>
      <param name="tf_cache_time_secs" type="double" value="10.0" />
      <param name="max_scans" type="int" value="400" />
      <param name="ignore_laser_skew" type="bool" value="true" />
      <param name="fixed_frame" type="string" value="odom_combined" />
    </node>
    -->
    <!-- accumulate point_cloud_filtered and publish by service call point_cloud_assembler_srv/build_cloud -->
    <node pkg="point_cloud_assembler" type="point_cloud_assembler_srv" output="screen"  name="point_cloud_assembler_filtered">
      <remap from="scan_in" to="robotlinks_cloud_filtered"/>
      <param name="tf_cache_time_secs" type="double" value="10.0" />
      <param name="max_scans" type="int" value="400" />
      <param name="fixed_frame" type="string" value="odom_combined" />
      <param name="downsample_factor" type="int" value="2" />
    </node>
    <!-- at laser_tilt_controller/laser_scanner_signal,
         reads accumulated point cloud from point_cloud_assembler_srv by invoking point_cloud_assembler/build_cloud service call,
         and publishes full_cloud, which is remapped to snapshot_cloud_filtered -->
    <node pkg="point_cloud_assembler" type="point_cloud_snapshotter" output="screen" name="snapshotter_filtered">
      <remap from="laser_scanner_signal" to="laser_tilt_controller/laser_scanner_signal"/>
      <remap from="build_cloud" to="point_cloud_assembler_filtered/build_cloud" />
      <remap from="full_cloud" to="snapshot_cloud_filtered" />
    </node>

     <!-- For ground plane detection -->
     <!-- subscribes to full_cloud and publishes "cloud_ground_filtered" -->
    <node pkg="semantic_point_annotator" type="sac_inc_ground_removal_node" name="sac_ground_removal" respawn="true" output="screen" >
      <remap from="full_cloud" to="robotlinks_cloud_filtered" />
      <param name="z_threshold" value="0.1" />
      <param name="sac_min_points_per_model" value="6" />
      <param name="sac_distance_threshold" value="0.03" />
      <param name="planar_refine" value="1" />
      <param name="clusters_growing_tolerance" value="0.15" />
      <param name="clusters_min_pts" value="5" />
    </node>

    <!-- filters shadow from point clouds -->
    <!-- subscribes tilt_scan and publishes tilt_laser_cloud_filtered -->
    <node pkg="laser_scan" type="scan_shadows_filter_node" output="screen"  name="shadow_filter">
      <remap from="tilt_laser_cloud_filtered" to="tilt_laser_cloud_filtered"/>
      <remap from="tilt_scan" to="tilt_scan" />
    </node>

    <!-- move_base* subscribes to tilt_laser_cloud_filtered
         move_base* subscribes to base_scan
         move_base* subscribes to dcam/cloud
         move_base* subscribes to obstacle_cloud
         move_base* subscribes to odom
         -->
    <!--<node pkg="highlevel_controllers" type="move_base_sbpl" respawn="true" machine="four" output="screen" >-->
    <node pkg="highlevel_controllers" type="move_base_navfn" respawn="true" machine="four" output="screen" name="move_base_node">
      <remap from="tilt_laser_cloud_filtered" to="cloud_ground_filtered"/>
      <!-- for the moment use e.g.: ./shparam set move_base/plannerType string ADPlanner -->
      <param name="move_base/environmentList" value="2D,3DKIN"/> <!-- future extension -->
      <param name="move_base/plannerList" value="ADPlanner,ARAPlanner"/> <!-- future extension -->
      <param name="move_base/plannerType" value="ARAPlanner"/>
      <param name="move_base/environmentType" value="2D"/>
      <param name="move_base/controller_frequency" value="30.0"/>
      <param name="move_base/map_update_frequency" value="2.0"/>
      <param name="move_base/planner_frequency" value="0.0"/>
      <param name="move_base/plannerTimeLimit" value="0.5"/>
      <param name="costmap_2d/base_laser_max_range" value="20.0"/>
      <param name="costmap_2d/tilt_laser_max_range" value="3.0"/>
      <param name="costmap_2d/lethal_obstacle_threshold" value="100.0"/>
      <param name="costmap_2d/z_threshold_max" value="2.0"/>
      <param name="costmap_2d/z_threshold_min" value="0.13"/>
      <param name="costmap_2d/no_information_value" value="255"/>
      <param name="costmap_2d/freespace_projection_height" value="2.0"/>
      <param name="costmap_2d/inflation_radius" value="0.65"/>
      <param name="costmap_2d/circumscribed_radius" value="0.46"/>
      <param name="costmap_2d/inscribed_radius" value="0.325"/>
      <param name="costmap_2d/raytrace_window" value="10.0"/>
      <param name="costmap_2d/weight" value="0.1"/>
      <param name="costmap_2d/zLB" value="0.25"/>
      <param name="costmap_2d/zUB" value="0.35"/>


      <param name="trajectory_rollout/map_size" value="4.0" />
      <param name="trajectory_rollout/acc_limit_x" value="2.5" />
      <param name="trajectory_rollout/acc_limit_y" value="2.5" />
      <param name="trajectory_rollout/acc_limit_th" value="3.2" />
      <param name="trajectory_rollout/sim_time" value="1.0" />
      <param name="trajectory_rollout/sim_granularity" value="0.05" />
      <param name="trajectory_rollout/vx_samples" value="15" />
      <param name="trajectory_rollout/vtheta_samples" value="15" />
      <param name="trajectory_rollout/path_distance_bias" value="0.6" />
      <param name="trajectory_rollout/goal_distance_bias" value="0.8" />
      <param name="trajectory_rollout/occdist_scale" value="0.2" />
      <param name="trajectory_rollout/heading_lookahead" value="0.325" />
      <param name="trajectory_rollout/oscillation_reset_dist" value="0.05" />
      <param name="trajectory_rollout/holonomic_robot" value="true" />
      <param name="trajectory_rollout/max_vel_x" value="0.5" />
      <param name="trajectory_rollout/min_vel_x" value="0.1" />
      <param name="trajectory_rollout/max_vel_th" value="1.0" />
      <param name="trajectory_rollout/min_vel_th" value="-1.0" />
      <param name="trajectory_rollout/min_in_place_vel_th" value="0.4" />
      <param name="trajectory_rollout/world_model" value="freespace" />
      <param name="trajectory_rollout/dwa" value="false" />
      <param name="trajectory_rollout/heading_scoring" value="false" />
      <param name="trajectory_rollout/heading_scoring_timestep" value="0.8" />
      <param name="trajectory_rollout/simple_attractor" value="false" />

      <param name="trajectory_rollout/yaw_goal_tolerance" value=".05" />
      <param name="trajectory_rollout/xy_goal_tolerance" value=".1" />

      <!-- Forces a check that we are receiving base scans that are correctly up to date at a rate of at least 2 Hz. This is
     way too slow for the real system, but necessary for rosstage, which does not reliably meet a 5Hz update rate. -->
      <param name="costmap_2d/base_laser_update_rate" value="0.0"/>

      <!-- Setting these parameters to 0.0 disables the watchdog on them. For stage this is required since we
     are not getting any data -->
      <param name="costmap_2d/tilt_laser_update_rate" value="0.0"/>
      <param name="costmap_2d/low_obstacle_update_rate" value="0.0"/>
      <param name="costmap_2d/stereo_update_rate" value="0.0"/>
    </node>


    <param name="recharge/email_addresses" value="johnhsu@willowgarage.com pr2-users@lists.willowgarage.com"/>
    <param name="recharge/subject_plugin" value="Robot Needs To Be Plugged In"/>
    <param name="recharge/subject_unplug" value="Robot Needs To Be Unplugged"/>
    <param name="recharge/body_plugin" value="Hello, could you please plug me in?\nThanks, PR2"/>
    <param name="recharge/body_unplug" value="Hello, could you please unplug me?\nThanks, PR2"/>
    <param name="recharge/mail_client" value="mailx -s"/>
    <node pkg="highlevel_controllers" type="recharge_controller" respawn="false" />

    <!-- For logging distance traveled -->
    <!--
    <node pkg="rosrecord" type="rosrecord" args="-f 2dnav-stack-amcl" />
    <node pkg="rosrecord" type="rosrecord" args="-f /tmp/2dnav-stack-amcl /base_scan /tilt_scan /TransformArray /localizedpose /odom /base_controller/odometer /odom_estimation" />
    -->

    <!-- For telling the robot to go charge -->
    <node pkg="highlevel_controllers" type="joy_batt_sender" respawn="true" />

  </group>
</launch>
