<launch>
  <group name="gazebo">
    <!-- start gazebo -->
    <node pkg="gazebo" type="gazebo" args="-r $(find gazebo_robot_description)/gazebo_worlds/empty.world" respawn="false" output="screen">
      <env name="LD_LIBRARY_PATH" value="$(find gazebo_plugin)/lib:$(find gazebo)/gazebo/lib:$(find Cg)/Cg/lib:$(optenv LD_LIBRARY_PATH)" />
      <env name="GAZEBO_RESOURCE_PATH" value="$(find gazebo_robot_description)/world" />
      <env name="OGRE_RESOURCE_PATH" value="$(find ogre)/ogre/lib/OGRE" />
      <env name="MC_RESOURCE_PATH" value="$(find gazebo_robot_description)/world" />
    </node>

    <!-- send pr2.xml to param server -->
    <!-- push robotdesc/door to factory and spawn robot in gazebo -->
    <param ns="pr2" name="robotdesc/pr2" command="$(find xacro)/xacro.py '$(find pr2_gazebo)/pr2_door.xacro.xml'" />
    <node pkg="gazebo_plugin" type="urdf2factory" args="robotdesc/pr2" respawn="false" output="screen" />

    <!-- spawn pr2 in gazebo -->
    <!--
    <param name="robotdesc/pr2" command="$(find xacro)/xacro.py '$(find pr2_defs)/robots/pr2.xacro.xml'" />
    <node pkg="gazebo_plugin" type="urdf2factory" args="robotdesc/pr2" respawn="false" output="screen" />
    -->
    <!-- spawn door in gazebo -->
    <!--
    <param name="robotdesc/door" command="$(find xacro)/xacro.py '$(find examples_gazebo)/door_defs/door_defs.xml'" />
    <node pkg="gazebo_plugin" type="urdf2factory" args="robotdesc/door" respawn="false" output="screen" />
    -->

    <!-- load pr2 controllers -->
    <param name="base_controller/odom_publish_rate" value="10" />
    <node pkg="mechanism_control" type="spawner.py" args="$(find pr2_default_controllers)/base_controller.xml" output="screen"/>
    <node pkg="mechanism_control" type="spawner.py" args="$(find pr2_default_controllers)/gazebo_head_torso_lift_controller.xml" output="screen"/>
    <node pkg="mechanism_control" type="spawner.py" args="$(find arm_gazebo)/l_arm_default_controller.xml" output="screen"/>
    <node pkg="mechanism_control" type="spawner.py" args="$(find arm_gazebo)/r_arm_default_controller.xml" output="screen"/>

    <!-- need to scan higher and slower -->
    <!-- Laset tilt controller -->
    <node pkg="mechanism_control" type="spawner.py" args="$(find pr2_default_controllers)/laser_tilt_controller.xml" />
    <node pkg="pr2_mechanism_controllers" type="control_laser.py" args="laser_tilt_controller sine 20 .60 .10" /> <!-- updated range to avoid scanning self shoulder -->

    <!-- load door controllers -->
    <node pkg="mechanism_control" type="spawner.py" args="$(find examples_gazebo)/door_defs/controllers_door.xml" respawn="false" output="screen" />
    <node pkg="pr2_gazebo" type="set_door.py" output="screen"/>


    <!-- aggregate scan lines for door, I could have used snapshot_cloud in 2dnav-stack-fake_localization.xml, but
         since door bot and pr2 are merged as 1 robot, robotlinks_cloud_filtered has no door in it -->
    <node pkg="point_cloud_assembler" type="laser_scan_assembler_srv" output="screen"  name="laser_scan_assembler">
      <remap from="scan_in" to="tilt_scan"/>
      <param name="tf_cache_time_secs" type="double" value="10.0" />
      <param name="max_scans" type="int" value="400" />
      <param name="ignore_laser_skew" type="bool" value="true" />
      <param name="fixed_frame" type="string" value="odom_combined" />
    </node>
    <!-- at laser_tilt_controller/laser_scanner_signal,
         reads accumulated point cloud from point_cloud_assembler_srv by invoking point_cloud_assembler/build_cloud service call,
         and publishes full_cloud, which is remapped to snapshot_cloud -->
    <node pkg="point_cloud_assembler" type="point_cloud_snapshotter" output="screen" name="snapshotter">
      <remap from="laser_scanner_signal" to="laser_tilt_controller/laser_scanner_signal"/>
      <remap from="build_cloud" to="laser_scan_assembler/build_cloud" />
      <remap from="full_cloud" to="snapshot_cloud" />
    </node>

    <!-- visualization -->
    <node pkg="rviz" type="rviz" respawn="false" output="screen" />
    <!--
    <node pkg="rxtools" type="rxconsole" respawn="false" output="screen" />
    <node pkg="rosviz" type="rxplot" args="/r_gripper_l_finger_tip_bumper/force/vector/x /r_gripper_l_finger_tip_bumper/force/vector/y /r_gripper_l_finger_tip_bumper/force/vector/z" respawn="false" output="screen" />
    -->

    <!-- Tug Arms -->
    <node pkg="pr2_gazebo" type="tuck_arms.py" output="screen"/>

    <!-- load map -->
    <!--node pkg="map_server" type="map_server" args="$(find gazebo_robot_description)/world/Media/materials/textures/map3.png 0.1" respawn="false" output="screen" /-->
    <!--node pkg="map_server" type="map_server" args="$(find 2dnav_stage)/willow-full-0.025.pgm 0.025" respawn="false" /-->
    <!--<node pkg="map_server" type="map_server" args="$(find 2dnav_stage)/willow-full-0.05.pgm 0.05" respawn="false" />-->
    <node pkg="map_server" type="map_server" args="$(find gazebo_robot_description)/world/Media/materials/textures/map_blank.png 0.1" respawn="false" output="screen" />

    <!-- nav-stack -->
    <include file="$(find 2dnav_gazebo)/2dnav-stack-fake_localization.xml"/>

    <!-- Door detection -->
    <include file="$(find door_handle_detector)/simple_door_handle_detector.launch"/>	

  </group>
</launch>

