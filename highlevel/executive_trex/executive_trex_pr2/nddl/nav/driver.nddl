#include "nav/imports.nddl"
#include "nav/exports.nddl"


class NavController extends AgentTimeline{
  predicate Holds{
    bool active;
  }

  NavController(){
    super(Internal, "Holds");
  }
};

MoveBehavior driver = new MoveBehavior(Internal, true);
NavController nav_controller = new NavController();
MoveBase move_base = new MoveBase(External);

// Initialize
fact(nav_controller.Holds nc_initial_value);
nc_initial_value.active = false;

MoveBehavior::Active{
  starts(NavController.Holds nc);
  eq(nc.active, true);
}

NavController::Holds{
  met_by(Holds p);
  defaultOnCommit(active, p.active);

  if(active == true){
    contained_by(driver.Active d);
    starts_during(mobility_status.Holds ms);

    if(ms.arms_tucked == false){
      contains_start(safety_tuck_arms.Active cmd);
      concurrent(cmd.end, end);
    }
    else {
      contains_start(move_base.Active cmd_move);
      concurrent(cmd_move.end, end);
      eq_pose_msg(cmd_move.object, d.object);

      contains_start(set_laser_tilt.Active cmd_set_laser_tilt);
      eq(cmd_set_laser_tilt.status, SUCCESS);
      cmd_set_laser_tilt before cmd_move;
    }
  }
  else {
    contained_by(driver.Inactive);
  }
}

MoveBase::Inactive{
  if(status == SUCCESS){
    starts(nav_controller.Holds nc);
    eq(nc.active, false);
    starts(driver.Inactive d);
    eq(d.status, SUCCESS);
  }
}
