/**
 * Provides full functionality of the doorman. Here we integrate with the topological map.
 */
#include "doors/imports.nddl"
#include "world_model/topological_map.nddl"

MoveBehavior::Inactive {
  // Only apply this condition when it has started. Do not want to plan it in advance.
  if(start){
    equals(DoorController.Holds dc);
    eq(dc.active, false);
  }

  // If it has been aborted, send an update with current the current current and target positions
  if(status == ABORTED){

  }
}

MoveBehavior::Active {
  starts(DoorController.Holds dc);

  // Initialize controller variables. We begin by assuming the worst.
  eq(dc.active, true);	 
  eq(dc.arms_tucked, false);
  eq(dc.in_position, false);
  eq(dc.found_door, false);
  eq(dc.must_find_handle, true);
  eq(dc.have_handle, false);
  eq(dc.latch_state, UNKNOWN);
  eq(dc.doorway_clear, false);
  eq(dc.check_doorway, true);

  // Initialize door message from the topological map
  MAP_KEY doorway_id;
  neq(doorway_id, NO_KEY);
  float current_x, current_y, current_z, current_qx, current_qy, current_qz, current_qw;
  tf_get_robot_pose(current_x, current_y, current_z, current_qx, current_qy, current_qz, current_qw, "map");
  map_get_doorway_from_points(doorway_id, current_x, current_y, x, y);
  map_get_door_state(dc.object, doorway_id);
  eq(dc.frame_id, frame_id);
}
