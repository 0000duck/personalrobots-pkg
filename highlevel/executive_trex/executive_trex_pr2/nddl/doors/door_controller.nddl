#include "doors/imports.nddl"


/**
 * This is an internal controller which will monitor state variables and HLC status. It can also generate
 * next steps for this meta level control. This pattern exploits reactive planning based on feedback from the
 * environment.
 */
class DoorController extends AgentTimeline {

  /**
   * The parameters here 
   */
  predicate Holds{
    bool active;

    // Control variables
    bool arms_tucked;
    bool in_position;
    bool found_door;
    bool must_find_handle;
    bool have_handle;
    bool doorway_clear;
    bool check_doorway;

    // Door state
    string frame_id;
    float time_stamp;

    /**
     * The following is essentially a Door message data structure. If we add support for 'struct'
     * in NDDL then we can declare structured data types that directly map to the relevant ROS message types.
     * This will be a generally useful feature of the language and will also make auto-generated NDDL/ROS
     * bindings straightforward. Absent that structure, we would have to capture structure through nomenclature.
     */

    // Overall latched state
    LatchState latch_state;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;

    // Normal data
    float normal_x;
    float normal_y;
    float normal_z;
  }

  DoorController(){
    super(Internal, "Holds");
  }
};

MoveBehavior doorman = new MoveBehavior(Internal, true);
DoorController door_controller = new DoorController();

/**
 * This rule fires essentially a TR-style decision tree to select
 * the next action to take. The action choices are(in reverse order):
 * - release_handle
 * - check_path
 * - open_door
 * - move_base_door
 * - unlatch_handle
 * - grasp_handle
 * - detect_handle
 * - move_base_local
 * - detect_door
 * - move_base_local
 *
 * Note the pattern that uses a flexible temporal interval (end_bounds varaible) for constraining the relationshop between the
 * completion time of the selected action, and the end time of this control step. This flexibility accounts for
 * the fact that an exogenous event can trip the state forcing a planned preemption of the active command, and the
 * completion of the command should also bring about a completion of the given control step
 *
 */
DoorController::Holds {

  // Bind values for inactive case
  if(active == false){
    // Reset control flags
    eq(arms_tucked, false);
    eq(in_position, false);
    eq(found_door, false);
    eq(must_find_handle, true);
    eq(have_handle, false);
    eq(latch_state, UNKNOWN);
    eq(doorway_clear, false);
    eq(check_doorway, true);
    contained_by(doorman.Inactive);
  }
  else {

    // Is the doorway clear? No special checks are required for this. We can do it any time
    if(doorway_clear == true){

      // If we do not have the handle then we are good to go, so we just terminate with success
      if(have_handle == false){

	// TODO - This will go away when we integrate with navigation as that will require the arm to be stowed anyway.
	// Alternatively we could stow the arms with a different stow action
	if(arms_tucked == true){
	  meets(doorman.Inactive mb_inactive);
	  eq(mb_inactive.status, SUCCESS);
	  eq(duration, 1);
	  meets(Holds s);
	  eq(s.active, false);
	}
	else {
	  contains_start(doors_tuck_arms.Active cmd);
	}
      }
      else {
	// If we have the handle, we have to release it. We should not have to tuck arms here
	// but we might have to.
	contains_start(release_handle.Active cmd);
      }
    }

    if(doorway_clear == false){

      if(check_doorway == true){
	contains_start(check_path.Active cmd);
	eq(cmd.frame_id, frame_id);
	door_get_robot_pose_for_door(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, object, DOORWAY_CLEARANCE_RANGE);
      }
      else {
	if(must_find_handle == false){
	  if(in_position == true){
	    if(latch_state == LATCH_STATE_UNLATCHED) {	

	      // Moving the base set up here. Used in either case
	      contains_start(move_base_door.Active cmd_move_base_door);


	      // Set up a preemption as needed. Will make this conditional shortly
	      any(stop_action.Active cmd_stop_action);
	      cmd_move_base_door before cmd_stop_action;

	      if(have_handle == true){
		contains_start(open_door.Active cmd_open_door);
		cmd_open_door starts_before cmd_move_base_door;
		eq(cmd_stop_action.action_name,"open_door");
	      }
	      else {
		contains_start(touch_door.Active cmd_touch_door);
		contains_start(push_door.Active cmd_push_door);
		cmd_touch_door before cmd_push_door;
		cmd_push_door starts_before cmd_move_base_door;
		eq(cmd_stop_action.action_name,"push_door");
	      }
	    }
	    else{
	      if(have_handle == true){
		contains_start(unlatch_handle.Active cmd);
	      }
	      else {
		// Don't have the handle, but could grasp it!
		contains_start(grasp_handle.Active cmd);
	      }
	    }
	  }
	  else { // Not in position
	    // Move to the grasp position. Checking to tuck arms may be unnecessary
	    if(arms_tucked == true){
	      contains_start(move_base_local.Active cmd);
	      eq(cmd.frame_id, frame_id);
	      door_get_robot_pose_for_door(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, object, GRASP_RANGE);
	    }
	    else {
	      contains_start(doors_tuck_arms.Active cmd);
	    }
	  }
	}
	else { // Found handle == false
	  if(found_door == true){
	    contains_start(detect_handle.Active cmd);
	  }
	  else {
	    // If in detection position, we can detect the door
	    if(in_position == true){
	      contains_start(detect_door.Active cmd);
	    }
	    else {
	      // Should move to detection position
	      if(arms_tucked == true){
		contains_start(move_base_local.Active cmd);
		eq(cmd.frame_id, frame_id);
		door_get_robot_pose_for_door(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, object, DETECTION_RANGE);
	      }
	      else {
		contains_start(doors_tuck_arms.Active cmd);
	      }
	    }
	  }
	}
      }
    }
  }
}

/**
 * Defines update rule for default values
 */
DoorController::Holds{
  // We will assume default values on commitment based on predecessor. We really want these values to be bound. These values carry
  // forward from priors as they are updated by actions and we thus assume inertia (if we had the handle before and have no information
  // to the contrary, then we still have the handle).
  met_by(Holds p);
  defaultOnCommit(active, p.active);
  defaultOnCommit(arms_tucked, p.arms_tucked);
  defaultOnCommit(found_door, p.found_door);
  defaultOnCommit(in_position, p.in_position);
  defaultOnCommit(must_find_handle, p.must_find_handle);
  defaultOnCommit(have_handle, p.have_handle);
  defaultOnCommit(doorway_clear, p.doorway_clear);
  defaultOnCommit(check_doorway, p.check_doorway);

  // Door State Data
  defaultOnCommit(frame_id, p.frame_id);
  defaultOnCommit(time_stamp, p.time_stamp);
  defaultOnCommit(latch_state, p.latch_state);
  defaultOnCommit(hinge, p.hinge);
  defaultOnCommit(rot_dir, p.rot_dir);
  defaultOnCommit(frame_p1_x, p.frame_p1_x);
  defaultOnCommit(frame_p1_y, p.frame_p1_y);
  defaultOnCommit(frame_p1_z, p.frame_p1_z);
  defaultOnCommit(frame_p2_x, p.frame_p2_x);
  defaultOnCommit(frame_p2_y, p.frame_p2_y);
  defaultOnCommit(frame_p2_z, p.frame_p2_z);
  defaultOnCommit(door_p1_x, p.door_p1_x);
  defaultOnCommit(door_p1_y, p.door_p1_y);
  defaultOnCommit(door_p1_z, p.door_p1_z);
  defaultOnCommit(door_p2_x, p.door_p2_x);
  defaultOnCommit(door_p2_y, p.door_p2_y);
  defaultOnCommit(door_p2_z, p.door_p2_z);
  defaultOnCommit(height, p.height);
  defaultOnCommit(hinge, p.hinge);
  defaultOnCommit(rot_dir, p.rot_dir);
  defaultOnCommit(handle_x, p.handle_x);
  defaultOnCommit(handle_y, p.handle_y);
  defaultOnCommit(handle_z, p.handle_z);
  defaultOnCommit(normal_x, p.normal_x);
  defaultOnCommit(normal_y, p.normal_y);
  defaultOnCommit(normal_z, p.normal_z);
}

/************************************************************************
 * Now we define how actions update the door controller by setting
 * feedback parameters on success or failure
 ***********************************************************************/

// Derive input bounds from the behavior
DoorManipulationBehavior::Active{
  any(DoorController.Holds dc);
  precedes(dc.start, start);
  temporalDistance(start, [1 +inf], dc.end);
  eq_door_msg(this.object, dc.object);
}

DoorManipulationBehavior::Inactive{
  if(object.update_controller == true){
    if(start){
      starts(DoorController.Holds dc);
      // If successful, then the completion of the action starts a new step in the controller. This is true for all
      // door actions except move_base_door.
      if(status == SUCCESS){
	eq_door_msg(dc.object, this.object);
      }
      if(status == UNDEFINED){
      }
      else{
	eq(dc.active, true);
      }
    }
  }
}

DoorsTuckArms::Inactive {
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.arms_tucked, true);
  }
}

/**
 * On success, have_handle = false
 */
ReleaseHandle::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.have_handle, false);
  }
}

MoveBaseDoor::Inactive{
  if(start){
    starts(DoorController.Holds dc);
    eq(dc.arms_tucked, false);
    if(status == ABORTED){
    }
    else {
      eq(dc.doorway_clear, true);
    }

    if(status == UNDEFINED){
    }
    else{
      eq(dc.active, true);
    }
  }
}

UnlatchHandle::Inactive{
  if(status == ABORTED){
    starts(DoorController.Holds dc);
    eq(dc.arms_tucked, false);
    eq(dc.must_find_handle, true);
  }
}

GraspHandle::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.have_handle, true);
    eq(dc.arms_tucked, false);
  }
}

DetectHandle::Inactive{

  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.must_find_handle, false);
  }

  if(status == ABORTED){
    starts(DoorController.Holds dc);
    eq(dc.in_position, false);
    eq(dc.found_door, false);
  }
}

DetectDoor::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.found_door, true);
    eq(dc.in_position, false);

    if(latch_state == LATCH_STATE_UNLATCHED){
      eq(dc.must_find_handle, false);
    }
  }
}

CheckPath::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.doorway_clear, false);
    eq(dc.check_doorway, false);
  }
}

MoveBase::Inactive {
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.in_position, true);
  }
}
