/*
 * Door Domain Controller
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * @author Conor McGann
 */

/**
 * This file specifies the model for a high level door domain controller. It uses a state machine
 * to capture the high-level states in getting through a doorway, and defines rules governing
 * what happens in each state and how states transition. The paradigm blends explicit programmer specification of
 * a state machine with the power of model-based generative planning which will resolve the requirements to achieve
 * the stipulated next step in control. In general, we want to offload general domain constraints/requirements 
 * from the specific control specification required to capture the strategies particular to getting thru the doorway
 */

// Timelines and class declarations required
#include "doors/imports.nddl"

/**
 * These constants are the set of all individual action timeout limits for actions
 * used in the door domain. All values are in seconds
 */
float CHECK_PATH_DURATION_BOUND = 30.0;
float DETECT_DOOR_DURATION_BOUND = 30.0;
float DETECT_HANDLE_DURATION_BOUND = 60.0;
float GRASP_HANDLE_DURATION_BOUND = 30.0;
float UNLATCH_HANDLE_DURATION_BOUND = 30.0;
float RELEASE_HANDLE_DURATION_BOUND = 30.0;
float MOVE_BASE_LOCAL_APPROACH_DURATION_BOUND = 60.0;
float MOVE_BASE_THROUGH_DOOR_DURATION_BOUND = 600.0;
float MOVE_BASE_DOOR_DURATION_BOUND = 120.0;

/**
 * @brief We maintain an internal model of soor state. This is a time-dependent specification of a Door Msg. It will be
 * seeded from the topological map, but then modified as we perceive new data during execution.
 */
class DoorState extends AgentTimeline {

  /**
   * The only kind of value allowed is a DoorMsg. We define it here expliticly rather than use a prior struct definition. Ideally
   * NDDL will change to support structs and this will be unnecessary
   */
  predicate Holds{
    // Door state
    string frame_id;
    float time_stamp;

    /**
     * The following is essentially a Door message data structure. If we add support for 'struct'
     * in NDDL then we can declare structured data types that directly map to the relevant ROS message types.
     * This will be a generally useful feature of the language and will also make auto-generated NDDL/ROS
     * bindings straightforward. Absent that structure, we would have to capture structure through nomenclature.
     */

    // Overall latched state
    LatchState latch_state;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;

    // Travel direction data
    float travel_dir_x;
    float travel_dir_y;
    float travel_dir_z;

    // Default Values
    defaultOnCommit(frame_id, "map");
    defaultOnCommit(latch_state, UNKNOWN);
    defaultOnCommit(frame_p1_x, 0.0);
    defaultOnCommit(frame_p1_y, 0.0);
    defaultOnCommit(frame_p1_z, 0.0);
    defaultOnCommit(frame_p2_x, 0.0);
    defaultOnCommit(frame_p2_y, 0.0);
    defaultOnCommit(frame_p2_z, 0.0);
    defaultOnCommit(door_p1_x, 0.0);
    defaultOnCommit(door_p1_y, 0.0);
    defaultOnCommit(door_p1_z, 0.0);
    defaultOnCommit(door_p2_x, 0.0);
    defaultOnCommit(door_p2_y, 0.0);
    defaultOnCommit(door_p2_z, 0.0);
    defaultOnCommit(height, 0.0);
    defaultOnCommit(hinge, UNKNOWN);
    defaultOnCommit(rot_dir, UNKNOWN);
    defaultOnCommit(handle_x, 0.0);
    defaultOnCommit(handle_y, 0.0);
    defaultOnCommit(handle_z, 0.0);
    defaultOnCommit(travel_dir_x, 0.0);
    defaultOnCommit(travel_dir_y, 0.0);
    defaultOnCommit(travel_dir_z, 0.0);
  }

  DoorState(){
    super(Internal, "Holds");
  }
};

/**
 * @brief An internal variable for tracking if the gripper is free or not
 */
class GripperFree extends AgentTimeline{
  predicate True{}
  predicate False{}
  GripperFree(){ super(Internal, "True"); }
};

/**
 * The state machine for high-level control in the door domain. The class declaration defines components of teh state machine, but not its transition
 * rules.
 */
class DoorController extends StateMachine {

  // Idle
  predicate Inactive{}

  // Checking the doorway to see if we can drive thru without having to contact the door
  predicate CheckingDoorway{}

  // For positioning the robot at the approach point to the door rom which it can detect the door
  predicate Positioning{}

  // For detecting the door.
  predicate DetectingDoor{}

  // For detectin the handle.
  predicate DetectingHandle{}

  // For moving towards the doo. Used prior to grasping, and/or opening the door
  predicate ApproachingDoor{}

  // Just to grab the handle. Relevant if the door is latched
  predicate GraspingHandle{}

  // Just to unlatch the handle. Relevant if the door is latched
  predicate UnlatchingHandle{}

  // To simply drive thru the doorway with no door contact. Requires a clear path
  predicate DriveThruDoorway{}

  // To actually physically open the door which requires base and arm motion. The base must drive
  // through while contact the door either with or wothout the handle
  predicate OpenDoor{
    bool use_handle;
  }

  DoorController(){ super(); }
};


MoveBehavior doorman = new MoveBehavior(Internal, true);
DoorController door_controller = new DoorController();
DoorState door_state = new DoorState();
GripperFree gripper_free = new GripperFree();
AgentActions actions = new AgentActions();

// Initial conditions for internal timelines. The controller is inactive and we do not have the handle
fact(door_controller.Inactive dc_initial_state);
dc_initial_state.status = UNDEFINED;
fact(gripper_free.True);

// The doorman also becomes inactive when this transitions. These states should be co-temporal. This is an example of
// constraints across timelines
DoorController::Inactive{
  equals(doorman.Inactive dm);
  eq(dm.status, status);
}

DoorController::CheckingDoorway{
  contained_by(doorman.Active dm);
  // Subgoal is the check_path command.
  contains_start(check_path.Active cmd);
  ends cmd;
  // Apply the local duration bound. This will force preemption
  leq(cmd.max_duration, CHECK_PATH_DURATION_BOUND);
  // Read the pose arguments from the goal pose of the doorman
  eq_pose_msg(cmd.object, dm.object);
  // We require that the cmd succeed. Failure will trigger a replan
  // To evaluate the enxt state, we consider the results of the command, which are in feedback paramaters.
  // If the doorway is clear we can drive on thru. Otherwise we have to figure out how to open the door. To do so,
  // we must be in position for detection
  cmd meets (check_path.Inactive cmd_feedback);
  eq(cmd_feedback.status, SUCCESS);
  if(cmd_feedback.is_clear == true){
    meets(DriveThruDoorway);
  }
  else {
    meets(Positioning);
  }
}

DoorController::DriveThruDoorway{
  contained_by(doorman.Active dm);
  // Subgoal to drive straight thru the doorway
  contains_start(move_base.Active cmd);
  ends cmd;
  // Duration bounds
  leq(cmd.max_duration, MOVE_BASE_THROUGH_DOOR_DURATION_BOUND);
  // Command parameters based on doorman goal pose
  eq_pose_msg(cmd.object, dm.object);
  // If the command succeded we are done! If not, it is likely because the door is actually blocking us so we will want
  // to get back to detect the door and figure out how to get thru
  if(cmd.status == SUCCESS){
    meets(Inactive s);
    eq(s.status, SUCCESS);
  }
  else{
    meets(Positioning);
  }
}

DoorController::Positioning{
  contained_by(doorman.Active dm);
  contains_start(move_base.Active cmd);
  ends cmd;
  eq(cmd.status, SUCCESS);
  // Arguments derived from the topological map
  eq(cmd.frame_id, "map");
  map_get_door_approach_pose(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, dm.start_connector);
  meets(DetectingDoor);
}

DoorController::DetectingDoor{
  contained_by(doorman.Active);
  // Detect door action
  contains_start(detect_door.Active cmd);
  ends cmd;
  // if we succed, then depending on the latch state we can go straight for the door
  // or we need to detect the handle first. if it fails, maybe the door has been opened! We might as well check the
  // doorway for a clear path again
  if(cmd.status == SUCCESS){
    cmd meets(detect_door.Inactive cmd_feedback);
    if(cmd_feedback.latch_state == LATCH_STATE_UNLATCHED){
      meets(ApproachingDoor);
    }
    else{
      meets(DetectingHandle);
    }
  }
  else {
    meets(CheckingDoorway);
  }
}

DoorController::DetectingHandle{
  contained_by(doorman.Active);
  // Detect the handle
  contains_start(detect_handle.Active cmd);
  ends cmd;
  // Duration bounds
  leq(cmd.max_duration, DETECT_HANDLE_DURATION_BOUND);
  // If we fail here, we can try get a new door pose. If we succeed we are ready to approach the door to open it
  if(cmd.status == SUCCESS){
    meets(ApproachingDoor);
  }
  else {
    meets(DetectingDoor);
  }
}

DoorController::ApproachingDoor{
  contained_by(doorman.Active);
  // Action that does all the work
  contains_start(move_base_local.Active cmd);
  ends cmd;
  leq(cmd.max_duration, MOVE_BASE_LOCAL_APPROACH_DURATION_BOUND);
  // target pose derived from the door state, and assuming a desired grasp range
  contained_by(door_state.Holds ds);
  eq(cmd.frame_id, ds.frame_id);
  door_get_robot_pose_for_door(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, ds.object, GRASP_RANGE);

  // Workaround for remaining bug in migration of constraint connecting internally in a rule
  bool use_handle;
  testEQ(use_handle, ds.latch_state, LATCH_STATE_LATCHED);

  // If we succed, then based on the latch state we will open the door or have to grasp the handle first. On failure we restart!
  if(cmd.status == SUCCESS){
    if(use_handle == true){
      meets(GraspingHandle);
    }
    else{
      meets(OpenDoor s);
      eq(s.use_handle, false);
    }
  }
  else {
    meets(Positioning);
  }
}

DoorController::GraspingHandle{
  contained_by(doorman.Active);
  // Action with duration bounds
  contains_start(grasp_handle.Active cmd);
  ends cmd;
  leq(cmd.max_duration, GRASP_HANDLE_DURATION_BOUND);
  // If we have it, we can unlatch it. Otherwise we need to release the handle and go back to the start
  if(cmd.status == SUCCESS){
    meets(UnlatchingHandle);
  }
  else {
    meets(Positioning);
  }
}

DoorController::UnlatchingHandle{
  contained_by(doorman.Active);
  // Action with bounds
  contains_start(unlatch_handle.Active cmd);
  ends cmd;
  leq(cmd.max_duration, UNLATCH_HANDLE_DURATION_BOUND);
  // We could fail. In which case we want to restart. Otherwise handle case where the door is locked, vs unlatched.
  if(cmd.status == SUCCESS){
    cmd meets(unlatch_handle.Inactive cmd_feedback);
    // If locked, try again later
    if(cmd_feedback.latch_state == LATCH_STATE_LOCKED){
      meets(Inactive s);
      eq(s.status, ABORTED);
    }
    else {
      meets(OpenDoor s);
      eq(s.use_handle, true);
    }
  }
  else {
    meets(Positioning);
  }
}

DoorController::OpenDoor{
  contained_by(doorman.Active);
  // We will be moving the base thru the doorway. It must succeed, eventually, as we have no implemented recovery
  // for failure.
  contains(move_base_door.Active cmd_move_base_door);
  leq(cmd_move_base_door.max_duration, MOVE_BASE_DOOR_DURATION_BOUND);
  eq(cmd_move_base_door.status, SUCCESS);
  // Introduce a stop action that will preempt children
  cmd_move_base_door before(stop_action.Active cmd_stop_action);
  // A time point for when we are done with the door
  int end_time;
  // Conditionally generate steps with or without the handle
  if(use_handle == true){
    // Open the door with a grasp on the handle.
    contains_start(open_door.Active cmd_open_door);
    // This must start before we begin moving the base
    cmd_open_door starts_before cmd_move_base_door;
    // Must stop the open door action explicitly
    eq(cmd_stop_action.action_name,"open_door");
    // open_door pushes the end time
    precedes(cmd_open_door.end, end_time);
  }
  else {
    // Need to touch the door and then push it. Both must succeed
    contains(touch_door.Active cmd_touch_door);
    cmd_touch_door before(push_door.Active cmd_push_door);
    eq(cmd_touch_door.status, SUCCESS);
    // Must start pushing before we begin moving the base
    cmd_push_door starts_before cmd_move_base_door;
    eq(cmd_stop_action.action_name,"push_door");
    // push_door pushes the end time
    precedes(cmd_push_door.end, end_time);
  }
  // After the end time, release the handle
  ends(release_handle.Active cmd_rh);
  precedes(end_time, cmd_rh.start);
  eq(cmd_rh.status, SUCCESS);
  // Transition to completion
  meets(Inactive s);
  eq(s.status, SUCCESS);
}

/************************************************************************
 * Now we define how actions update the door controller by setting
 * feedback parameters on success or failure
 ***********************************************************************/

/**
 * All door domain actions have the current door state as input.
 */
DoorManipulationBehavior::Active{
  starts_during(door_state.Holds ds);
  eq_door_msg(this.object, ds.object);
}

/**
 * @brief This commands update the door state if successful. Note that it is probable safe to assume this for all door actions
 * but they might screw up the feedback values! We could subclass the ones that do this to avoid redundancy.
 */
UnlatchHandle::Inactive{
  if(status == SUCCESS){
    starts(door_state.Holds ds);
    eq_door_msg(ds.object, this.object);
  }
}
DetectHandle::Inactive{
  if(status == SUCCESS){
    starts(door_state.Holds ds);
    eq_door_msg(ds.object, this.object);
  }
}
DetectDoor::Inactive{
  if(status == SUCCESS){
    starts(door_state.Holds ds);
    eq_door_msg(ds.object, this.object);
  }
}
UnlatchHandle::Active{
  contained_by(gripper_free.False);
}
OpenDoor::Active{
  contained_by(gripper_free.False);
}
GraspHandle::Active{
  starts_during(gripper_free.False);
}
GripperFree::True{
  met_by(release_handle.Active cmd);
  eq(cmd.status, SUCCESS);
  leq(cmd.max_duration, RELEASE_HANDLE_DURATION_BOUND);
}
SafetyTuckArms::Active{
  contained_by(gripper_free.True);
}
