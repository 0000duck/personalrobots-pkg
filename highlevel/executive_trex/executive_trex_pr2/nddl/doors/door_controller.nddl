#include "doors/imports.nddl"


typedef int [-1, 1] TIME_ERROR_BOUND;

// Introduce a constriant to set a time for forcing us to chekc the door based on the door check interval
int FORCE_DOOR_CHECK;
addEq(FORCE_DOOR_CHECK, DOOR_CHECK_INTERVAL, 0);

// Error Bounds
float DETECTION_POSITION_ERROR = 0.1;
float GRASP_POSITION_ERROR = 0.1;

/**
 * This is an internal controller which will monitor state variables and HLC status. It can also generate
 * next steps for this meta level control. This pattern exploits reactive planning based on feedback from the
 * environment.
 */
class DoorController extends AgentTimeline {

  bool integrated; // When true, force interaction wth MoveBehavior

  /**
   * The parameters here 
   */
  predicate Holds{
    bool active;

    bool found_door;
    bool found_handle; // Should Cover this!
    MAYBE_TRUE_OR_FALSE have_handle;
    bool door_latched;
    bool doorway_clear;
    int last_checked_door; // Time for when we last checked the doorway

    // Target base pose for getting to on the other side of the doorway.
    float target_x;
    float target_y;
    float target_th;

    // Door state
    string frame_id;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;
  }

  DoorController(Mode _mode){
    super(_mode, "Holds");
    integrated = false;
  }

  DoorController(Mode _mode, bool _integrated){
    super(_mode, "Holds");
    integrated = _integrated;
  }
};


/**
 * This rule fires essentially a TR-style decision tree to select
 * the next action to take. The action choices are(in reverse order):
 * - ReleaseDoor
 * - OpenDoor
 * - GraspHandle
 * - MoveBase (x 2)
 * - OpenDoorWithoutGrasp
 * - DetectDoor
 * - DetectHandle
 * - CheckDoor
 *
 * Note the pattern that uses a flexible temporal interval for constraining the relationshop between the
 * completion time of the selected action, and the end time of this control step. This flexibility accounts for
 * the fact that an exogenous event can trip the state forcing a planned preemption of the active command, and the
 * completion of the command should also bring about a completion of the given control step
 */
DoorController::Holds {

  // Bind values for inactive case
  if(active == false){
    // Reset control flags
    eq(found_door, false);
    eq(found_handle, false);
    eq(have_handle, MAYBE);
    eq(door_latched, true);
    eq(doorway_clear, false);
    eq(last_checked_door, FORCE_DOOR_CHECK);
  }

  // If we are active, then we must evaluate different states based on current base, door , and handle state
  if(active == true){
    // Target data derived from move behavior
    contained_by(MoveBehavior.Active mb_active);
    eq(target_x, mb_active.x);
    eq(target_y, mb_active.y);
    eq(target_th, mb_active.th);
    // The end bound defined here provides a margin of error around the connection between the end time of the
    // command issued here, and the end time of the control step.
    int end_bounds;
    temporalDistance(end, [-1, 1], end_bounds);

    // Is the doorway clear? No special checks are required for this. We can do it any time
    if(doorway_clear == true){

      // If we do not have the handle then we are good to go, so we just terminate with success
      if(have_handle == FALSE){
	meets(MoveBehavior.Inactive mb_inactive);
	eq(mb_inactive.status, SUCCESS);
	eq(duration, 1);
      }
      else {
	// If true or maybe then we should release the door just to be safe. Could do a sensing action
	// but I am expecting that releasing the door doubles as a sensing action
	// ReleaseDoor([start, +inf], end + [-1, 1]] == Active;
	starts_before(ReleaseDoor.Active cmd);
	concurrent(cmd.end, end_bounds);
      }
    }

    if(doorway_clear == false){

      // We might want to recheck the doorway. Alternately we could include such an observation in the door
      // monitoring code.
      bool recheck_doorway;
      int elapsed_time_since_last_check;
      addEq(last_checked_door, elapsed_time_since_last_check, start);
      testLEQ(recheck_doorway, DOOR_CHECK_INTERVAL, elapsed_time_since_last_check);
      if(recheck_doorway == true){
	starts_before(CheckDoorway.Active cmd);
	concurrent(cmd.end, end_bounds);
	eq(cmd.x, target_x);
	eq(cmd.y, target_y);
	eq(cmd.th, target_th);
      }

      if(recheck_doorway == false){

	if(have_handle == TRUE) {
	  // OpenDoor(any, end_bounds] == Active();
	  starts_before(OpenDoor.Active cmd);
	  concurrent(cmd.end, end_bounds);
	}
	else {
	  // BaseState.Holds bs = base_state(start);
	  any(BaseState.Holds bs);
	  precedes(bs.start, start);
	  temporalDistance(start, [1 +inf], bs.end);

	  if(found_handle == true){
	    // Are we in a grasp position? Now is a good time to find out. We use the available door state message
	    float grasp_x, grasp_y, grasp_th;
	    door_get_robot_pose_for_door(grasp_x, grasp_y, grasp_th, door_p1_x, door_p1_y, door_p2_x, door_p2_y, GRASP_RANGE);

	    // @todo We should probably treat position and orientation seperately for tolerances
	    float distanceAway;
	    bool in_grasp_position; // True if far enough from the door to scan effectively, Can only be evaluated
	    calcDistance(distanceAway, bs.x, bs.y, bs.th, grasp_x, grasp_y, grasp_th);
	    testLEQ(in_grasp_position, distanceAway, GRASP_POSITION_ERROR);

	    if(in_grasp_position == true){
	      // GraspHandle(any, end_bounds] == Active();
	      starts_before(GraspHandle.Active cmd);
	      concurrent(cmd.end, end_bounds);
	    }
	    else {
	      // MoveBase(any, end_bounds] == Active();
	      starts_before(MoveBase.Active cmd);
	      concurrent(cmd.end, end_bounds);
	      eq(cmd.x, grasp_x);
	      eq(cmd.y, grasp_y);
	      eq(cmd.th, grasp_th);
	    }
	  }

	  if(found_handle == false){

	    if(found_door == true){
	      // DetectHandle(any, end_bounds] == Active()
	      starts_before(DetectHandle.Active cmd);
	      concurrent(cmd.end, end_bounds);
	    }
	    else {
	      MAP_KEY door_id; // The door id for this doorway
	      bool in_detection_position; // True if far enough from the door to scan effectively. Else false
	      // If we have not found the door, then we need to get the data from the topological map in order to locate the door
	      map_get_doorway_from_points(door_id, bs.x, bs.y, target_x, target_y);

	      // Read data from the topological map
	      map_get_door_state(this.object, door_id);
	      float detect_x, detect_y, detect_th;
	      door_get_robot_pose_for_door(detect_x, detect_y, detect_th, frame_p1_x, frame_p1_y, frame_p2_x, frame_p2_y, DETECTION_RANGE);
	      float distanceAway;
	      calcDistance(distanceAway, bs.x, bs.y, bs.th, detect_x, detect_y, detect_th);
	      testLEQ(in_detection_position, distanceAway, DETECTION_POSITION_ERROR);

	      if(in_detection_position == true){
		// DetectDoor(any, end_bounds] == Active();
		starts_before(DetectDoor.Active cmd);
		map_get_door_state(cmd.object, door_id);
		concurrent(cmd.end, end_bounds);
	      }
	      else {
		// MoveBase(any, end_bounds] == Active(detect_x, detect_y, detect_th);
		starts_before(MoveBase.Active cmd);
		concurrent(cmd.end, end_bounds);
		eq(cmd.x, detect_x);
		eq(cmd.y, detect_y);
		eq(cmd.th, detect_th);
	      }
	    }
	  }
	}
      }
    }
  }
}

/**
 * Defines update rule for default values
 */
DoorController::Holds{
  // We will assume default values on commitment based on predecessor. We really want these values to be bound. These values carry
  // forward from priors as they are updated by actions and we thus assume inertia
  met_by(Holds p);
  defaultOnCommit(active, p.active);
  defaultOnCommit(found_door, p.found_door);
  defaultOnCommit(found_handle, p.found_handle);
  defaultOnCommit(have_handle, p.have_handle);
  defaultOnCommit(door_latched, p.door_latched);
  defaultOnCommit(doorway_clear, p.doorway_clear);
  defaultOnCommit(last_checked_door, p.last_checked_door);

  // Door State Data
  defaultOnCommit(hinge, p.hinge);
  defaultOnCommit(rot_dir, p.rot_dir);
  defaultOnCommit(frame_p1_x, p.frame_p1_x);
  defaultOnCommit(frame_p1_y, p.frame_p1_y);
  defaultOnCommit(frame_p1_z, p.frame_p1_z);
  defaultOnCommit(frame_p2_x, p.frame_p2_x);
  defaultOnCommit(frame_p2_y, p.frame_p2_y);
  defaultOnCommit(frame_p2_z, p.frame_p2_z);
  defaultOnCommit(door_p1_x, p.door_p1_x);
  defaultOnCommit(door_p1_y, p.door_p1_y);
  defaultOnCommit(door_p1_z, p.door_p1_z);
  defaultOnCommit(door_p2_x, p.door_p2_x);
  defaultOnCommit(door_p2_y, p.door_p2_y);
  defaultOnCommit(door_p2_z, p.door_p2_z);
  defaultOnCommit(height, p.height);
  defaultOnCommit(hinge, p.hinge);
  defaultOnCommit(rot_dir, p.rot_dir);
  defaultOnCommit(handle_x, p.handle_x);
  defaultOnCommit(handle_y, p.handle_y);
  defaultOnCommit(handle_z, p.handle_z);
}

/************************************************************************
 * Now we define how actions update the door controller by setting
 * feedback parameters on success or failure
 ***********************************************************************/

// Derive input bounds form the behavior
DoorManipulationBehavior::Active{
  // DoorController(start) == Holds(door_state);
  any(DoorController.Holds dc);
  precedes(dc.start, start);
  temporalDistance(start, [1 +inf], dc.end);
  get_state(this.object, dc.object);
}

DoorManipulationBehavior::Inactive{
  // If successful, then the completion of the action starts a new step in the controller
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.active, true);
    get_state(dc.object, this.object);
  }
}

ReleaseDoor::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.have_handle, FALSE);
    eq(dc.last_checked_door, FORCE_DOOR_CHECK);
  }
}

OpenDoor::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.last_checked_door, FORCE_DOOR_CHECK);
    eq(dc.have_handle, TRUE);
  }
}

GraspHandle::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.have_handle, TRUE);
    eq(dc.last_checked_door, start);
  }
}

OpenDoorWithoutGrasp::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.last_checked_door, FORCE_DOOR_CHECK);
  }
}

DetectDoor::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.found_door, true);
    eq(dc.found_handle, true);
  }
}

CheckDoorway::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.doorway_clear, doorway_clear);
    eq(dc.door_latched, door_latched);
    eq(dc.last_checked_door, start);
  }
}

// Internal - controller must be allocated separately
MoveBehavior doorman = new MoveBehavior(Internal, true);
