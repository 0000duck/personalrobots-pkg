#include "doors/imports.nddl"

class DoorState extends AgentTimeline {

  predicate Holds{
    // Door state
    string frame_id;
    float time_stamp;

    /**
     * The following is essentially a Door message data structure. If we add support for 'struct'
     * in NDDL then we can declare structured data types that directly map to the relevant ROS message types.
     * This will be a generally useful feature of the language and will also make auto-generated NDDL/ROS
     * bindings straightforward. Absent that structure, we would have to capture structure through nomenclature.
     */

    // Overall latched state
    LatchState latch_state;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;

    // Normal data
    float normal_x;
    float normal_y;
    float normal_z;
  }

  DoorState(){
    super(Internal, "Holds");
  }
};

/**
 * This is an internal controller which will select actions for execution based on control state variables using a
 * Teleo-reactive tree structure.
 */
class DoorController extends AgentTimeline {

  /**
   * The parameters here 
   */
  predicate Holds{
    bool active;

    // Control variables
    bool arms_tucked;
    bool in_position;
    bool found_door;
    bool must_find_handle;
    bool have_handle;
    bool doorway_clear;
    bool check_doorway;
    bool finishing;
    LatchState latch_state;
  }

  DoorController(){
    super(Internal, "Holds");
  }
};


MoveBehavior doorman = new MoveBehavior(Internal, true);
DoorController door_controller = new DoorController();
DoorState door_state = new DoorState();

/**
 * Set default values for soor state. These will be set on activation. If the door state is update explcitly then these
 * values will already be filled out
 */
DoorState::Holds{
  defaultOnCommit(frame_id, "map");
  defaultOnCommit(latch_state, UNKNOWN);
  defaultOnCommit(frame_p1_x, 0.0);
  defaultOnCommit(frame_p1_y, 0.0);
  defaultOnCommit(frame_p1_z, 0.0);
  defaultOnCommit(frame_p2_x, 0.0);
  defaultOnCommit(frame_p2_y, 0.0);
  defaultOnCommit(frame_p2_z, 0.0);
  defaultOnCommit(door_p1_x, 0.0);
  defaultOnCommit(door_p1_y, 0.0);
  defaultOnCommit(door_p1_z, 0.0);
  defaultOnCommit(door_p2_x, 0.0);
  defaultOnCommit(door_p2_y, 0.0);
  defaultOnCommit(door_p2_z, 0.0);
  defaultOnCommit(height, 0.0);
  defaultOnCommit(hinge, UNKNOWN);
  defaultOnCommit(rot_dir, UNKNOWN);
  defaultOnCommit(handle_x, 0.0);
  defaultOnCommit(handle_y, 0.0);
  defaultOnCommit(handle_z, 0.0);
  defaultOnCommit(normal_x, 0.0);
  defaultOnCommit(normal_y, 0.0);
  defaultOnCommit(normal_z, 0.0);
}

DoorController::Holds{
  // Bind values for inactive case
  if(active == false){
    // Reset control flags
    eq(arms_tucked, false);
    eq(in_position, false);
    eq(found_door, false);
    eq(must_find_handle, true);
    eq(have_handle, false);
    eq(latch_state, UNKNOWN);
    eq(doorway_clear, false);
    eq(check_doorway, true);
    eq(finishing, false);
    contained_by(doorman.Inactive);
  }

  // We will assume default values on commitment based on predecessor. We really want these values to be bound. These values carry
  // forward from priors as they are updated by actions and we thus assume inertia (if we had the handle before and have no information
  // to the contrary, then we still have the handle).
  met_by(Holds p);
  defaultOnCommit(active, p.active);
  defaultOnCommit(arms_tucked, p.arms_tucked);
  defaultOnCommit(found_door, p.found_door);
  defaultOnCommit(in_position, p.in_position);
  defaultOnCommit(must_find_handle, p.must_find_handle);
  defaultOnCommit(have_handle, p.have_handle);
  defaultOnCommit(latch_state, p.latch_state);
  defaultOnCommit(doorway_clear, p.doorway_clear);
  defaultOnCommit(check_doorway, p.check_doorway);
  defaultOnCommit(finishing, p.finishing);
}

DoorController::Holds {
  if(active == true){
    if(have_handle == false){
      if(arms_tucked == true){
	if(doorway_clear == true){
	  meets(Holds s);
	  eq(s.active, false);
	  meets(doorman.Inactive dm);
	  eq(dm.status, SUCCESS);
	  eq(duration, 1);
	}
	if(latch_state == LATCH_STATE_LOCKED){
	  meets(Holds s);
	  eq(s.active, false);
	  meets(doorman.Inactive dm);
	  eq(dm.status, ABORTED);
	  eq(duration, 1);
	}
      }
    }
  }
}

/**
 * This rule fires essentially a TR-style decision tree to select
 * the next action to take. The action choices are(in reverse order):
 * - release_handle
 * - check_path
 * - open_door
 * - push_door
 * - touch_door
 * - move_base_door
 * - unlatch_handle
 * - grasp_handle
 * - detect_handle
 * - move_base_local
 * - detect_door
 * - move_base_local
 *
 */
DoorController::Holds {
  contained_by(door_state.Holds ds);

  if(active == true){
    meets(Holds s);
    if(finishing == true){
      if(have_handle == false){
	if(arms_tucked == false){
	  contains_start(doors_tuck_arms.Active cmd);
	  concurrent(cmd.end, end);
	}
      }
      else{
	contains_start(release_handle.Active cmd);
	concurrent(cmd.end, end);
      }
    }
    else{
      if(check_doorway == true){
	contains_start(check_path.Active cmd);
	concurrent(cmd.end, end);
	eq(cmd.frame_id, ds.frame_id);
	door_get_robot_pose_for_door(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, ds.object, DOORWAY_CLEARANCE_RANGE);
      }
      else {
	if(must_find_handle == false){
	  if(in_position == true){
	    if(latch_state == LATCH_STATE_UNLATCHED) {	
	      // Moving the base set up here. Used in either case
	      contains_start(move_base_door.Active cmd_move_base_door);
	      concurrent(cmd_move_base_door.end, end);

	      // Set up a preemption as needed. Will make this conditional shortly
	      any(stop_action.Active cmd_stop_action);
	      cmd_move_base_door before cmd_stop_action;

	      if(have_handle == true){
		contains_start(open_door.Active cmd_open_door);
		cmd_open_door starts_before cmd_move_base_door;
		eq(cmd_stop_action.action_name,"open_door");
	      }
	      else {
		contains_start(touch_door.Active cmd_touch_door);
		contains_start(push_door.Active cmd_push_door);

		cmd_touch_door before cmd_push_door;
		cmd_push_door starts_before cmd_move_base_door;
		eq(cmd_stop_action.action_name,"push_door");

		// By starting this action we can cause the arms to become untucked
		eq(s.arms_tucked, false);
	      }
	    }
	    else{
	      if(have_handle == true){
		contains_start(unlatch_handle.Active cmd);
		concurrent(cmd.end, end);
	      }
	      else {
		// Don't have the handle, but could grasp it!
		contains_start(grasp_handle.Active cmd);
		concurrent(cmd.end, end);

		// By starting this action we can cause the arms to become untucked
		eq(s.arms_tucked, false);
	      }
	    }
	  }
	  else { // Not in position
	    // Move to the grasp position. Checking to tuck arms may be unnecessary
	    if(arms_tucked == true){
	      contains_start(move_base_local.Active cmd);
	      concurrent(cmd.end, end);
	      eq(cmd.frame_id, ds.frame_id);
	      door_get_robot_pose_for_door(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, ds.object, GRASP_RANGE);
	    }
	    else {
	      contains_start(doors_tuck_arms.Active cmd);
	      concurrent(cmd.end, end);
	    }
	  }
	}
	else { // Found handle == false
	  if(found_door == true){
	    contains_start(detect_handle.Active cmd);
	    concurrent(cmd.end, end);
	  }
	  else {
	    // If in detection position, we can detect the door
	    if(in_position == true){
	      contains_start(detect_door.Active cmd);
	      concurrent(cmd.end, end);
	    }
	    else {
	      // Should move to detection position
	      if(arms_tucked == true){
		contains_start(move_base_local.Active cmd);
		concurrent(cmd.end, end);
		eq(cmd.frame_id, ds.frame_id);
		door_get_robot_pose_for_door(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, ds.object, DETECTION_RANGE);
	      }
	      else {
		contains_start(doors_tuck_arms.Active cmd);
		concurrent(cmd.end, end);
	      }
	    }
	  }
	}
      }
    }
  }
}

/************************************************************************
 * Now we define how actions update the door controller by setting
 * feedback parameters on success or failure
 ***********************************************************************/

// Derive input bounds from the behavior
DoorManipulationBehavior::Active{
  starts_during(DoorState.Holds ds);
  eq_door_msg(this.object, ds.object);
}

DoorsTuckArms::Inactive {
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.arms_tucked, true);
  }
}

ReleaseHandle::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.have_handle, false);
  }
}

MoveBaseDoor::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.doorway_clear, true);
    eq(dc.finishing, true);
  }
}

UnlatchHandle::Inactive{
  if(status == SUCCESS){
    starts(DoorState.Holds ds);
    eq_door_msg(ds.object, this.object);
    starts(DoorController.Holds dc);
    eq(dc.latch_state, LATCH_STATE_UNLATCHED);
  }
  else{
    if(status == UNDEFINED){}
    else{
      starts(DoorController.Holds dc);
      eq(dc.must_find_handle, true);
      eq(dc.in_position, false);
      eq(dc.latch_state, latch_state);
      if(latch_state == LATCH_STATE_LOCKED){
	eq(dc.finishing, true);
      }
    }
  }
}

GraspHandle::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.have_handle, true);
  }
}

DetectHandle::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.must_find_handle, false);
    starts(DoorState.Holds ds);
    eq_door_msg(ds.object, this.object);
    eq(dc.latch_state, ds.latch_state);
  }
  else {
    if(status == UNDEFINED){}
    else {
      starts(DoorController.Holds dc);
      eq(dc.in_position, false);
      eq(dc.found_door, false);
    }
  }
}

DetectDoor::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.found_door, true);
    eq(dc.in_position, false);
    starts(DoorState.Holds ds);
    eq_door_msg(ds.object, this.object);
    eq(dc.latch_state, ds.latch_state);

    if(latch_state == LATCH_STATE_UNLATCHED){
      eq(dc.must_find_handle, false);
    }

    if(latch_state == LATCH_STATE_LOCKED){
      eq(dc.finishing, true);
    }
  }
}

CheckPath::Inactive{
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.doorway_clear, false);
    eq(dc.check_doorway, false);
  }
}

MoveBase::Inactive {
  if(status == SUCCESS){
    starts(DoorController.Holds dc);
    eq(dc.in_position, true);
  }
}
