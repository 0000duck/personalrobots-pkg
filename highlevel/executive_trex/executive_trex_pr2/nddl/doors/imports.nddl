// Subsystems
#include "TREX.nddl"
#include "constraints.nddl"
#include "rcs/exports.nddl"
#include "rcs/nav/exports.nddl"
#include "rcs/doors/exports.nddl"
#include "mechanism_control/exports.nddl"
#include "safety/exports.nddl"
#include "rcs/safety/exports.nddl"
#include "rcs/doors/controllers.nddl"
#include "nav/nav.nddl"
#include "world_model/topological_map.nddl"

/** External Functions to be integrated **/

/**
 * @brief Obtain the base position a given distance normal to the door frame. Need the current position?
 */
constraint  door_get_robot_pose_for_door(x, y, th, token_object, distance){
  x <: numeric && y <: x && th <: x && token_object <: Object && distance <: x
}

// Compute the x, y, th base position based on the position and orientation of the door frame. Perhaps
// we just want to use the 2 points for the door, or door frame. Why can z be greater than 0?
constraint get_door_detection_base_position(x, y, th, door_x1, door_y1, door_x2, door_y2);

// Given a current position, and a target handle position, compute a goal base position to enable a grasp
constraint get_door_grasp_base_position(x, y, th, door_x1, door_y1, door_x2, door_y2);

// Safety
MobilityStatus mobility_status = new MobilityStatus(External);

// External RCS state variables
BaseState base_state = new BaseState(External);

// External RCS Highlevel controllers
SafetyTuckArms safety_tuck_arms = new SafetyTuckArms(External);
MoveBase move_base = new MoveBase(External);
ReleaseDoor release_door = new ReleaseDoor(External);
OpenDoor open_door = new OpenDoor(External);
GraspHandle grasp_handle = new GraspHandle(External);
DetectHandle detect_handle = new DetectHandle(External);
DetectDoor detect_door = new DetectDoor(External);
OpenDoorWithoutGrasp open_door_without_grasp = new OpenDoorWithoutGrasp(External);
CheckDoorway check_doorway = new CheckDoorway(External);
NotifyDoorBlocked notify_door_blocked = new NotifyDoorBlocked(External);





