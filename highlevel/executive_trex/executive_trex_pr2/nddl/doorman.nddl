/*
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// TREX base class declaration and definitions
#include "TREX.nddl"

// Exports from sub-systems
#include "rcs.exports.nddl"
#include "rcs.exports.doorman.nddl"
#include "doorman.exports.nddl"
#include "safety.exports.nddl"
#include "nav.nddl"

typedef int [-1, 1] TIME_ERROR_BOUND;


/**
 * This is an internal controller which will monitor state variables and HLC status. It can also generate
 * next steps for this meta level control. This pattern exploits reactive planning based on feedback from the
 * environment.
 */
class DoorController extends AgentTimeline {

  /**
   * The parameters here 
   */
  predicate Holds{
    bool active;

    bool in_detection_position; // True if far enough from the door to scan effectively. Else false
    bool in_grasp_position; // True if far enough from the door to scan effectively, Can only be evaluated
    bool found_door;
    bool found_handle; // Should Cover this!
    bool have_handle;
    bool door_locked;
    bool doorway_clear;
    int last_checked_door; // Time for when we last checked the doorway
  }

  DoorController(Mode _mode){
    super(_mode);
  }
};


MoveBehavior::Inactive {
  equals(DoorController.Holds dc);
  eq(dc.active, false);
}

MoveBehavior::Active {
  starts(DoorController.Holds dc);

  // Initialize controller variables. We begin by assuming the worst. Note that the test for being in detection
  // position is derived from base state data directly and thus not subject to setting as a free control variable
  eq(dc.active, true);
  eq(dc.in_grasp_position, false);
  eq(dc.found_door, false);
  eq(dc.found_handle, false);
  eq(dc.have_handle, false);
  eq(dc.door_locked, false);
  eq(dc.doorway_clear, false);
  eq(dc.last_checked_door, 0);
}

/**
 * This rule fires essentially a TR-style decision tree to select
 * the next action to take. The action choices are(in reverse order):
 * - ReleaseDoor
 * - OpenDoorWithGrasp
 * - TwistHandle
 * - GraspHandle
 * - MoveBase (x 2)
 * - OpenDoorWithoutGrasp
 * - DetectDoor
 * - CheckDoor
 *
 * Note the pattern that uses a flexible temporal interval for constraining the relationshop between the
 * completion time of the selected action, and the end time of this control step. This flexibility accounts for
 * the fact that an exogenous event can trip the state forcing a planned preemption of the active command, and the
 * completion of the command should also bring about a completion of the given control step
 */
DoorController::Holds {
  // While this controller is inactive, then the doorman is also inactive
  if(active == false){
    contained_by(MoveBehavior.Inactive);
  }

  // If we are active, then we must evaluate different states based on current base, door , and handle state
  if(active == true){
    // Doorman(all) == active   
    contained_by(MoveBehavior.Active dm);

    // We will assume default values on commitment based on predecessor.
    met_by(Holds p);
    defaultOnCommit(in_grasp_position, p.in_grasp_position);
    defaultOnCommit(found_door, p.found_door);
    defaultOnCommit(found_handle, p.found_handle);
    defaultOnCommit(door_locked, p.door_locked);
    defaultOnCommit(doorway_clear, p.doorway_clear);
    defaultOnCommit(last_checked_door, p.last_checked_door);

    // Control flag for successor state
    bool done;
    defaultOnCommit(done, false);

    // The successor state active is the negation of done
    meets(Holds s);
    neq(s.active, done);

    // Evaluate condition variables based on input states.
    // BaseState.Holds(start) bs;
    // DoorState.Holds(start) ds;
    // HandleState.Holds(start) hs;
    starts_during(BaseState.Holds bs);

    // @todo Compute if within detection position

    // The end bound defined here provides a margin of error around the connection between the end time of the
    // command issued here, and the end time of the control step.
    int end_bounds;
    temporalDistance(end, [-1, 1], end_bounds);


    // Is the doorway clear? No special checks are required for this. We can do it any time
    if(doorway_clear == true){
      
      if(have_handle == true){
	// ReleaseDoor(?, end + [-1, 1]] == Active;
	any(ReleaseDoor.Active cmd);
	concurrent(cmd.end, end_bounds);
      }

      // If we do not have the handle then we are clear. Done.
      if(have_handle == false){
	eq(done, true);
      }
    }

    if(doorway_clear == false){

      // We might want to recheck the doorway. Alternately we could include such an observation in the door
      // monitoring code.
      bool recheck_doorway;
      int elapsed_time_since_last_check;
      addEq(last_checked_door, elapsed_time_since_last_check, start);
      testLEQ(recheck_doorway, DOOR_CHECK_INTERVAL, elapsed_time_since_last_check);
      if(recheck_doorway == true){
	eq(s.last_checked_door, s.start);
	any(CheckDoorway.Active cmd);
	concurrent(cmd.end, end_bounds);
      }

      if(recheck_doorway == false){

	if(have_handle == true) {

	  if(door_locked == false){
	    // OpenDoorWithGrasp(?, end_bounds] == Active(SUCCESS);
	    any(OpenDoorWithGrasp.Active cmd);
	    concurrent(cmd.end, end_bounds);
	  }

	  if(door_locked == true){
	    // TwistHandle(?, end_bounds] == Active(SUCCESS);
	    any(TwistHandle.Active cmd);
	    concurrent(cmd.end, end_bounds);
	  }

	}

	if(have_handle == false){

	  if(found_handle == true){	  

	    if(in_grasp_position == true){
	      // GraspHandle(?, end_bounds] == Active(SUCCESS);
	      any(GraspHandle.Active cmd);
	      concurrent(cmd.end, end_bounds);
	    }

	    if(in_grasp_position == false){
	      // MoveBase(?, end_bounds] == Active(SUCCESS);
	      any(MoveBase.Active cmd);
	      concurrent(cmd.end, end_bounds);
	    }

	  }

	  if(found_handle == false){

	    if(found_door == true){

	      if(door_locked == true){
		// We are screwed for now.
		eq(s.active, false);
	      }

	      if(door_locked == false){
		// OpenDoorWithoutGrasp(?, end_bounds] == Active(SUCCESS);
		any(OpenDoorWithoutGrasp.Active cmd);
		concurrent(cmd.end, end_bounds);
	      }

	    }

	    if(found_door == false){
	    
	      if(in_detection_position == true){
		// DetectDoor(?, end_bounds] == Active(SUCCESS);
		any(DetectDoor.Active cmd);
		concurrent(cmd.end, end_bounds);

	      }

	      if(in_detection_position == false){
		// MoveBase(?, end_bounds] == Active(SUCCESS, ...);
		any(MoveBase.Active cmd);
		concurrent(cmd.end, end_bounds);
	      }
	    }
	  }
	}
      }
    }
  }
}

CheckDoorway::Inactive{

  // Update door controller with feedback
  any(DoorController.Holds dc);
  TIME_ERROR_BOUND error;
  temporalDistance(dc.start, error, start);

  if(status == SUCCESS){
    eq(dc.doorway_clear, doorway_clear);
  }
  else {
    eq(dc.doorway_clear, false);
  }
}

DetectDoor::Inactive{

  // Update door controller with feedback
  any(DoorController.Holds dc);
  TIME_ERROR_BOUND error;
  temporalDistance(dc.start, error, start);

  // If successful, update the state with feedback. Note that at this point we could
  // set values for door and handle state. On the other hand, we could also just
  // start a door detector
  if(status == SUCCESS){
    eq(dc.found_door, found_door);
    eq(dc.found_handle, found_handle);

    if(found_door == true){
      eq(dc.in_detection_position, true);
    }

  }
  else {
    eq(dc.found_door, false);
    eq(dc.found_handle, false);
    eq(dc.in_detection_position, false);
  }
}


OpenDoorWithoutGrasp::Inactive{
  // Update door controller with feedback
  any(DoorController.Holds dc);
  TIME_ERROR_BOUND error;
  temporalDistance(dc.start, error, start);
  
  // If successful, there is nothing really to do, since it will depend on the CheckDoorway
  // behavior finding the clear path. What we can do is reset the last checked time to 0
  if(status == SUCCESS){
    eq(dc.last_checked_door, 0);
  }
  else { // Trigger a reset?
    eq(dc.found_door, false);
    eq(dc.found_handle, false);
    eq(dc.in_detection_position, false);

  }
}

// Internal
MoveBehavior doorman = new MoveBehavior(Internal, true);
DoorController door_controller = new DoorController(Internal);

// Safety
MobilityStatus mobility_status = new MobilityStatus(External);

// External RCS state variables
BaseState base_state = new BaseState(External);
HandleState handle_state = new HandleState(External);
DoorState door_state = new DoorState(External);

// External RCS Highlevel controllers
MoveBase move_base = new MoveBase(External);
ReleaseDoor release_door = new ReleaseDoor(External);
OpenDoorWithGrasp open_door_with_grasp = new OpenDoorWithGrasp(External);
TwistHandle twist_handle = new TwistHandle(External);
GraspHandle grasp_handle = new GraspHandle(External);
OpenDoorWithoutGrasp open_door_without_grasp = new OpenDoorWithoutGrasp(External);
DetectDoor detect_door = new DetectDoor(External);
CheckDoorway check_door = new CheckDoorway(External);
