#include "plugs/imports.nddl"

enum BOOL {yes, no, maybe};

class PlugState extends AgentTimeline {
  predicate Holds{
    string frame_id;
    float time_stamp;
    bool stowed;
    float x;
    float y;
    float z;
  }

  PlugState(){super(Internal, "Holds");}
};

class OutletState extends AgentTimeline {
  predicate Holds{
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
  }

  OutletState(){super(Internal, "Holds");}
};

class RechargeController extends AgentTimeline {

  predicate Holds {
    bool active;
    bool in_position;
    bool outlet_detected_coarse;
    bool outlet_detected_fine;
    bool arms_tucked;
    bool recharged;
    BOOL plug_is_stowed;
    bool ready_to_plug_in;
    bool plug_in_hand;
    bool plugged_in;
    bool ready_to_grasp;
  }
  
  RechargeController(){ super(Internal, "Holds"); }
};

// Internal Timelines
OutletState outlet_state = new OutletState();
PlugState plug_state = new PlugState();
Recharger recharger = new Recharger(Internal);
RechargeController recharge_controller = new RechargeController();

/**
 * Main control loop
 */
RechargeController::Holds {
  if(active == false){
    eq(in_position, false);
    eq(outlet_detected_coarse, false);
    eq(outlet_detected_fine, false);
    eq(arms_tucked, false);
    eq(recharged, false);
    eq(plug_is_stowed, maybe);
    eq(ready_to_plug_in, false);
    eq(plug_in_hand, false);
    eq(plugged_in, false);
    eq(ready_to_grasp, false);
    contained_by(recharger.Inactive);
  }
  else {
    // The end bound defined here provides a margin of uncertainty around the connection between the end time of the
    // command issued here, and the end time of the control step. The action may end the step, or the step may cause preemption of the action. This
    // assumes we can process a PREMPTION quickly enough
    int end_bounds;
    temporalDistance(end, [-1, 1], end_bounds);

    if(recharged == true){
      // handle the logic for finishing up
      if(plug_is_stowed == yes){
	meets(Recharger.Inactive rc_inactive);
	eq(rc_inactive.status, SUCCESS);
	eq(duration, 1);
	meets(Holds s);
	eq(s.active, false);
      }
      else{
	if(plug_is_stowed == maybe){
	  starts_before(detect_plug_on_base.Active cmd);
	  concurrent(cmd.end, end_bounds);
	}
	else {
	  if(plugged_in == false){
	    starts_before(stow_plug.Active cmd);
	    concurrent(cmd.end, end_bounds);
	  }
	  else {
	    starts_before(unplug.Active cmd);
	    concurrent(cmd.end, end_bounds);
	  }
	}
      }
    }
    else {
      if(ready_to_plug_in == true){
	starts_before(plug_in.Active cmd);
	concurrent(cmd.end, end_bounds);
      }
      else {
	if(outlet_detected_fine == true){
	  starts_before(localize_plug_in_gripper.Active cmd);
	  concurrent(cmd.end, end_bounds);
	}
	else {
	  if(plug_in_hand == true){
	    starts_before(detect_outlet_fine.Active cmd);
	    concurrent(cmd.end, end_bounds);
	  }
	  else {
	    if(outlet_detected_coarse == true){
	      if(in_position == false){
		// Here, compute parameters based on the DETECTION_RANGE
		starts_before(move_base_local.Active cmd);
		concurrent(cmd.end, end_bounds);
	      }
	      else {
		if(ready_to_grasp == true){
		  starts_before(move_and_grasp_plug.Active cmd);
		  concurrent(cmd.end, end_bounds);
		}
		else {
		  if(plug_is_stowed == maybe){
		    if(arms_tucked == false){
		      starts_before(detect_plug_on_base.Active cmd);
		      concurrent(cmd.end, end_bounds);
		    }
		    else {
		      starts_before(plugs_untuck_arms.Active cmd);
		      concurrent(cmd.end, end_bounds);
		    }
		  }
		}
	      }
	    }
	    else {
	      if(in_position == true){
		starts_before(detect_outlet_coarse.Active cmd);
		concurrent(cmd.end, end_bounds);
	      }
	      else {
		if(arms_tucked == true){
		  // Here, compute parameters based on the PLUG_IN_RANGE
		  starts_before(move_base_local.Active cmd);
		  concurrent(cmd.end, end_bounds);
		}
		else {
		  starts_before(safety_tuck_arms.Active cmd);
		  concurrent(cmd.end, end_bounds);
		}
	      }
	    }
	  }
	}
      }
    }
  }
}

/**
 * Default Handling
 */
RechargeController::Holds {
  met_by(Holds p);

  // Control State
  defaultOnCommit(active, p.active);
  defaultOnCommit(in_position, p.in_position);
  defaultOnCommit(outlet_detected_coarse, p.outlet_detected_coarse);
  defaultOnCommit(outlet_detected_fine, p.outlet_detected_fine);
  defaultOnCommit(arms_tucked, p.arms_tucked);
  defaultOnCommit(recharged, p.recharged);
  defaultOnCommit(plug_is_stowed, p.plug_is_stowed);
  defaultOnCommit(ready_to_plug_in, p.ready_to_plug_in);
  defaultOnCommit(plug_in_hand, p.plug_in_hand);
  defaultOnCommit(plugged_in, p.plugged_in);
  defaultOnCommit(ready_to_grasp, p.ready_to_grasp);
}

/**************************************************
 * Update Rules
 *************************************************/

SafetyTuckArms::Inactive {
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.arms_tucked, true);
  }
}

MoveBase::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.in_position, true);
  }
}

DetectPlugOnBase::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plug_is_stowed, yes);
    eq(rc.ready_to_grasp, true);

    // Update PlugState
    starts(plug_state.Holds ps);
    eq_plug_stow_msg(ps.object, object);
  }
}

PlugsUntuckArms::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.arms_tucked, false);
  }
}

StowPlug::Active{
  starts_during(plug_state.Holds ps);
  eq_plug_stow_msg(ps.object, object);
}

// If we stow successfully, declare maybe. Requires confirmation!
StowPlug::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plug_is_stowed, maybe);
    eq(rc.plug_in_hand, false);
  }
}

Unplug::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plugged_in, false);
  }
}

PlugIn::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plugged_in, true);
    eq(rc.recharged, true);
  }
}


DetectOutletFine::Active{
  starts_during(outlet_state.Holds os);
  eq_point_msg(os.object, object);
}

DetectOutletFine::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.outlet_detected_fine, true);

    starts(outlet_state.Holds os);
    eq_pose_msg(os.object, object);
  }
}

DetectOutletCoarse::Active{
  starts_during(outlet_state.Holds os);
  eq_point_msg(os.object, object);
}

DetectOutletCoarse::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.outlet_detected_coarse, true);
    eq(rc.in_position, false);

    starts(outlet_state.Holds os);
    eq_pose_msg(os.object, object);
  }
}

LocalizePlugInGripper::Active{
  starts_during(outlet_state.Holds os);
  eq_pose_msg(os.object, object);
}

LocalizePlugInGripper::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.ready_to_plug_in, true);
  }
}

MoveAndGraspPlug::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.arms_tucked, false);
    eq(rc.plug_in_hand, true);
    eq(rc.ready_to_grasp, false);
    eq(rc.plug_is_stowed, no);
  }
}
