#include "plugs/imports.nddl"

enum BOOL {yes, no, maybe};

/**
 * @todo Get better default values
 */
class PlugState extends AgentTimeline {
  predicate Holds{
    string frame_id;
    float time_stamp;
    bool stowed;
    float x;
    float y;
    float z;
    defaultOnCommit(frame_id, "base_footprint");
    defaultOnCommit(stowed, true);
    defaultOnCommit(x, 0.0);
    defaultOnCommit(y, 0.0);
    defaultOnCommit(z, 0.0);
  }

  PlugState(){super(Internal, "Holds");}
};

class OutletState extends AgentTimeline {
  predicate Holds{
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
    defaultOnCommit(frame_id, "base_footprint");
    defaultOnCommit(x, 3.0);
    defaultOnCommit(y, 0.0);
    defaultOnCommit(z, 0.0);
    defaultOnCommit(qx, 0.0);
    defaultOnCommit(qy, 0.0);
    defaultOnCommit(qz, 0.0);
    defaultOnCommit(qw, 1.0);

  }

  OutletState(){super(Internal, "Holds");}
};

class RechargeController extends AgentTimeline {

  predicate Holds {
    bool active;
    bool in_position;
    bool outlet_detected_coarse;
    bool outlet_detected_fine;
    bool recharged;
    BOOL plug_is_stowed;
    bool ready_to_plug_in;
    bool plug_in_hand;
    bool plugged_in;
    bool ready_to_grasp;
    bool arms_clear;
  }
  
  RechargeController(){ super(Internal, "Holds"); }
};

// Internal Timelines
OutletState outlet_state = new OutletState();
PlugState plug_state = new PlugState();
Recharger recharger = new Recharger(Internal);
RechargeController recharge_controller = new RechargeController();

// Initialize controller to inactive
fact(recharge_controller.Holds rc_initial_state);
rc_initial_state.active = false;

RechargeController::Holds{
  if(active == false){
    eq(in_position, false);
    eq(outlet_detected_coarse, false);
    eq(outlet_detected_fine, false);
    eq(recharged, false);
    eq(plug_is_stowed, maybe);
    eq(ready_to_plug_in, false);
    eq(plug_in_hand, false);
    eq(plugged_in, false);
    eq(ready_to_grasp, false);
    eq(arms_clear, false);
    contained_by(recharger.Inactive);
    equals(outlet_state.Holds);
    equals(plug_state.Holds);
  }

  met_by(Holds p);
  defaultOnCommit(active, p.active);
  defaultOnCommit(in_position, p.in_position);
  defaultOnCommit(outlet_detected_coarse, p.outlet_detected_coarse);
  defaultOnCommit(outlet_detected_fine, p.outlet_detected_fine);
  defaultOnCommit(recharged, p.recharged);
  defaultOnCommit(plug_is_stowed, p.plug_is_stowed);
  defaultOnCommit(ready_to_plug_in, p.ready_to_plug_in);
  defaultOnCommit(plug_in_hand, p.plug_in_hand);
  defaultOnCommit(plugged_in, p.plugged_in);
  defaultOnCommit(ready_to_grasp, p.ready_to_grasp);
  defaultOnCommit(arms_clear, p.arms_clear);
}

/**
 * Main control loop
 */
RechargeController::Holds {
  if(active == true){
    // Derive arms_tucked from external safety monotor
    bool arms_tucked;
    starts_during(mobility_status.Holds mb);
    eq(arms_tucked, mb.arms_tucked);
    meets(Holds s); // Successor

    // Should be active. Get outlet param from it. Only require that for local navigation
    contained_by(recharger.Active rc_active);

    // Link to plug and outlet state
    starts_during(outlet_state.Holds os);
    starts_during(plug_state.Holds ps);

    if(recharged == true){

      if(plug_is_stowed == yes){
        if (arms_tucked == true) {
          meets(recharger.Inactive rc_inactive);
          eq(rc_inactive.status, SUCCESS);
          eq(duration, 1);
          eq(s.active, false);
        }
        else {
          contains_start(safety_tuck_arms.Active cmd);
        }
      }
      else{
	if(plug_is_stowed == maybe){
	  contains_start(detect_plug_on_base.Active cmd);
	  concurrent(cmd.end, end);
	}
	else {
	  if(plugged_in == false){
	    contains_start(stow_plug.Active cmd);
	    concurrent(cmd.end, end);
	  }
	  else {
	    contains_start(unplug.Active cmd);
	    concurrent(cmd.end, end);
	  }
	}
      }
    }
    else {
      if(ready_to_plug_in == true){
	contains_start(plug_in.Active cmd);
	concurrent(cmd.end, end);
      }
      else {
	if(outlet_detected_fine == true){
	  contains_start(localize_plug_in_gripper.Active cmd);
	  concurrent(cmd.end, end);
	}
	else {
	  if(plug_in_hand == true){
	    contains_start(detect_outlet_fine.Active cmd);
            eq(cmd.x, os.x);
            eq(cmd.y, os.y);
            eq(cmd.z, os.z);
            eq(cmd.frame_id, os.frame_id);
	    concurrent(cmd.end, end);
            
	  }
	  else {
	    if(outlet_detected_coarse == true){
	      if(in_position == false){
		contains_start(move_base_local.Active cmd);
		// TODO ; Constraint should have inputs after outputs
                plugs_get_offset_pose(os.x, os.y, os.z, os.qx, os.qy, os.qz, os.qw, 0.5, 
				      cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy,cmd.qz, cmd.qw);

                eq(cmd.frame_id, os.frame_id);
		concurrent(cmd.end, end);
	      }
	      else {
		if(ready_to_grasp == true){
		  contains_start(move_and_grasp_plug.Active cmd);
                  eq(cmd.x, ps.x);
                  eq(cmd.y, ps.y);
                  eq(cmd.z, ps.z);
                  eq(cmd.frame_id, ps.frame_id);
		  concurrent(cmd.end, end);
		}
		else {

		  if(arms_clear == true){
		    contains_start(detect_plug_on_base.Active cmd);
		    concurrent(cmd.end, end);
		  }
		  else {
		    contains_start(plugs_untuck_arms.Active cmd);
		    concurrent(cmd.end, end);
		  }
		}
	      }
	    }
	    else {
	      if(in_position == true){
		contains_start(detect_outlet_coarse.Active cmd);
		concurrent(cmd.end, end);
	      }
	      else {
		if(arms_tucked == true){
		  // Here, derive parameters from the map
		  contains_start(move_base_local.Active cmd);
                  map_get_outlet_approach_pose(cmd.x, cmd.y, cmd.z, cmd.qx, cmd.qy, cmd.qz, cmd.qw, rc_active.outlet_id);
                  eq(cmd.frame_id, rc_active.frame_id);
		  concurrent(cmd.end, end);
		}
		else {
		  contains_start(safety_tuck_arms.Active cmd);
		  concurrent(cmd.end, end);
		}
	      }
	    }
	  }
	}
      }
    }
  }
}

/**************************************************
 * Update Rules
 *************************************************/

SafetyTuckArms::Inactive {
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
  }
}

MoveBase::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.in_position, true);
  }
}

DetectPlugOnBase::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plug_is_stowed, yes);
    eq(rc.ready_to_grasp, true);

    // Update PlugState
    starts(plug_state.Holds ps);
    eq_plug_stow_msg(ps.object, object);
  }
}

PlugsUntuckArms::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.arms_clear, true);
  }
}

StowPlug::Active{
  starts_during(plug_state.Holds ps);
  starts_during(RechargeController.Holds rc);
  eq_plug_stow_msg(object, ps.object);
  //eq(rc.arms_clear, false);
}


// If we stow successfully, declare maybe. Requires confirmation!
// Changing this to yes for now - BMM
StowPlug::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plug_is_stowed, yes);
    eq(rc.plug_in_hand, false);
  }
}

Unplug::Active{
  starts_during(RechargeController.Holds rc);
  //eq(rc.arms_clear, false);
}

Unplug::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plugged_in, false);
  }
}

PlugIn::Active{
  starts_during(RechargeController.Holds rc);
  //eq(rc.arms_clear, false);
}

PlugIn::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plugged_in, true);
    eq(rc.recharged, true);
  }
}

DetectOutletFine::Active{
  starts_during(outlet_state.Holds os);
  eq_point_msg(object, os.object);
}

DetectOutletFine::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.outlet_detected_fine, true);

    // Update outlet state with feedback
    starts(outlet_state.Holds os);
    eq_pose_msg(os.object, object);
  }
}

DetectOutletCoarse::Active{
  starts_during(outlet_state.Holds os);
  eq_point_msg(object, os.object);
}

DetectOutletCoarse::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.outlet_detected_coarse, true);
    eq(rc.in_position, false);

    // Update outlet state with feedback
    starts(outlet_state.Holds os);
    eq_pose_msg(os.object, object);
  }
}

LocalizePlugInGripper::Active{
  starts_during(outlet_state.Holds os);
  eq_pose_msg(object, os.object);
}

LocalizePlugInGripper::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.ready_to_plug_in, true);
  }
}

MoveAndGraspPlug::Active{
  starts_during(RechargeController.Holds rc);
  //eq(rc.arms_clear, false);
}

MoveAndGraspPlug::Inactive{
  if(status == SUCCESS){
    starts(RechargeController.Holds rc);
    eq(rc.plug_in_hand, true);
    eq(rc.ready_to_grasp, false);
    eq(rc.plug_is_stowed, no);
  }
  if (status == ABORTED) {
    starts(RechargeController.Holds rc);
    eq(rc.ready_to_grasp, false);
  }
}
