/*
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// TREX base class declaration and definitions
#include "TREX.nddl"

// Model inputs
#include "rcs/exports.nddl"
#include "rcs/plugs/exports.nddl"
#include "rcs/doors/exports.nddl"
#include "rcs/safety/exports.nddl"
#include "safety/exports.nddl"

MobilityStatus::Holds{
  defaultOnCommit(stuck, false);
  defaultOnCommit(gripper_open, true);
  defaultOnCommit(arms_tucked, true);
}


// Internal Timelines
MobilityStatus mobility_status = new MobilityStatus(Internal);

// Actions cauuing arms to be tucked
DoorsTuckArms doors_tuck_arms = new DoorsTuckArms(External);
SafetyTuckArms safety_tuck_arms = new SafetyTuckArms(External);

// Actions causing arms to become untucked. Required to be untucked from beginning to end
TouchDoor touch_door = new TouchDoor(External);
GraspHandle grasp_handle = new GraspHandle(External);
PlugsUntuckArms plugs_untuck_arms = new PlugsUntuckArms(External);

DoorsTuckArms::Inactive{
  if(status == SUCCESS){
    contained_by(mobility_status.Holds mb);
    eq(mb.arms_tucked, true);
  }
}

SafetyTuckArms::Inactive{
  if(status == SUCCESS){
    contained_by(mobility_status.Holds mb);
    eq(mb.arms_tucked, true);
  }
}


TouchDoor::Active{
  contained_by(mobility_status.Holds mb);
  eq(mb.arms_tucked, false);
}


GraspHandle::Active{
  contained_by(mobility_status.Holds mb);
  eq(mb.arms_tucked, false);
}

PlugsUntuckArms::Active{
  contained_by(mobility_status.Holds mb);
  eq(mb.arms_tucked, false);
}
