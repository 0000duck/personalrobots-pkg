/**
 * This file defines the classes that are specific to the integration with the high level controllers
 * and state variables of the door domain.
 */

/** CONSTANTS and TYPEDEFS **/

int UNKNOWN = -1;

int FRAME_P1 = 1;
int FRAME_P2 = 2;
typedef int [-1, 2] HINGE_FRAME;

int CLOCKWISE = 1;
int COUNTER_CLOCKWISE = 2;

typedef int [-1, 2] ROTATION_DIRECTION;

/**
 * @brief 
 */
class DoorsTuckArms extends ROSAction {
  DoorsTuckArms(Mode _mode){super(_mode);}
};

class DoorManipulationBehavior extends ROSAction {

  /**
   * The parameters here 
   */
  predicate Active{
    float time_stamp; // A double encoding is reliable
    string frame_id;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;

    // Normal
    float normal_x;
    float normal_y;
    float normal_z;
  }

  predicate Inactive{
    float time_stamp; // A double encoding is reliable
    string frame_id;

    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;


    // Additional Frame information
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float handle_x;
    float handle_y;
    float handle_z;

    // Normal
    float normal_x;
    float normal_y;
    float normal_z;

    // Commit to unknown values if nothing set
    defaultOnCommit(hinge, UNKNOWN);
    defaultOnCommit(rot_dir, UNKNOWN);
  }

  DoorManipulationBehavior(Mode _mode){
    super(_mode);
  }
}

/**
 * Behavior to grasp the handle once in a position to do so
 */
class GraspHandle extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  GraspHandle(Mode _mode){
    super(_mode);
  }
};


/**
 * Behavior to grasp the handle once in a position to do so
 */
class UnlatchHandle extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  UnlatchHandle(Mode _mode){
    super(_mode);
  }
};

/**
 * Behavior to open the door, assuming it is ajar, and assuming it has a grasp on the handle
 */
class OpenDoor extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  OpenDoor(Mode _mode){
    super(_mode);
  }
};

/**
 * Behavior to open the door, assuming it is ajar, and assuming it has a grasp on the handle
 */
class OpenDoorWithoutGrasp extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  OpenDoorWithoutGrasp(Mode _mode){
    super(_mode);
  }
};

/**
 * Behavior to extract the gripper from a grasp on the handle
 */
class ReleaseHandle extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  ReleaseHandle(Mode _mode){
    super(_mode);
  }
};

/**
 * DetectDoor is activated to search for the door. It will assume it is in a suitable observation position facing the door
 */
class DetectDoor extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  DetectDoor(Mode _mode){
    super(_mode);
  }
};

/**
 * DetectHandle is activated to search for the door. It will assume it is in a suitable observation position facing the door
 */
class DetectHandle extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  DetectHandle(Mode _mode){
    super(_mode);
  }
};

/**
 * NotifyDoorBlocked will just send a message to update the world model that the given door is blocked. We will indicate
 * the parameters based on the current and target positions
 */
class NotifyDoorBlocked extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  NotifyDoorBlocked(Mode _mode){
    super(_mode);
  }

};

/**
 * 
 */
class MoveBaseDoor extends DoorManipulationBehavior {

  // Redeclare because of bug in parser
  predicate Active{}
  predicate Inactive{}

  MoveBaseDoor(Mode _mode){
    super(_mode);
  }

};
