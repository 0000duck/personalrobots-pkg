
/**
 * This file defines actions and state variables utilized in navigation. It will include
 * @author Conor McGann
 */

float BASE_POSITION_ERROR = 1.0;
float ANGLE_ERROR = 0.2;

typedef float [0.0 1.0] UNIT_FLOAT;

/**
 * BaseState will capture position and orientation.
 */
class BaseState extends ROSTFStateVariable {
	predicate Holds{
		float x;
		float y;
		float th;
		float accumulatedDistance; // Derived from inputs
		defaultOnCommit(accumulatedDistance, 0.0);
	}

	BaseState(Mode _mode){
		super(_mode, "Holds", true);
	}
};

/**
 * MoveBase behavior will handle active control of vehicle to accomplish 
 * a waypoint.
 */
class MoveBase extends ROSTFAction {

  predicate Inactive{
    float x;
    float y;
    float th;
    float des_x;
    float des_y;
    float des_th;
  }

  // Parameters to get to the target
  predicate Active {
    float x;
    float y;
    float th;
  }

  MoveBase(Mode _mode){
    super(_mode);
  }

  MoveBase(Mode _mode, int max_duration_){
    super(_mode, max_duration_);
  }
};

/**
 * @brief This is a sensing action which will be used during navigation and recharging.
 *
 * It should return success if it found the plug, and the plug is on the base in the expected position. 
 * It will take as input an expected x, y, and th triple in the 'robot frame' and it will give feedback of the 
 * actual x and y values.
 */
class DetectPlugOnBase extends ROSTFAction {

  predicate Active {
    float x;
    float y;
    float th;
  }

  predicate Inactive {
    float x;
    float y;
    float th;
  }

  DetectPlugOnBase(Mode _mode){ super(_mode);}
};
