/**
 * This file specifies the interface for actions in the plugs domain
 * @note Detection of the plug on the base is specified in the safety area.
 */

/**
 * @brief 
 */
class PlugsUntuckArms extends ROSAction {
  PlugsUntuckArms(Mode _mode){super(_mode);}
};

/**
 * @brief For placing the plug back on the base.
 * Leaves the arm in a free position out of the way so that we can confirm that the plug is stowed
 */
class StowPlug extends ROSAction {
  // Goal takes a point for the target location
  predicate Active{
    // PlugStow message from detect plug
    string frame_id;
    bool stowed;
    float x;
    float y;
    float z;
  }

  // No feedback. Just succeeds or not
  predicate Inactive{}

  StowPlug(Mode _mode){super(_mode);}
};

/**
 * @brief For unplugging from the socket. Just using a force controller so no args required.
 */
class Unplug extends ROSAction {

  Unplug(Mode _mode){super(_mode);}
};

/**
 * @brief Push plug into socket. Should be just at the socket and in the gripper.
 */
class PushPlugIn extends ROSAction {

  PushPlugIn(Mode _mode){super(_mode);}
};

/**
 * @brief Initial insertion - where the prongs are in. Follow up with a push
 * @todo Check if this is absorbed into servo action
 */
class InsertPlug extends ROSAction {

  predicate Active{}

  predicate Inactive{}

  InsertPlug(Mode _mode){super(_mode);}
};

/**
 * @brief Servo to outlet, assuming we have the plug staged etc
 * @todo Might be a pose message
 */
class ServoToOutlet extends ROSAction {
  predicate Active{
    // Outlet Pose Message. We do not need the plug pose since the tool frame will already
    // have been moved to the location of the plug by LocalizePlug action
    string frame_id;
    float x;
    float y;
    float z;
    float dx;
    float dy;
    float dz;
  }

  predicate Inactive{}

  ServoToOutlet(Mode _mode){super(_mode);}
};

/**
 * @brief Detect the outlet with fine resolution
 */
class DetectOutletFine extends ROSAction {
  // Input takes a point
  predicate Active{
    string frame_id;
    float x;
    float y;
    float z;
  }

  // Output produces a point and the normal
  predicate Inactive{
    string frame_id;
    float x;
    float y;
    float z;
    float dx;
    float dy;
    float dz;
  }

  DetectOutletFine(Mode _mode){super(_mode);}
};

/**
 * @brief Detect the outlet with coarse resolution
 */
class DetectOutletCoarse extends ROSAction {
  // Input takes a point
  predicate Active{
    string frame_id;
    float x;
    float y;
    float z;
  }

  // Output produces a point and the normal
  predicate Inactive{
    string frame_id;
    float x;
    float y;
    float z;
    float dx;
    float dy;
    float dz;
  }

  DetectOutletCoarse(Mode _mode){super(_mode);}
};

/**
 * @brief Localize the plug in the gripper
 * @note No args - looking at it.
 */
class LocalizePlugInGripper extends ROSAction {

  LocalizePlugInGripper(Mode _mode){super(_mode);}
};

/**
 * @brief Move to a grasp point and grasp
 */
class MoveAndGraspPlug extends ROSAction {
  predicate Active{
    // PlugStowed message
    string frame_id;
  }

  MoveAndGraspPlug(Mode _mode){super(_mode);}
};
