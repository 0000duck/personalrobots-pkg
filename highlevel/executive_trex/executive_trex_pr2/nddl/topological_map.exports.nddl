/**
 * Constructs for the static topological map
 */
class MapEntity {
  int key;
  MapEntity(int _key){
    key = _key;
  }
};

class Connector extends MapEntity{
  Connector(int _key){
    super(_key);
  }
};

class Region extends MapEntity{
  Region(int _key){
    super(_key);
  }
};

class HasConnector {
  Region region;
  Connector connector;

  HasConnector(Region r, Connector c){
    region = r;
    connector = c;
  }
};

/***********************************************************************
 * External functions and relations for working with the topological map
 ***********************************************************************/

// A relation: given a connector, bind the x, y the values. Given x, and y, bind the connector
constraint map_connector(connection, x, y, th) { connection <: Connector && x <: numeric && y <: numeric && th <: numeric }

// A function: given an x,y position, bind a region.
constraint map_get_region_from_position(region, x, y){ region <: Region && x <: numeric && y <: numeric }

// A relation: constrain two connection variables so that they share a common region. Propagates when one of 3 is bound.
constraint map_connected(connection_a, connection_b, region){ connection_a <: Connector && connection_b <: Connector && region <: Region }

// A function to query if a region is a doorway
constraint map_is_doorway(result, region) { result <: bool && region <: Region }

// Allocate constants
Connector NO_CONNECTOR = new Connector(0);
Region NO_REGION = new Region(0);