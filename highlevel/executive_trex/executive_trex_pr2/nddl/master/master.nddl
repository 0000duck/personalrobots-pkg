/*
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


// Priority for goals
typedef int [0 5] PRIORITY;

class M2Goals extends Behavior {
  predicate Active{
    string frame_id;
    float time_stamp;
    float x;
    float y;
    float z;
    float qx;
    float qy;
    float qz;
    float qw;
    MAP_KEY outlet_id;

    // Populate parameters from outlet id
    map_get_outlet_state(x, y, z, qx, qy, qz, qw, outlet_id);
  }

  predicate Inactive{}

  M2Goals(){
    super(Internal);
  }
};

class M2Controller extends AgentTimeline {
  predicate Holds {
    bool active;
    bool at_doorway;
    bool recharged;
    bool at_charging_station;
  }

  M2Controller(){
    super(Internal, "Holds");
  }
};

// Internal Timeines
M2Goals m2_goals = new M2Goals();
M2Controller m2_controller = new M2Controller();

// External timelines
MoveBehavior driver = new MoveBehavior(External, false);
MoveBehavior doorman = new MoveBehavior(External, true);
Recharger recharger = new Recharger(External);

// Actions
AgentActions actions = new AgentActions();

M2Goals::Active{
  // Linking with a start event to force execution
  contains(actions.startEvent);

  if(start){
    starts(m2_controller.Holds mc);
    eq(mc.active, true);
    eq(mc.at_charging_station, false);
    eq(mc.recharged, false);
  }
}


M2Controller::Holds{
  if(active == false){
    contained_by(m2_goals.Inactive);
    eq(mc.recharged, false);
    eq(mc.at_charging_station, false);
  }

  // Default based on predecessors
  met_by(Holds p);
  defaultOnCommit(at_recharging_station, p.at_recharging_station);
  defaultOnCommit(recharged, p.recharged);

  if(active == true){
    meets(Holds s);
    contained_by(m2_goals.Active m2_active);

    if(at_charging_station == true){
      if(recharged == true){
	eq(duration, 1);
	eq(s.active, false);
      }
      else {
	contains_start(recharger.Active cmd);
	concurrent(cmd.end, end);
      }
    }
    else{
      // Have to get to the charging station. We want the next position to get to
    }
  }
}

MoveBehavior::Inactive{
  if(start){
    contained_by(m2_controller.Holds mc);
    if(status == SUCCESS){
      if(object == driver){
	eq(mc.at_recharge
      }
      if(object == doorman){

      }
    }
  }
}


