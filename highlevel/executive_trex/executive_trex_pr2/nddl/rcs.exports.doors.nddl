/**
 * This file defines the classes that are specific to the integration with the high level controllers
 * and state variables of the door domain.
 */


/** CONSTANTS and TYPEDEFS **/

int UNKNOWN = -1;

int FRAME_P1 = 1;
int FRAME_P2 = 2;
typedef int [-1, 2] HINGE_FRAME;

int CLOCKWISE = 1;
int COUNTER_CLOCKWISE = 2;
typedef int [-1, 2] ROTATION_DIRECTION;

/**
 * DoorState is a state variable providing feedback on the perceived state of the door and its related
 * status flags. Note that if any value is unkown, then we consider we have lost observability of the door
 * @see Door.msg
 */
class DoorState extends AgentTimeline {

  predicate Holds {
    // Points for the door frame
    float frame_p1_x;
    float frame_p1_y;
    float frame_p1_z;
    float frame_p2_x;
    float frame_p2_y;
    float frame_p2_z;

    // Points for the door
    float door_p1_x;
    float door_p1_y;
    float door_p1_z;
    float door_p2_x;
    float door_p2_y;
    float door_p2_z;

    // Handle data
    float height;
    HINGE_FRAME hinge;
    ROTATION_DIRECTION rot_dir;

    // Commit to unknown values if nothing set
    defaultOnCommit(hinge, UNKNOWN);
    defaultOnCommit(rot_dir, UNKNOWN);
  }

  DoorState(Mode _mode){
    super(_mode, "Holds");
  }
};

/**
 * DoorDetector is activated to search for the door, and maintain state about the door
 */
