/**
 * Execute a single external action
 */
#include "doors/imports.nddl"
#include "mechanism_control/exports.nddl"

close();

// Load a topological map - should have a trivial map here
map_initialize_from_file("willow.tmap");

// The goal is to execute an OpenDoor action, where we give it the door data
rejectable(detect_door.Active cmd_detect_door);
rejectable(detect_door.Inactive feedback_detect_door);
rejectable(detect_handle.Active cmd_detect_handle);

// Bind order
cmd_detect_door meets feedback_detect_door;
cmd_detect_door before cmd_detect_handle;

eq(feedback_detect_door.status, SUCCESS);

// Input is for door detection
cmd_detect_door.frame_id = "base_footprint";
cmd_detect_door.frame_p1_x =  1.5;
cmd_detect_door.frame_p1_y = -0.5;
cmd_detect_door.frame_p1_z =  1.0;
cmd_detect_door.frame_p2_x =  1.5;
cmd_detect_door.frame_p2_y =  0.5;
cmd_detect_door.frame_p2_z =  1.0;
cmd_detect_door.door_p1_x =  1.5;
cmd_detect_door.door_p1_y = -0.5;
cmd_detect_door.door_p1_z =  1.0;
cmd_detect_door.door_p2_x =  1.5;
cmd_detect_door.door_p2_y =  0.5;
cmd_detect_door.door_p2_z =  1.0;
cmd_detect_door.handle_x =  1.5;
cmd_detect_door.handle_y =  0.5;
cmd_detect_door.handle_z =  1.0;
cmd_detect_door.height =  2.5;
cmd_detect_door.hinge =  UNKNOWN;
cmd_detect_door.rot_dir =  UNKNOWN;

get_state(cmd_detect_handle.state, feedback_detect_door.state);

