/**
 * Execute a single external action
 */
#include "doors/imports.nddl"
#include "mechanism_control/exports.nddl"

close();

/*
rejectable(grasp_handle.Active cmd_grasp_handle);
cmd_grasp_handle.frame_id = "odom_combined";
cmd_grasp_handle.frame_p1_x =  1.5;
cmd_grasp_handle.frame_p1_y = -0.5;
cmd_grasp_handle.frame_p1_z =  1.0;
cmd_grasp_handle.frame_p2_x =  1.5;
cmd_grasp_handle.frame_p2_y =  0.5;
cmd_grasp_handle.frame_p2_z =  1.0;
cmd_grasp_handle.door_p1_x =  1.5;
cmd_grasp_handle.door_p1_y = -0.5;
cmd_grasp_handle.door_p1_z =  1.0;
cmd_grasp_handle.door_p2_x =  1.5;
cmd_grasp_handle.door_p2_y =  0.5;
cmd_grasp_handle.door_p2_z =  1.0;
cmd_grasp_handle.handle_x =  1.5;
cmd_grasp_handle.handle_y =  0.5;
cmd_grasp_handle.handle_z =  1.0;
cmd_grasp_handle.height =  2.5;
cmd_grasp_handle.hinge =  UNKNOWN;
cmd_grasp_handle.rot_dir =  UNKNOWN;
*/
/*
rejectable(move_base.Active cmd_move_to_grasp);
cmd_move_to_grasp.frame_id="odom_combined";
cmd_move_to_grasp.x = 1.28;
cmd_move_to_grasp.y = 0.08;
cmd_move_to_grasp.th = 0.0;
*/

// The goal is to execute an OpenDoor action, where we give it the door data
rejectable(safety_tuck_arms.Active cmd_tuck_arms);
rejectable(detect_door.Active cmd_detect_door);
rejectable(detect_door.Inactive feedback_detect_door);
rejectable(detect_handle.Active cmd_detect_handle);
rejectable(detect_handle.Inactive feedback_detect_handle);
rejectable(move_base.Active cmd_move_to_grasp);
rejectable(grasp_handle.Active cmd_grasp_handle);

// Bind order
cmd_tuck_arms before cmd_detect_door;
cmd_detect_door meets feedback_detect_door;
cmd_detect_door before cmd_detect_handle;
cmd_detect_handle meets feedback_detect_handle;
cmd_detect_handle before cmd_move_to_grasp;
cmd_move_to_grasp before cmd_grasp_handle;

eq(feedback_detect_door.status, SUCCESS);

// Input is for door detection
cmd_detect_door.frame_id = "base_footprint";
cmd_detect_door.frame_p1_x =  1.5;
cmd_detect_door.frame_p1_y = -0.5;
cmd_detect_door.frame_p1_z =  1.0;
cmd_detect_door.frame_p2_x =  1.5;
cmd_detect_door.frame_p2_y =  0.5;
cmd_detect_door.frame_p2_z =  1.0;
cmd_detect_door.door_p1_x =  1.5;
cmd_detect_door.door_p1_y = -0.5;
cmd_detect_door.door_p1_z =  1.0;
cmd_detect_door.door_p2_x =  1.5;
cmd_detect_door.door_p2_y =  0.5;
cmd_detect_door.door_p2_z =  1.0;
cmd_detect_door.handle_x =  1.5;
cmd_detect_door.handle_y =  0.5;
cmd_detect_door.handle_z =  1.0;
cmd_detect_door.height =  2.5;
cmd_detect_door.hinge =  UNKNOWN;
cmd_detect_door.rot_dir =  UNKNOWN;

get_state(cmd_detect_handle.object, feedback_detect_door.object);

// Set params for move base
eq(cmd_move_to_grasp.frame_id, feedback_detect_handle.frame_id);
eq(cmd_move_to_grasp.time_stamp, feedback_detect_handle.time_stamp);
door_get_robot_pose_for_door(cmd_move_to_grasp.x, cmd_move_to_grasp.y, cmd_move_to_grasp.th,
			     feedback_detect_handle.object,
			     GRASP_RANGE);

// Set params for grasp handle
get_state(cmd_grasp_handle.object, feedback_detect_door.object);