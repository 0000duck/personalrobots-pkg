class TestActions extends AgentActions {

  predicate StartEvent {}
}

TestActions test_actions = new TestActions();

/**
 * Sim will start behaviors as soon as possible
 */
ROSAction::Active{ starts(StartEvent); }




float MAX_CAPACITY; // Maximum energy capacity of all batteries
float NOMINAL_POWER_CONSUMPTION; // When not plugged in.
float PLUGGED_IN_POWER_CONSUMPTION; // When plugged in, it should draw this amount

/**
 * Behavior will be started and executed perfectly
 */
RechargeController::Active{
  // Forces a fixed duration.
  eq(duration, 1);

  // Batteries are magically charged at the end
  meets(Inactive s);
  eq(s.x, x);
  eq(s.y, y);
  eq(s.th, th);
  eq(s.recharge_level, recharge_level);

  // Fix the battery state at the end
  ends(BatteryState.Holds bs);
  float estEnergy, estCapacity, estConsumption;
  mulEq(recharge_level, MAX_CAPACITY, estEnergy);
  eq(estCapacity, MAX_CAPACITY);
  eq(estConsumption, NOMINAL_POWER_CONSUMPTION);

  defaultOnCommit(bs.energy_remaining, estEnergy);
  defaultOnCommit(bs.energy_capacity, estCapacity);
  defaultOnCommit(bs.power_consumption, estConsumption);
}

/**
 * By default it will retain prior values
 */
BatteryState::Holds{
  met_by(Holds p);
  defaultOnCommit(energy_remaining, p.energy_remaining);
  defaultOnCommit(energy_capacity, p.energy_capacity);
  defaultOnCommit(power_consumption, p.power_consumption);
  //eq(duration, 1);
}

ShellCommand::Active{
  eq(duration, 1);
}

// State Variables
BatteryState battery_state = new BatteryState(Internal);

// Behaviors
RechargeController recharge_controller = new RechargeController(Internal);
ShellCommand shell_command = new ShellCommand(Internal);
