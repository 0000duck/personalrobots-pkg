#include "nav.init.nddl"

/**
 * Tests the orinteerin solver and multi-objective planning. No priorities are used so this
 * will give all goals equal priority
 */

rejectable(moveBase.Active g0);
g0.x = 19.5;
g0.y = 28.5;
g0.th= 0.5;

rejectable(moveBase.Active g1);
g1.x = 15.0;
g1.y = 25.2;
g1.th = 0.5;

rejectable(moveBase.Active g2);
g2.x = 10.6;
g2.y = 27.15;
g2.th = 1.0;


//Check goal 0.
rejectable(baseState.Holds checkgoal0);
concurrent(checkgoal0.start, g0.end);
float distance0;
calcDistance(distance0, g0.x, g0.y, checkgoal0.x, checkgoal0.y);
leq(distance0, 0.5); 
assertCompleted(checkgoal0.state);

//Check goal 1.
rejectable(baseState.Holds checkgoal1);
concurrent(checkgoal1.start, g1.end);
float distance1;
calcDistance(distance1, g1.x, g1.y, checkgoal1.x, checkgoal1.y);
leq(distance1, 0.5); 
assertCompleted(checkgoal1.state);

//Check goal 2.
rejectable(baseState.Holds checkgoal2);
concurrent(checkgoal2.start, g2.end);
float distance2;
calcDistance(distance2, g2.x, g2.y, checkgoal2.x, checkgoal2.y);
leq(distance2, 0.5); 
assertCompleted(checkgoal2.state);


