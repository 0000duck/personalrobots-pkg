/**
\mainpage
\htmlinclude manifest.html

@b ompl_planning is a node capable of planning kinematic paths for
a set of robot models. Each robot model is a complete model specified
in URDF or consists of an URDF group.

Organization:
 - there are multiple models (a model is a group of links/joints we plan for)
 - there are multiple planners that can be used for each model
 - there are multiple types of planning requests

The code is mostly implemented in the included RKP* files (ROS
Kinematic Planning). There exists one basic class (RKPRequestHandler)
that can handle different requests.

A model is defined for each loaded URDF model, and for each of the
URDF groups marked for planning. This model includes a kinematic
model, a collision space (shared between models) and a set of
planners. If a planner is used for different models, it is
instantiated each time. Since planners may require different
setup/configuration code, there exists a base class that defines the
functionality and an inherited class for each type of planner that can
be instantiated. The planners are associated to string names:
kinematic::RRT, kinematic::LazyRRT, kinematic::EST, kinematic::SBL,
kinematic::IKSBL. These string names can be used for the planner_id
component of the planning request. If no planner_id is specified, an
appropriate planner is automatically selected. This is in fact the
prefered use.

When checking states for validity, a resolution at which paths are
check needs to be defined. To make things easier for the user, this
parameter is computed by default by the SpaceInformationRKPModel
class. The current settings work fine for the PR2, but if another
robot is to be used, different settings man need to be used.

\todo
- Find a better way to specify resolution for state validity
checking.

<!--
\section codeapi Code API
-->

\section rosapi ROS API

List of nodes:
- \b motion_planner
- \b state_validity_checker
- \b display_planner_collision_model

<!-- START: copy for each node -->

<hr>

\subsection motion_planner

\subsubsection Usage
\verbatim
$ ompl_planning [standard ROS args]
\endverbatim

\par Example

\verbatim
$ ompl_planning robot_description:=pr2/robot_description
\endverbatim


\subsubsection topics ROS topics

Subscribes to:
- only topics PlanningMonitor from planning_environment package subscribes to

\subsubsection parameters ROS parameters
- "~planning_frame_id"/string : if the default frame is not to be used when planning, this parameter allows changing that frame. 

\subsubsection services ROS services

- @b "plan_kinematic_path"/KinematicPlan : given a robot model, starting and goal states,
  this service computes a collision free path.


\subsection state_validity_checker

Checks whether the current state of the robot is in collision


\subsection display_planner_collision_model

Displays the current state of the collision space, as seen by the planners, using visualization markers.


<!-- END: copy for each node -->

*/