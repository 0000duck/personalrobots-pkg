/**
\mainpage
\htmlinclude manifest.html

\b planning_environment is a library that allows users to instantiate
robot models and collision models based on data from the parameter
server with minimal user input. Additionally, state information for
both robot models and collision environments can be monitored.

<!-- 
In addition to providing an overview of your package,
this is the section where the specification and design/architecture 
should be detailed. While the original specification may be done on the
wiki, it should be transferred here once your package starts to take shape.
You can then link to this documentation page from the Wiki. 
-->


\section codeapi Code API

The intended use for this package is to instantiante one of the two
model classes and potentially one of the monitor classes.

The model classes are:
- \b RobotModels : allows the instantiation of various robot models (for example, a kinematic one) based on data from the parameter server. The URDF robot description and the .yaml files describing collision and planning information are assumed to be loaded.

- \b CollisionModels : allows the instantiation of various robot models (for example, a kinematic one) and various collision spaces, based on data from the parameter server. This class inherits from \b RobotModels. The URDF robot description and the .yaml files describing collision and planning information are assumed to be loaded.

<hr>

The monitor classes are:
- \b KinematicModelStateMonitor : monitors the kinematic state of the robot. Optionally, monitors the base location. It uses the 'mechanism_state' topic.
- \b CollisionSpaceMonitor : same as \b KinematicModelStateMonitor except it also monitors the state of the collision environment. It uses the 'collision_map' topic to receive new full maps and the 'collision_map_update' to receive updates. Attaching objects to robot links is possible using the 'attach_object' topic. The '~box_scale' parameter is used as the constant that gets multiplied to a box's maximum extent to obtain the radius of the sphere used in collision checking.
- \b PlanningMonitor : same as \b CollisionSpaceMonitor except it also offers the ability to evaluate kinematic constraints and check paths and states for validity.

      <!-- Provide links to specific auto-generated API
documentation within your package that is of particular interest to a
reader. Doxygen will document pretty much every part of your code, so
do your best here to point the reader to the actual API.

If your codebase is fairly large or has different sets of APIs, you
should use the doxygen 'group' tag to keep these APIs together. For
example, the roscpp documentation has 'libros' group.
-->

\section rosapi ROS API

<!--
Names are very important in ROS because they can be remapped on the
command-line, so it is VERY IMPORTANT THAT YOU LIST NAMES AS THEY
APPEAR IN THE CODE. You should list names of every topic, service and
parameter used in your code. There is a template below that you can
use to document each node separately.

List of nodes:
- \b node_name1
- \b node_name2
-->

<!-- START: copy from here to 'END' for each node 

<hr>

\subsection node_name node_name

node_name does (provide a basic description of your node)

\subsubsection Usage
\verbatim
$ node_type1 [standard ROS args]
\endverbatim

\par Example

\verbatim
$ node_type1
\endverbatim
-->

\subsubsection topics ROS topics

Subscribes to:
- @b "mechanism_state"/MechanismState : the parameters describing the robot's current state
- @b "collision_map"/CollisionMap : data describing the 3D environment
- @b "collision_map_update"/CollisionMap : updates to data describing the 3D environment
- @b "attach_object"/AttachedObject : data describing an object to be attached to a link

\subsubsection parameters ROS parameters

Reads the following parameters from the parameter server

Reads the following parameters from the parameter server
- @b "~refresh_interval_collision_map"/double : if more than this interval passes, the maintained map is considered invalid

- @b "~refresh_interval_kinematic_state"/double : if more than this interval passes, the maintained kinematic state is considered invalid

- @b "~bounding_planes"/string : a sequence of plane equations specified as "a1 b1 c1 d1 a2 b2 c2 d2 ..." where each plane is defined by the equation ax+by+cz+d=0

- @b "~box_scale"/double : boxes from the collision map are approximated with spheres using the extents of the boxes. The maximum extent of the box is multiplied by the constant specified by this parameter to obtain the radius of the sphere approximating the box

A robot description and its corresponding planning and collision descriptions are assumed to be loaded on the parameter server as well.

Sets the following parameters on the parameter server

- Sets the parameters it reads to default values

<!--
\subsubsection services ROS services
- \b "foo_service": [std_srvs/FooType] description of foo_service


END: copy for each node -->


<!-- START: Uncomment if you have any command-line tools

\section commandline Command-line tools

This section is a catch-all for any additional tools that your package
provides or uses that may be of use to the reader. For example:

- tools/scripts (e.g. rospack, roscd)
- roslaunch .launch files
- xmlparam files

\subsection script_name script_name

Description of what this script/file does.

\subsubsection Usage
\verbatim
$ ./script_name [args]
\endverbatim

\par Example

\verbatim
$ ./script_name foo bar
\endverbatim

END: Command-Line Tools Section -->

*/